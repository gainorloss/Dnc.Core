#################### 05/03/2019 18:58:12.7569139 ###############
Message:    FastExpressions For Type: AspNetCore.ApiDoc.Internal.ControllerInformation
	    .Lambda #Lambda1<System.Func`5[System.Object,System.String,System.Boolean,System.Object,System.Object]>(
	        System.Object $@object,
	        System.String $name,
	        System.Boolean $isAssign,
	        System.Object $value) {
	        .Block(
	            System.Object $_,
	            AspNetCore.ApiDoc.Internal.ControllerInformation $current) {
	            $_;
	            .If ($value != null) {
	                $_ = $value
	            } .Else {
	                .Default(System.Void)
	            };
	            $current = $@object .As AspNetCore.ApiDoc.Internal.ControllerInformation;
	            .Try {
	                .Block() {
	                    .If (
	                        $isAssign
	                    ) {
	                        .Switch ($name) {
	                        .Case ("IsObsolete"):
	                                .Block() {
	                                    ($current .As AspNetCore.ApiDoc.Internal.Information).IsObsolete = (System.Boolean)$value;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Message"):
	                                .Block() {
	                                    ($current .As AspNetCore.ApiDoc.Internal.Information).Message = (System.String)$value;
	                                    .Default(System.Void)
	                                }
	                        .Default:
	                                .Throw .New System.Collections.Generic.KeyNotFoundException(.Call System.String.Concat(
	                                        "Cannot found the property or field '",
	                                        $name,
	                                        "' of 'AspNetCore.ApiDoc.Internal.ControllerInformation'"))
	                        }
	                    } .Else {
	                        .Switch ($name) {
	                        .Case ("Id"):
	                                .Block() {
	                                    $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Id;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Name"):
	                                .Block() {
	                                    $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Name;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Description"):
	                                .Block() {
	                                    $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Description;
	                                    .Default(System.Void)
	                                }
	                        .Case ("IsObsolete"):
	                                .Block() {
	                                    $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).IsObsolete;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Message"):
	                                .Block() {
	                                    $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Message;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Remarks"):
	                                .Block() {
	                                    $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Remarks;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Order"):
	                                .Block() {
	                                    $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Order;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Parent"):
	                                .Block() {
	                                    $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Parent;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Current"):
	                                .Block() {
	                                    $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Current;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Childrens"):
	                                .Block() {
	                                    $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Childrens;
	                                    .Default(System.Void)
	                                }
	                        .Default:
	                                .Throw .New System.Collections.Generic.KeyNotFoundException(.Call System.String.Concat(
	                                        "Cannot found the property or field '",
	                                        $name,
	                                        "' of 'AspNetCore.ApiDoc.Internal.ControllerInformation'"))
	                        }
	                    }
	                }
	            } .Catch (System.Exception $ex) {
	                .Throw .New System.Exception(
	                    .Call System.String.Concat(
	                        " Occur error when Get or Set the property or field '",
	                        $name,
	                        "' of 'AspNetCore.ApiDoc.Internal.ControllerInformation' "),
	                    $ex)
	            };
	            $_
	        }
	    }
Path:       http://localhost:5000/apidoc/docViewData.json?v=636924778697984862
Method:     GET
From IP:    ::1
UserAgent:  Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36
StackTrace: at AspNetCore.Extensions.Internal.FastExpressions.GenerateExpressions()
   at AspNetCore.Extensions.Internal.FastExpressions.<>c__DisplayClass22_0.<CreateDelegate>b__0(Int32 _func)
   at System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(TKey key, Func`2 valueFactory)
   at AspNetCore.Extensions.Internal.FastExpressions.CreateDelegate(Object object)
   at System.Extensions.ReflectExtensions.Value(Object value, String name)
#################### 05/03/2019 18:58:12.9115456 ###############
Message:    FastExpressions For Type: AspNetCore.ApiDoc.Internal.ActionInformation
	    .Lambda #Lambda1<System.Func`5[System.Object,System.String,System.Boolean,System.Object,System.Object]>(
	        System.Object $@object,
	        System.String $name,
	        System.Boolean $isAssign,
	        System.Object $value) {
	        .Block(
	            System.Object $_,
	            AspNetCore.ApiDoc.Internal.ActionInformation $current) {
	            $_;
	            .If ($value != null) {
	                $_ = $value
	            } .Else {
	                .Default(System.Void)
	            };
	            $current = $@object .As AspNetCore.ApiDoc.Internal.ActionInformation;
	            .Try {
	                .Block() {
	                    .If (
	                        $isAssign
	                    ) {
	                        .Switch ($name) {
	                        .Case ("Request"):
	                                .Block() {
	                                    $current.Request = (System.Collections.Generic.SortedSet`1[AspNetCore.ApiDoc.ModelInfo])$value;
	                                    .Default(System.Void)
	                                }
	                        .Case ("RequestExample"):
	                                .Block() {
	                                    $current.RequestExample = (System.Collections.Generic.SortedDictionary`2[System.String,System.Object])$value;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Response"):
	                                .Block() {
	                                    $current.Response = (System.Collections.Generic.SortedSet`1[AspNetCore.ApiDoc.ModelInfo])$value;
	                                    .Default(System.Void)
	                                }
	                        .Case ("ResponseExample"):
	                                .Block() {
	                                    $current.ResponseExample = (System.Collections.Generic.Dictionary`2[System.String,System.Object])$value;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Url"):
	                                .Block() {
	                                    $current.Url = (System.String)$value;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Method"):
	                                .Block() {
	                                    $current.Method = (System.String)$value;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Id"):
	                                .Call .Constant<System.Reflection.RtFieldInfo>(System.String <Id>k__BackingField).SetValue(
	                                    $current .As AspNetCore.ApiDoc.Internal.Information,
	                                    $value)
	                        .Case ("Name"):
	                                .Call .Constant<System.Reflection.RtFieldInfo>(System.String <Name>k__BackingField).SetValue(
	                                    $current .As AspNetCore.ApiDoc.Internal.Information,
	                                    $value)
	                        .Case ("Description"):
	                                .Call .Constant<System.Reflection.RtFieldInfo>(System.String <Description>k__BackingField).SetValue(
	                                    $current .As AspNetCore.ApiDoc.Internal.Information,
	                                    $value)
	                        .Case ("IsObsolete"):
	                                .Block() {
	                                    ($current .As AspNetCore.ApiDoc.Internal.Information).IsObsolete = (System.Boolean)$value;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Message"):
	                                .Block() {
	                                    ($current .As AspNetCore.ApiDoc.Internal.Information).Message = (System.String)$value;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Remarks"):
	                                .Call .Constant<System.Reflection.RtFieldInfo>(System.String <Remarks>k__BackingField).SetValue(
	                                    $current .As AspNetCore.ApiDoc.Internal.Information,
	                                    $value)
	                        .Case ("Order"):
	                                .Call .Constant<System.Reflection.RtFieldInfo>(Int32 <Order>k__BackingField).SetValue(
	                                    $current .As AspNetCore.ApiDoc.Internal.Information,
	                                    $value)
	                        .Case ("Parent"):
	                                .Call .Constant<System.Reflection.RtFieldInfo>(System.Type <Parent>k__BackingField).SetValue(
	                                    $current .As AspNetCore.ApiDoc.Internal.Information,
	                                    $value)
	                        .Case ("Current"):
	                                .Call .Constant<System.Reflection.RtFieldInfo>(System.Type <Current>k__BackingField).SetValue(
	                                    $current .As AspNetCore.ApiDoc.Internal.Information,
	                                    $value)
	                        .Case ("Childrens"):
	                                .Call .Constant<System.Reflection.RtFieldInfo>(System.Collections.Generic.List`1[AspNetCore.ApiDoc.Internal.Information] <Childrens>k__BackingField).SetValue(
	                                    $current .As AspNetCore.ApiDoc.Internal.Information,
	                                    $value)
	                        .Case ("_descriptor"):
	                                .Block() {
	                                    $current._descriptor = (AspNetCore.ApiDoc.ApiDocDescriptor)$value;
	                                    .Default(System.Void)
	                                }
	                        .Default:
	                                .Throw .New System.Collections.Generic.KeyNotFoundException(.Call System.String.Concat(
	                                        "Cannot found the property or field '",
	                                        $name,
	                                        "' of 'AspNetCore.ApiDoc.Internal.ActionInformation'"))
	                        }
	                    } .Else {
	                        .Switch ($name) {
	                        .Case ("Request"):
	                                .Block() {
	                                    $_ = (System.Object)$current.Request;
	                                    .Default(System.Void)
	                                }
	                        .Case ("RequestExample"):
	                                .Block() {
	                                    $_ = (System.Object)$current.RequestExample;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Response"):
	                                .Block() {
	                                    $_ = (System.Object)$current.Response;
	                                    .Default(System.Void)
	                                }
	                        .Case ("ResponseExample"):
	                                .Block() {
	                                    $_ = (System.Object)$current.ResponseExample;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Url"):
	                                .Block() {
	                                    $_ = (System.Object)$current.Url;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Method"):
	                                .Block() {
	                                    $_ = (System.Object)$current.Method;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Id"):
	                                .Block() {
	                                    $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Id;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Name"):
	                                .Block() {
	                                    $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Name;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Description"):
	                                .Block() {
	                                    $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Description;
	                                    .Default(System.Void)
	                                }
	                        .Case ("IsObsolete"):
	                                .Block() {
	                                    $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).IsObsolete;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Message"):
	                                .Block() {
	                                    $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Message;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Remarks"):
	                                .Block() {
	                                    $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Remarks;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Order"):
	                                .Block() {
	                                    $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Order;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Parent"):
	                                .Block() {
	                                    $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Parent;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Current"):
	                                .Block() {
	                                    $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Current;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Childrens"):
	                                .Block() {
	                                    $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Childrens;
	                                    .Default(System.Void)
	                                }
	                        .Case ("_descriptor"):
	                                .Block() {
	                                    $_ = (System.Object)$current._descriptor;
	                                    .Default(System.Void)
	                                }
	                        .Default:
	                                .Throw .New System.Collections.Generic.KeyNotFoundException(.Call System.String.Concat(
	                                        "Cannot found the property or field '",
	                                        $name,
	                                        "' of 'AspNetCore.ApiDoc.Internal.ActionInformation'"))
	                        }
	                    }
	                }
	            } .Catch (System.Exception $ex) {
	                .Throw .New System.Exception(
	                    .Call System.String.Concat(
	                        " Occur error when Get or Set the property or field '",
	                        $name,
	                        "' of 'AspNetCore.ApiDoc.Internal.ActionInformation' "),
	                    $ex)
	            };
	            $_
	        }
	    }
Path:       http://localhost:5000/apidoc/docViewData.json?v=636924778697984862
Method:     GET
From IP:    ::1
UserAgent:  Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36
StackTrace: at AspNetCore.Extensions.Internal.FastExpressions.GenerateExpressions()
   at AspNetCore.Extensions.Internal.FastExpressions.<>c__DisplayClass22_0.<CreateDelegate>b__0(Int32 _func)
   at System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(TKey key, Func`2 valueFactory)
   at AspNetCore.Extensions.Internal.FastExpressions.CreateDelegate(Object object)
   at System.Extensions.ReflectExtensions.Value(Object value, String name)
#################### 05/03/2019 18:58:13.0213774 ###############
Message:    FastExpressions For Type: AspNetCore.ApiDoc.ModelInfo
	    .Lambda #Lambda1<System.Func`5[System.Object,System.String,System.Boolean,System.Object,System.Object]>(
	        System.Object $@object,
	        System.String $name,
	        System.Boolean $isAssign,
	        System.Object $value) {
	        .Block(
	            System.Object $_,
	            AspNetCore.ApiDoc.ModelInfo $current) {
	            $_;
	            .If ($value != null) {
	                $_ = $value
	            } .Else {
	                .Default(System.Void)
	            };
	            $current = $@object .As AspNetCore.ApiDoc.ModelInfo;
	            .Try {
	                .Block() {
	                    .If (
	                        $isAssign
	                    ) {
	                        .Switch ($name) {
	                        .Case ("CurrentType"):
	                                .Block() {
	                                    $current.CurrentType = (System.Type)$value;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Name"):
	                                .Block() {
	                                    $current.Name = (System.String)$value;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Type"):
	                                .Block() {
	                                    $current.Type = (System.String)$value;
	                                    .Default(System.Void)
	                                }
	                        .Case ("IsRequired"):
	                                .Block() {
	                                    $current.IsRequired = (System.Boolean)$value;
	                                    .Default(System.Void)
	                                }
	                        .Case ("IsLoop"):
	                                .Block() {
	                                    $current.IsLoop = (System.Boolean)$value;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Description"):
	                                .Block() {
	                                    $current.Description = (System.String)$value;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Remarks"):
	                                .Block() {
	                                    $current.Remarks = (System.String)$value;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Value"):
	                                .Block() {
	                                    $current.Value = (System.Object)$value;
	                                    .Default(System.Void)
	                                }
	                        .Case ("IsArray"):
	                                .Block() {
	                                    $current.IsArray = (System.Boolean)$value;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Parent"):
	                                .Block() {
	                                    $current.Parent = (AspNetCore.ApiDoc.ModelInfo)$value;
	                                    .Default(System.Void)
	                                }
	                        .Case ("IsEnum"):
	                                .Block() {
	                                    $current.IsEnum = (System.Boolean)$value;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Children"):
	                                .Block() {
	                                    $current.Children = (System.Collections.Generic.SortedSet`1[AspNetCore.ApiDoc.ModelInfo])$value;
	                                    .Default(System.Void)
	                                }
	                        .Default:
	                                .Throw .New System.Collections.Generic.KeyNotFoundException(.Call System.String.Concat(
	                                        "Cannot found the property or field '",
	                                        $name,
	                                        "' of 'AspNetCore.ApiDoc.ModelInfo'"))
	                        }
	                    } .Else {
	                        .Switch ($name) {
	                        .Case ("CurrentType"):
	                                .Block() {
	                                    $_ = (System.Object)$current.CurrentType;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Name"):
	                                .Block() {
	                                    $_ = (System.Object)$current.Name;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Type"):
	                                .Block() {
	                                    $_ = (System.Object)$current.Type;
	                                    .Default(System.Void)
	                                }
	                        .Case ("IsRequired"):
	                                .Block() {
	                                    $_ = (System.Object)$current.IsRequired;
	                                    .Default(System.Void)
	                                }
	                        .Case ("IsLoop"):
	                                .Block() {
	                                    $_ = (System.Object)$current.IsLoop;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Description"):
	                                .Block() {
	                                    $_ = (System.Object)$current.Description;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Remarks"):
	                                .Block() {
	                                    $_ = (System.Object)$current.Remarks;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Value"):
	                                .Block() {
	                                    $_ = (System.Object)$current.Value;
	                                    .Default(System.Void)
	                                }
	                        .Case ("IsArray"):
	                                .Block() {
	                                    $_ = (System.Object)$current.IsArray;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Parent"):
	                                .Block() {
	                                    $_ = (System.Object)$current.Parent;
	                                    .Default(System.Void)
	                                }
	                        .Case ("IsEnum"):
	                                .Block() {
	                                    $_ = (System.Object)$current.IsEnum;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Children"):
	                                .Block() {
	                                    $_ = (System.Object)$current.Children;
	                                    .Default(System.Void)
	                                }
	                        .Default:
	                                .Throw .New System.Collections.Generic.KeyNotFoundException(.Call System.String.Concat(
	                                        "Cannot found the property or field '",
	                                        $name,
	                                        "' of 'AspNetCore.ApiDoc.ModelInfo'"))
	                        }
	                    }
	                }
	            } .Catch (System.Exception $ex) {
	                .Throw .New System.Exception(
	                    .Call System.String.Concat(
	                        " Occur error when Get or Set the property or field '",
	                        $name,
	                        "' of 'AspNetCore.ApiDoc.ModelInfo' "),
	                    $ex)
	            };
	            $_
	        }
	    }
Path:       http://localhost:5000/apidoc/docViewData.json?v=636924778697984862
Method:     GET
From IP:    ::1
UserAgent:  Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36
StackTrace: at AspNetCore.Extensions.Internal.FastExpressions.GenerateExpressions()
   at AspNetCore.Extensions.Internal.FastExpressions.<>c__DisplayClass22_0.<CreateDelegate>b__0(Int32 _func)
   at System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(TKey key, Func`2 valueFactory)
   at AspNetCore.Extensions.Internal.FastExpressions.CreateDelegate(Object object)
   at System.Extensions.ReflectExtensions.Value(Object value, String name)
#################### 05/03/2019 19:06:20.0772761 ###############
Message:    FastExpressions For Type: AspNetCore.ApiDoc.Internal.ControllerInformation
	    .Lambda #Lambda1<System.Func`5[System.Object,System.String,System.Boolean,System.Object,System.Object]>(
	        System.Object $@object,
	        System.String $name,
	        System.Boolean $isAssign,
	        System.Object $value) {
	        .Block(
	            System.Object $_,
	            AspNetCore.ApiDoc.Internal.ControllerInformation $current) {
	            $_;
	            .If ($value != null) {
	                $_ = $value
	            } .Else {
	                .Default(System.Void)
	            };
	            $current = $@object .As AspNetCore.ApiDoc.Internal.ControllerInformation;
	            .Try {
	                .Block() {
	                    .If (
	                        $isAssign
	                    ) {
	                        .Switch ($name) {
	                        .Case ("IsObsolete"):
	                                .Block() {
	                                    ($current .As AspNetCore.ApiDoc.Internal.Information).IsObsolete = (System.Boolean)$value;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Message"):
	                                .Block() {
	                                    ($current .As AspNetCore.ApiDoc.Internal.Information).Message = (System.String)$value;
	                                    .Default(System.Void)
	                                }
	                        .Default:
	                                .Throw .New System.Collections.Generic.KeyNotFoundException(.Call System.String.Concat(
	                                        "Cannot found the property or field '",
	                                        $name,
	                                        "' of 'AspNetCore.ApiDoc.Internal.ControllerInformation'"))
	                        }
	                    } .Else {
	                        .Switch ($name) {
	                        .Case ("Id"):
	                                .Block() {
	                                    $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Id;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Name"):
	                                .Block() {
	                                    $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Name;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Description"):
	                                .Block() {
	                                    $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Description;
	                                    .Default(System.Void)
	                                }
	                        .Case ("IsObsolete"):
	                                .Block() {
	                                    $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).IsObsolete;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Message"):
	                                .Block() {
	                                    $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Message;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Remarks"):
	                                .Block() {
	                                    $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Remarks;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Order"):
	                                .Block() {
	                                    $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Order;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Parent"):
	                                .Block() {
	                                    $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Parent;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Current"):
	                                .Block() {
	                                    $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Current;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Childrens"):
	                                .Block() {
	                                    $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Childrens;
	                                    .Default(System.Void)
	                                }
	                        .Default:
	                                .Throw .New System.Collections.Generic.KeyNotFoundException(.Call System.String.Concat(
	                                        "Cannot found the property or field '",
	                                        $name,
	                                        "' of 'AspNetCore.ApiDoc.Internal.ControllerInformation'"))
	                        }
	                    }
	                }
	            } .Catch (System.Exception $ex) {
	                .Throw .New System.Exception(
	                    .Call System.String.Concat(
	                        " Occur error when Get or Set the property or field '",
	                        $name,
	                        "' of 'AspNetCore.ApiDoc.Internal.ControllerInformation' "),
	                    $ex)
	            };
	            $_
	        }
	    }
Path:       http://localhost:5000/apidoc/docViewData.json?v=636924783731816692
Method:     GET
From IP:    ::1
UserAgent:  Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36
StackTrace: at AspNetCore.Extensions.Internal.FastExpressions.GenerateExpressions()
   at AspNetCore.Extensions.Internal.FastExpressions.<>c__DisplayClass22_0.<CreateDelegate>b__0(Int32 _func)
   at System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(TKey key, Func`2 valueFactory)
   at AspNetCore.Extensions.Internal.FastExpressions.CreateDelegate(Object object)
   at System.Extensions.ReflectExtensions.Value(Object value, String name)
#################### 05/03/2019 19:06:20.2244462 ###############
Message:    FastExpressions For Type: AspNetCore.ApiDoc.Internal.ActionInformation
	    .Lambda #Lambda1<System.Func`5[System.Object,System.String,System.Boolean,System.Object,System.Object]>(
	        System.Object $@object,
	        System.String $name,
	        System.Boolean $isAssign,
	        System.Object $value) {
	        .Block(
	            System.Object $_,
	            AspNetCore.ApiDoc.Internal.ActionInformation $current) {
	            $_;
	            .If ($value != null) {
	                $_ = $value
	            } .Else {
	                .Default(System.Void)
	            };
	            $current = $@object .As AspNetCore.ApiDoc.Internal.ActionInformation;
	            .Try {
	                .Block() {
	                    .If (
	                        $isAssign
	                    ) {
	                        .Switch ($name) {
	                        .Case ("Request"):
	                                .Block() {
	                                    $current.Request = (System.Collections.Generic.SortedSet`1[AspNetCore.ApiDoc.ModelInfo])$value;
	                                    .Default(System.Void)
	                                }
	                        .Case ("RequestExample"):
	                                .Block() {
	                                    $current.RequestExample = (System.Collections.Generic.SortedDictionary`2[System.String,System.Object])$value;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Response"):
	                                .Block() {
	                                    $current.Response = (System.Collections.Generic.SortedSet`1[AspNetCore.ApiDoc.ModelInfo])$value;
	                                    .Default(System.Void)
	                                }
	                        .Case ("ResponseExample"):
	                                .Block() {
	                                    $current.ResponseExample = (System.Collections.Generic.Dictionary`2[System.String,System.Object])$value;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Url"):
	                                .Block() {
	                                    $current.Url = (System.String)$value;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Method"):
	                                .Block() {
	                                    $current.Method = (System.String)$value;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Id"):
	                                .Call .Constant<System.Reflection.RtFieldInfo>(System.String <Id>k__BackingField).SetValue(
	                                    $current .As AspNetCore.ApiDoc.Internal.Information,
	                                    $value)
	                        .Case ("Name"):
	                                .Call .Constant<System.Reflection.RtFieldInfo>(System.String <Name>k__BackingField).SetValue(
	                                    $current .As AspNetCore.ApiDoc.Internal.Information,
	                                    $value)
	                        .Case ("Description"):
	                                .Call .Constant<System.Reflection.RtFieldInfo>(System.String <Description>k__BackingField).SetValue(
	                                    $current .As AspNetCore.ApiDoc.Internal.Information,
	                                    $value)
	                        .Case ("IsObsolete"):
	                                .Block() {
	                                    ($current .As AspNetCore.ApiDoc.Internal.Information).IsObsolete = (System.Boolean)$value;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Message"):
	                                .Block() {
	                                    ($current .As AspNetCore.ApiDoc.Internal.Information).Message = (System.String)$value;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Remarks"):
	                                .Call .Constant<System.Reflection.RtFieldInfo>(System.String <Remarks>k__BackingField).SetValue(
	                                    $current .As AspNetCore.ApiDoc.Internal.Information,
	                                    $value)
	                        .Case ("Order"):
	                                .Call .Constant<System.Reflection.RtFieldInfo>(Int32 <Order>k__BackingField).SetValue(
	                                    $current .As AspNetCore.ApiDoc.Internal.Information,
	                                    $value)
	                        .Case ("Parent"):
	                                .Call .Constant<System.Reflection.RtFieldInfo>(System.Type <Parent>k__BackingField).SetValue(
	                                    $current .As AspNetCore.ApiDoc.Internal.Information,
	                                    $value)
	                        .Case ("Current"):
	                                .Call .Constant<System.Reflection.RtFieldInfo>(System.Type <Current>k__BackingField).SetValue(
	                                    $current .As AspNetCore.ApiDoc.Internal.Information,
	                                    $value)
	                        .Case ("Childrens"):
	                                .Call .Constant<System.Reflection.RtFieldInfo>(System.Collections.Generic.List`1[AspNetCore.ApiDoc.Internal.Information] <Childrens>k__BackingField).SetValue(
	                                    $current .As AspNetCore.ApiDoc.Internal.Information,
	                                    $value)
	                        .Case ("_descriptor"):
	                                .Block() {
	                                    $current._descriptor = (AspNetCore.ApiDoc.ApiDocDescriptor)$value;
	                                    .Default(System.Void)
	                                }
	                        .Default:
	                                .Throw .New System.Collections.Generic.KeyNotFoundException(.Call System.String.Concat(
	                                        "Cannot found the property or field '",
	                                        $name,
	                                        "' of 'AspNetCore.ApiDoc.Internal.ActionInformation'"))
	                        }
	                    } .Else {
	                        .Switch ($name) {
	                        .Case ("Request"):
	                                .Block() {
	                                    $_ = (System.Object)$current.Request;
	                                    .Default(System.Void)
	                                }
	                        .Case ("RequestExample"):
	                                .Block() {
	                                    $_ = (System.Object)$current.RequestExample;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Response"):
	                                .Block() {
	                                    $_ = (System.Object)$current.Response;
	                                    .Default(System.Void)
	                                }
	                        .Case ("ResponseExample"):
	                                .Block() {
	                                    $_ = (System.Object)$current.ResponseExample;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Url"):
	                                .Block() {
	                                    $_ = (System.Object)$current.Url;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Method"):
	                                .Block() {
	                                    $_ = (System.Object)$current.Method;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Id"):
	                                .Block() {
	                                    $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Id;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Name"):
	                                .Block() {
	                                    $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Name;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Description"):
	                                .Block() {
	                                    $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Description;
	                                    .Default(System.Void)
	                                }
	                        .Case ("IsObsolete"):
	                                .Block() {
	                                    $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).IsObsolete;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Message"):
	                                .Block() {
	                                    $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Message;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Remarks"):
	                                .Block() {
	                                    $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Remarks;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Order"):
	                                .Block() {
	                                    $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Order;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Parent"):
	                                .Block() {
	                                    $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Parent;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Current"):
	                                .Block() {
	                                    $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Current;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Childrens"):
	                                .Block() {
	                                    $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Childrens;
	                                    .Default(System.Void)
	                                }
	                        .Case ("_descriptor"):
	                                .Block() {
	                                    $_ = (System.Object)$current._descriptor;
	                                    .Default(System.Void)
	                                }
	                        .Default:
	                                .Throw .New System.Collections.Generic.KeyNotFoundException(.Call System.String.Concat(
	                                        "Cannot found the property or field '",
	                                        $name,
	                                        "' of 'AspNetCore.ApiDoc.Internal.ActionInformation'"))
	                        }
	                    }
	                }
	            } .Catch (System.Exception $ex) {
	                .Throw .New System.Exception(
	                    .Call System.String.Concat(
	                        " Occur error when Get or Set the property or field '",
	                        $name,
	                        "' of 'AspNetCore.ApiDoc.Internal.ActionInformation' "),
	                    $ex)
	            };
	            $_
	        }
	    }
Path:       http://localhost:5000/apidoc/docViewData.json?v=636924783731816692
Method:     GET
From IP:    ::1
UserAgent:  Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36
StackTrace: at AspNetCore.Extensions.Internal.FastExpressions.GenerateExpressions()
   at AspNetCore.Extensions.Internal.FastExpressions.<>c__DisplayClass22_0.<CreateDelegate>b__0(Int32 _func)
   at System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(TKey key, Func`2 valueFactory)
   at AspNetCore.Extensions.Internal.FastExpressions.CreateDelegate(Object object)
   at System.Extensions.ReflectExtensions.Value(Object value, String name)
#################### 05/03/2019 19:06:20.3443478 ###############
Message:    FastExpressions For Type: AspNetCore.ApiDoc.ModelInfo
	    .Lambda #Lambda1<System.Func`5[System.Object,System.String,System.Boolean,System.Object,System.Object]>(
	        System.Object $@object,
	        System.String $name,
	        System.Boolean $isAssign,
	        System.Object $value) {
	        .Block(
	            System.Object $_,
	            AspNetCore.ApiDoc.ModelInfo $current) {
	            $_;
	            .If ($value != null) {
	                $_ = $value
	            } .Else {
	                .Default(System.Void)
	            };
	            $current = $@object .As AspNetCore.ApiDoc.ModelInfo;
	            .Try {
	                .Block() {
	                    .If (
	                        $isAssign
	                    ) {
	                        .Switch ($name) {
	                        .Case ("CurrentType"):
	                                .Block() {
	                                    $current.CurrentType = (System.Type)$value;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Name"):
	                                .Block() {
	                                    $current.Name = (System.String)$value;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Type"):
	                                .Block() {
	                                    $current.Type = (System.String)$value;
	                                    .Default(System.Void)
	                                }
	                        .Case ("IsRequired"):
	                                .Block() {
	                                    $current.IsRequired = (System.Boolean)$value;
	                                    .Default(System.Void)
	                                }
	                        .Case ("IsLoop"):
	                                .Block() {
	                                    $current.IsLoop = (System.Boolean)$value;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Description"):
	                                .Block() {
	                                    $current.Description = (System.String)$value;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Remarks"):
	                                .Block() {
	                                    $current.Remarks = (System.String)$value;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Value"):
	                                .Block() {
	                                    $current.Value = (System.Object)$value;
	                                    .Default(System.Void)
	                                }
	                        .Case ("IsArray"):
	                                .Block() {
	                                    $current.IsArray = (System.Boolean)$value;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Parent"):
	                                .Block() {
	                                    $current.Parent = (AspNetCore.ApiDoc.ModelInfo)$value;
	                                    .Default(System.Void)
	                                }
	                        .Case ("IsEnum"):
	                                .Block() {
	                                    $current.IsEnum = (System.Boolean)$value;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Children"):
	                                .Block() {
	                                    $current.Children = (System.Collections.Generic.SortedSet`1[AspNetCore.ApiDoc.ModelInfo])$value;
	                                    .Default(System.Void)
	                                }
	                        .Default:
	                                .Throw .New System.Collections.Generic.KeyNotFoundException(.Call System.String.Concat(
	                                        "Cannot found the property or field '",
	                                        $name,
	                                        "' of 'AspNetCore.ApiDoc.ModelInfo'"))
	                        }
	                    } .Else {
	                        .Switch ($name) {
	                        .Case ("CurrentType"):
	                                .Block() {
	                                    $_ = (System.Object)$current.CurrentType;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Name"):
	                                .Block() {
	                                    $_ = (System.Object)$current.Name;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Type"):
	                                .Block() {
	                                    $_ = (System.Object)$current.Type;
	                                    .Default(System.Void)
	                                }
	                        .Case ("IsRequired"):
	                                .Block() {
	                                    $_ = (System.Object)$current.IsRequired;
	                                    .Default(System.Void)
	                                }
	                        .Case ("IsLoop"):
	                                .Block() {
	                                    $_ = (System.Object)$current.IsLoop;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Description"):
	                                .Block() {
	                                    $_ = (System.Object)$current.Description;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Remarks"):
	                                .Block() {
	                                    $_ = (System.Object)$current.Remarks;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Value"):
	                                .Block() {
	                                    $_ = (System.Object)$current.Value;
	                                    .Default(System.Void)
	                                }
	                        .Case ("IsArray"):
	                                .Block() {
	                                    $_ = (System.Object)$current.IsArray;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Parent"):
	                                .Block() {
	                                    $_ = (System.Object)$current.Parent;
	                                    .Default(System.Void)
	                                }
	                        .Case ("IsEnum"):
	                                .Block() {
	                                    $_ = (System.Object)$current.IsEnum;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Children"):
	                                .Block() {
	                                    $_ = (System.Object)$current.Children;
	                                    .Default(System.Void)
	                                }
	                        .Default:
	                                .Throw .New System.Collections.Generic.KeyNotFoundException(.Call System.String.Concat(
	                                        "Cannot found the property or field '",
	                                        $name,
	                                        "' of 'AspNetCore.ApiDoc.ModelInfo'"))
	                        }
	                    }
	                }
	            } .Catch (System.Exception $ex) {
	                .Throw .New System.Exception(
	                    .Call System.String.Concat(
	                        " Occur error when Get or Set the property or field '",
	                        $name,
	                        "' of 'AspNetCore.ApiDoc.ModelInfo' "),
	                    $ex)
	            };
	            $_
	        }
	    }
Path:       http://localhost:5000/apidoc/docViewData.json?v=636924783731816692
Method:     GET
From IP:    ::1
UserAgent:  Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36
StackTrace: at AspNetCore.Extensions.Internal.FastExpressions.GenerateExpressions()
   at AspNetCore.Extensions.Internal.FastExpressions.<>c__DisplayClass22_0.<CreateDelegate>b__0(Int32 _func)
   at System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(TKey key, Func`2 valueFactory)
   at AspNetCore.Extensions.Internal.FastExpressions.CreateDelegate(Object object)
   at System.Extensions.ReflectExtensions.Value(Object value, String name)
#################### 05/03/2019 19:07:58.5576211 ###############
Message:    FastExpressions For Type: AspNetCore.ApiDoc.Internal.ControllerInformation
	    .Lambda #Lambda1<System.Func`5[System.Object,System.String,System.Boolean,System.Object,System.Object]>(
	        System.Object $@object,
	        System.String $name,
	        System.Boolean $isAssign,
	        System.Object $value) {
	        .Block(
	            System.Object $_,
	            AspNetCore.ApiDoc.Internal.ControllerInformation $current) {
	            $_;
	            .If ($value != null) {
	                $_ = $value
	            } .Else {
	                .Default(System.Void)
	            };
	            $current = $@object .As AspNetCore.ApiDoc.Internal.ControllerInformation;
	            .Try {
	                .Block() {
	                    .If (
	                        $isAssign
	                    ) {
	                        .Switch ($name) {
	                        .Case ("IsObsolete"):
	                                .Block() {
	                                    ($current .As AspNetCore.ApiDoc.Internal.Information).IsObsolete = (System.Boolean)$value;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Message"):
	                                .Block() {
	                                    ($current .As AspNetCore.ApiDoc.Internal.Information).Message = (System.String)$value;
	                                    .Default(System.Void)
	                                }
	                        .Default:
	                                .Throw .New System.Collections.Generic.KeyNotFoundException(.Call System.String.Concat(
	                                        "Cannot found the property or field '",
	                                        $name,
	                                        "' of 'AspNetCore.ApiDoc.Internal.ControllerInformation'"))
	                        }
	                    } .Else {
	                        .Switch ($name) {
	                        .Case ("Id"):
	                                .Block() {
	                                    $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Id;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Name"):
	                                .Block() {
	                                    $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Name;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Description"):
	                                .Block() {
	                                    $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Description;
	                                    .Default(System.Void)
	                                }
	                        .Case ("IsObsolete"):
	                                .Block() {
	                                    $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).IsObsolete;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Message"):
	                                .Block() {
	                                    $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Message;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Remarks"):
	                                .Block() {
	                                    $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Remarks;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Order"):
	                                .Block() {
	                                    $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Order;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Parent"):
	                                .Block() {
	                                    $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Parent;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Current"):
	                                .Block() {
	                                    $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Current;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Childrens"):
	                                .Block() {
	                                    $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Childrens;
	                                    .Default(System.Void)
	                                }
	                        .Default:
	                                .Throw .New System.Collections.Generic.KeyNotFoundException(.Call System.String.Concat(
	                                        "Cannot found the property or field '",
	                                        $name,
	                                        "' of 'AspNetCore.ApiDoc.Internal.ControllerInformation'"))
	                        }
	                    }
	                }
	            } .Catch (System.Exception $ex) {
	                .Throw .New System.Exception(
	                    .Call System.String.Concat(
	                        " Occur error when Get or Set the property or field '",
	                        $name,
	                        "' of 'AspNetCore.ApiDoc.Internal.ControllerInformation' "),
	                    $ex)
	            };
	            $_
	        }
	    }
Path:       http://localhost:5000/apidoc/docViewData.json?v=636924784779868764
Method:     GET
From IP:    ::1
UserAgent:  Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36
StackTrace: at AspNetCore.Extensions.Internal.FastExpressions.GenerateExpressions()
   at AspNetCore.Extensions.Internal.FastExpressions.<>c__DisplayClass22_0.<CreateDelegate>b__0(Int32 _func)
   at System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(TKey key, Func`2 valueFactory)
   at AspNetCore.Extensions.Internal.FastExpressions.CreateDelegate(Object object)
   at System.Extensions.ReflectExtensions.Value(Object value, String name)
#################### 05/03/2019 19:07:58.7177688 ###############
Message:    FastExpressions For Type: AspNetCore.ApiDoc.Internal.ActionInformation
	    .Lambda #Lambda1<System.Func`5[System.Object,System.String,System.Boolean,System.Object,System.Object]>(
	        System.Object $@object,
	        System.String $name,
	        System.Boolean $isAssign,
	        System.Object $value) {
	        .Block(
	            System.Object $_,
	            AspNetCore.ApiDoc.Internal.ActionInformation $current) {
	            $_;
	            .If ($value != null) {
	                $_ = $value
	            } .Else {
	                .Default(System.Void)
	            };
	            $current = $@object .As AspNetCore.ApiDoc.Internal.ActionInformation;
	            .Try {
	                .Block() {
	                    .If (
	                        $isAssign
	                    ) {
	                        .Switch ($name) {
	                        .Case ("Request"):
	                                .Block() {
	                                    $current.Request = (System.Collections.Generic.SortedSet`1[AspNetCore.ApiDoc.ModelInfo])$value;
	                                    .Default(System.Void)
	                                }
	                        .Case ("RequestExample"):
	                                .Block() {
	                                    $current.RequestExample = (System.Collections.Generic.SortedDictionary`2[System.String,System.Object])$value;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Response"):
	                                .Block() {
	                                    $current.Response = (System.Collections.Generic.SortedSet`1[AspNetCore.ApiDoc.ModelInfo])$value;
	                                    .Default(System.Void)
	                                }
	                        .Case ("ResponseExample"):
	                                .Block() {
	                                    $current.ResponseExample = (System.Collections.Generic.Dictionary`2[System.String,System.Object])$value;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Url"):
	                                .Block() {
	                                    $current.Url = (System.String)$value;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Method"):
	                                .Block() {
	                                    $current.Method = (System.String)$value;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Id"):
	                                .Call .Constant<System.Reflection.RtFieldInfo>(System.String <Id>k__BackingField).SetValue(
	                                    $current .As AspNetCore.ApiDoc.Internal.Information,
	                                    $value)
	                        .Case ("Name"):
	                                .Call .Constant<System.Reflection.RtFieldInfo>(System.String <Name>k__BackingField).SetValue(
	                                    $current .As AspNetCore.ApiDoc.Internal.Information,
	                                    $value)
	                        .Case ("Description"):
	                                .Call .Constant<System.Reflection.RtFieldInfo>(System.String <Description>k__BackingField).SetValue(
	                                    $current .As AspNetCore.ApiDoc.Internal.Information,
	                                    $value)
	                        .Case ("IsObsolete"):
	                                .Block() {
	                                    ($current .As AspNetCore.ApiDoc.Internal.Information).IsObsolete = (System.Boolean)$value;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Message"):
	                                .Block() {
	                                    ($current .As AspNetCore.ApiDoc.Internal.Information).Message = (System.String)$value;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Remarks"):
	                                .Call .Constant<System.Reflection.RtFieldInfo>(System.String <Remarks>k__BackingField).SetValue(
	                                    $current .As AspNetCore.ApiDoc.Internal.Information,
	                                    $value)
	                        .Case ("Order"):
	                                .Call .Constant<System.Reflection.RtFieldInfo>(Int32 <Order>k__BackingField).SetValue(
	                                    $current .As AspNetCore.ApiDoc.Internal.Information,
	                                    $value)
	                        .Case ("Parent"):
	                                .Call .Constant<System.Reflection.RtFieldInfo>(System.Type <Parent>k__BackingField).SetValue(
	                                    $current .As AspNetCore.ApiDoc.Internal.Information,
	                                    $value)
	                        .Case ("Current"):
	                                .Call .Constant<System.Reflection.RtFieldInfo>(System.Type <Current>k__BackingField).SetValue(
	                                    $current .As AspNetCore.ApiDoc.Internal.Information,
	                                    $value)
	                        .Case ("Childrens"):
	                                .Call .Constant<System.Reflection.RtFieldInfo>(System.Collections.Generic.List`1[AspNetCore.ApiDoc.Internal.Information] <Childrens>k__BackingField).SetValue(
	                                    $current .As AspNetCore.ApiDoc.Internal.Information,
	                                    $value)
	                        .Case ("_descriptor"):
	                                .Block() {
	                                    $current._descriptor = (AspNetCore.ApiDoc.ApiDocDescriptor)$value;
	                                    .Default(System.Void)
	                                }
	                        .Default:
	                                .Throw .New System.Collections.Generic.KeyNotFoundException(.Call System.String.Concat(
	                                        "Cannot found the property or field '",
	                                        $name,
	                                        "' of 'AspNetCore.ApiDoc.Internal.ActionInformation'"))
	                        }
	                    } .Else {
	                        .Switch ($name) {
	                        .Case ("Request"):
	                                .Block() {
	                                    $_ = (System.Object)$current.Request;
	                                    .Default(System.Void)
	                                }
	                        .Case ("RequestExample"):
	                                .Block() {
	                                    $_ = (System.Object)$current.RequestExample;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Response"):
	                                .Block() {
	                                    $_ = (System.Object)$current.Response;
	                                    .Default(System.Void)
	                                }
	                        .Case ("ResponseExample"):
	                                .Block() {
	                                    $_ = (System.Object)$current.ResponseExample;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Url"):
	                                .Block() {
	                                    $_ = (System.Object)$current.Url;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Method"):
	                                .Block() {
	                                    $_ = (System.Object)$current.Method;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Id"):
	                                .Block() {
	                                    $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Id;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Name"):
	                                .Block() {
	                                    $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Name;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Description"):
	                                .Block() {
	                                    $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Description;
	                                    .Default(System.Void)
	                                }
	                        .Case ("IsObsolete"):
	                                .Block() {
	                                    $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).IsObsolete;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Message"):
	                                .Block() {
	                                    $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Message;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Remarks"):
	                                .Block() {
	                                    $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Remarks;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Order"):
	                                .Block() {
	                                    $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Order;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Parent"):
	                                .Block() {
	                                    $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Parent;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Current"):
	                                .Block() {
	                                    $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Current;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Childrens"):
	                                .Block() {
	                                    $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Childrens;
	                                    .Default(System.Void)
	                                }
	                        .Case ("_descriptor"):
	                                .Block() {
	                                    $_ = (System.Object)$current._descriptor;
	                                    .Default(System.Void)
	                                }
	                        .Default:
	                                .Throw .New System.Collections.Generic.KeyNotFoundException(.Call System.String.Concat(
	                                        "Cannot found the property or field '",
	                                        $name,
	                                        "' of 'AspNetCore.ApiDoc.Internal.ActionInformation'"))
	                        }
	                    }
	                }
	            } .Catch (System.Exception $ex) {
	                .Throw .New System.Exception(
	                    .Call System.String.Concat(
	                        " Occur error when Get or Set the property or field '",
	                        $name,
	                        "' of 'AspNetCore.ApiDoc.Internal.ActionInformation' "),
	                    $ex)
	            };
	            $_
	        }
	    }
Path:       http://localhost:5000/apidoc/docViewData.json?v=636924784779868764
Method:     GET
From IP:    ::1
UserAgent:  Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36
StackTrace: at AspNetCore.Extensions.Internal.FastExpressions.GenerateExpressions()
   at AspNetCore.Extensions.Internal.FastExpressions.<>c__DisplayClass22_0.<CreateDelegate>b__0(Int32 _func)
   at System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(TKey key, Func`2 valueFactory)
   at AspNetCore.Extensions.Internal.FastExpressions.CreateDelegate(Object object)
   at System.Extensions.ReflectExtensions.Value(Object value, String name)
#################### 05/03/2019 19:07:58.8368913 ###############
Message:    FastExpressions For Type: AspNetCore.ApiDoc.ModelInfo
	    .Lambda #Lambda1<System.Func`5[System.Object,System.String,System.Boolean,System.Object,System.Object]>(
	        System.Object $@object,
	        System.String $name,
	        System.Boolean $isAssign,
	        System.Object $value) {
	        .Block(
	            System.Object $_,
	            AspNetCore.ApiDoc.ModelInfo $current) {
	            $_;
	            .If ($value != null) {
	                $_ = $value
	            } .Else {
	                .Default(System.Void)
	            };
	            $current = $@object .As AspNetCore.ApiDoc.ModelInfo;
	            .Try {
	                .Block() {
	                    .If (
	                        $isAssign
	                    ) {
	                        .Switch ($name) {
	                        .Case ("CurrentType"):
	                                .Block() {
	                                    $current.CurrentType = (System.Type)$value;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Name"):
	                                .Block() {
	                                    $current.Name = (System.String)$value;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Type"):
	                                .Block() {
	                                    $current.Type = (System.String)$value;
	                                    .Default(System.Void)
	                                }
	                        .Case ("IsRequired"):
	                                .Block() {
	                                    $current.IsRequired = (System.Boolean)$value;
	                                    .Default(System.Void)
	                                }
	                        .Case ("IsLoop"):
	                                .Block() {
	                                    $current.IsLoop = (System.Boolean)$value;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Description"):
	                                .Block() {
	                                    $current.Description = (System.String)$value;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Remarks"):
	                                .Block() {
	                                    $current.Remarks = (System.String)$value;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Value"):
	                                .Block() {
	                                    $current.Value = (System.Object)$value;
	                                    .Default(System.Void)
	                                }
	                        .Case ("IsArray"):
	                                .Block() {
	                                    $current.IsArray = (System.Boolean)$value;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Parent"):
	                                .Block() {
	                                    $current.Parent = (AspNetCore.ApiDoc.ModelInfo)$value;
	                                    .Default(System.Void)
	                                }
	                        .Case ("IsEnum"):
	                                .Block() {
	                                    $current.IsEnum = (System.Boolean)$value;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Children"):
	                                .Block() {
	                                    $current.Children = (System.Collections.Generic.SortedSet`1[AspNetCore.ApiDoc.ModelInfo])$value;
	                                    .Default(System.Void)
	                                }
	                        .Default:
	                                .Throw .New System.Collections.Generic.KeyNotFoundException(.Call System.String.Concat(
	                                        "Cannot found the property or field '",
	                                        $name,
	                                        "' of 'AspNetCore.ApiDoc.ModelInfo'"))
	                        }
	                    } .Else {
	                        .Switch ($name) {
	                        .Case ("CurrentType"):
	                                .Block() {
	                                    $_ = (System.Object)$current.CurrentType;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Name"):
	                                .Block() {
	                                    $_ = (System.Object)$current.Name;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Type"):
	                                .Block() {
	                                    $_ = (System.Object)$current.Type;
	                                    .Default(System.Void)
	                                }
	                        .Case ("IsRequired"):
	                                .Block() {
	                                    $_ = (System.Object)$current.IsRequired;
	                                    .Default(System.Void)
	                                }
	                        .Case ("IsLoop"):
	                                .Block() {
	                                    $_ = (System.Object)$current.IsLoop;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Description"):
	                                .Block() {
	                                    $_ = (System.Object)$current.Description;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Remarks"):
	                                .Block() {
	                                    $_ = (System.Object)$current.Remarks;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Value"):
	                                .Block() {
	                                    $_ = (System.Object)$current.Value;
	                                    .Default(System.Void)
	                                }
	                        .Case ("IsArray"):
	                                .Block() {
	                                    $_ = (System.Object)$current.IsArray;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Parent"):
	                                .Block() {
	                                    $_ = (System.Object)$current.Parent;
	                                    .Default(System.Void)
	                                }
	                        .Case ("IsEnum"):
	                                .Block() {
	                                    $_ = (System.Object)$current.IsEnum;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Children"):
	                                .Block() {
	                                    $_ = (System.Object)$current.Children;
	                                    .Default(System.Void)
	                                }
	                        .Default:
	                                .Throw .New System.Collections.Generic.KeyNotFoundException(.Call System.String.Concat(
	                                        "Cannot found the property or field '",
	                                        $name,
	                                        "' of 'AspNetCore.ApiDoc.ModelInfo'"))
	                        }
	                    }
	                }
	            } .Catch (System.Exception $ex) {
	                .Throw .New System.Exception(
	                    .Call System.String.Concat(
	                        " Occur error when Get or Set the property or field '",
	                        $name,
	                        "' of 'AspNetCore.ApiDoc.ModelInfo' "),
	                    $ex)
	            };
	            $_
	        }
	    }
Path:       http://localhost:5000/apidoc/docViewData.json?v=636924784779868764
Method:     GET
From IP:    ::1
UserAgent:  Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36
StackTrace: at AspNetCore.Extensions.Internal.FastExpressions.GenerateExpressions()
   at AspNetCore.Extensions.Internal.FastExpressions.<>c__DisplayClass22_0.<CreateDelegate>b__0(Int32 _func)
   at System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(TKey key, Func`2 valueFactory)
   at AspNetCore.Extensions.Internal.FastExpressions.CreateDelegate(Object object)
   at System.Extensions.ReflectExtensions.Value(Object value, String name)
#################### 05/03/2019 19:10:01.2445877 ###############
Message:    FastExpressions For Type: AspNetCore.ApiDoc.Internal.ControllerInformation
	    .Lambda #Lambda1<System.Func`5[System.Object,System.String,System.Boolean,System.Object,System.Object]>(
	        System.Object $@object,
	        System.String $name,
	        System.Boolean $isAssign,
	        System.Object $value) {
	        .Block(
	            System.Object $_,
	            AspNetCore.ApiDoc.Internal.ControllerInformation $current) {
	            $_;
	            .If ($value != null) {
	                $_ = $value
	            } .Else {
	                .Default(System.Void)
	            };
	            $current = $@object .As AspNetCore.ApiDoc.Internal.ControllerInformation;
	            .Try {
	                .Block() {
	                    .If (
	                        $isAssign
	                    ) {
	                        .Switch ($name) {
	                        .Case ("IsObsolete"):
	                                .Block() {
	                                    ($current .As AspNetCore.ApiDoc.Internal.Information).IsObsolete = (System.Boolean)$value;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Message"):
	                                .Block() {
	                                    ($current .As AspNetCore.ApiDoc.Internal.Information).Message = (System.String)$value;
	                                    .Default(System.Void)
	                                }
	                        .Default:
	                                .Throw .New System.Collections.Generic.KeyNotFoundException(.Call System.String.Concat(
	                                        "Cannot found the property or field '",
	                                        $name,
	                                        "' of 'AspNetCore.ApiDoc.Internal.ControllerInformation'"))
	                        }
	                    } .Else {
	                        .Switch ($name) {
	                        .Case ("Id"):
	                                .Block() {
	                                    $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Id;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Name"):
	                                .Block() {
	                                    $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Name;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Description"):
	                                .Block() {
	                                    $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Description;
	                                    .Default(System.Void)
	                                }
	                        .Case ("IsObsolete"):
	                                .Block() {
	                                    $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).IsObsolete;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Message"):
	                                .Block() {
	                                    $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Message;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Remarks"):
	                                .Block() {
	                                    $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Remarks;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Order"):
	                                .Block() {
	                                    $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Order;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Parent"):
	                                .Block() {
	                                    $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Parent;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Current"):
	                                .Block() {
	                                    $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Current;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Childrens"):
	                                .Block() {
	                                    $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Childrens;
	                                    .Default(System.Void)
	                                }
	                        .Default:
	                                .Throw .New System.Collections.Generic.KeyNotFoundException(.Call System.String.Concat(
	                                        "Cannot found the property or field '",
	                                        $name,
	                                        "' of 'AspNetCore.ApiDoc.Internal.ControllerInformation'"))
	                        }
	                    }
	                }
	            } .Catch (System.Exception $ex) {
	                .Throw .New System.Exception(
	                    .Call System.String.Concat(
	                        " Occur error when Get or Set the property or field '",
	                        $name,
	                        "' of 'AspNetCore.ApiDoc.Internal.ControllerInformation' "),
	                    $ex)
	            };
	            $_
	        }
	    }
Path:       http://localhost:5000/v1/apidoc/docViewData.json?v=636924785771347857
Method:     GET
From IP:    ::1
UserAgent:  Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36
StackTrace: at AspNetCore.Extensions.Internal.FastExpressions.GenerateExpressions()
   at AspNetCore.Extensions.Internal.FastExpressions.<>c__DisplayClass22_0.<CreateDelegate>b__0(Int32 _func)
   at System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(TKey key, Func`2 valueFactory)
   at AspNetCore.Extensions.Internal.FastExpressions.CreateDelegate(Object object)
   at System.Extensions.ReflectExtensions.Value(Object value, String name)
#################### 05/03/2019 19:10:01.3992240 ###############
Message:    FastExpressions For Type: AspNetCore.ApiDoc.Internal.ActionInformation
	    .Lambda #Lambda1<System.Func`5[System.Object,System.String,System.Boolean,System.Object,System.Object]>(
	        System.Object $@object,
	        System.String $name,
	        System.Boolean $isAssign,
	        System.Object $value) {
	        .Block(
	            System.Object $_,
	            AspNetCore.ApiDoc.Internal.ActionInformation $current) {
	            $_;
	            .If ($value != null) {
	                $_ = $value
	            } .Else {
	                .Default(System.Void)
	            };
	            $current = $@object .As AspNetCore.ApiDoc.Internal.ActionInformation;
	            .Try {
	                .Block() {
	                    .If (
	                        $isAssign
	                    ) {
	                        .Switch ($name) {
	                        .Case ("Request"):
	                                .Block() {
	                                    $current.Request = (System.Collections.Generic.SortedSet`1[AspNetCore.ApiDoc.ModelInfo])$value;
	                                    .Default(System.Void)
	                                }
	                        .Case ("RequestExample"):
	                                .Block() {
	                                    $current.RequestExample = (System.Collections.Generic.SortedDictionary`2[System.String,System.Object])$value;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Response"):
	                                .Block() {
	                                    $current.Response = (System.Collections.Generic.SortedSet`1[AspNetCore.ApiDoc.ModelInfo])$value;
	                                    .Default(System.Void)
	                                }
	                        .Case ("ResponseExample"):
	                                .Block() {
	                                    $current.ResponseExample = (System.Collections.Generic.Dictionary`2[System.String,System.Object])$value;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Url"):
	                                .Block() {
	                                    $current.Url = (System.String)$value;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Method"):
	                                .Block() {
	                                    $current.Method = (System.String)$value;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Id"):
	                                .Call .Constant<System.Reflection.RtFieldInfo>(System.String <Id>k__BackingField).SetValue(
	                                    $current .As AspNetCore.ApiDoc.Internal.Information,
	                                    $value)
	                        .Case ("Name"):
	                                .Call .Constant<System.Reflection.RtFieldInfo>(System.String <Name>k__BackingField).SetValue(
	                                    $current .As AspNetCore.ApiDoc.Internal.Information,
	                                    $value)
	                        .Case ("Description"):
	                                .Call .Constant<System.Reflection.RtFieldInfo>(System.String <Description>k__BackingField).SetValue(
	                                    $current .As AspNetCore.ApiDoc.Internal.Information,
	                                    $value)
	                        .Case ("IsObsolete"):
	                                .Block() {
	                                    ($current .As AspNetCore.ApiDoc.Internal.Information).IsObsolete = (System.Boolean)$value;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Message"):
	                                .Block() {
	                                    ($current .As AspNetCore.ApiDoc.Internal.Information).Message = (System.String)$value;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Remarks"):
	                                .Call .Constant<System.Reflection.RtFieldInfo>(System.String <Remarks>k__BackingField).SetValue(
	                                    $current .As AspNetCore.ApiDoc.Internal.Information,
	                                    $value)
	                        .Case ("Order"):
	                                .Call .Constant<System.Reflection.RtFieldInfo>(Int32 <Order>k__BackingField).SetValue(
	                                    $current .As AspNetCore.ApiDoc.Internal.Information,
	                                    $value)
	                        .Case ("Parent"):
	                                .Call .Constant<System.Reflection.RtFieldInfo>(System.Type <Parent>k__BackingField).SetValue(
	                                    $current .As AspNetCore.ApiDoc.Internal.Information,
	                                    $value)
	                        .Case ("Current"):
	                                .Call .Constant<System.Reflection.RtFieldInfo>(System.Type <Current>k__BackingField).SetValue(
	                                    $current .As AspNetCore.ApiDoc.Internal.Information,
	                                    $value)
	                        .Case ("Childrens"):
	                                .Call .Constant<System.Reflection.RtFieldInfo>(System.Collections.Generic.List`1[AspNetCore.ApiDoc.Internal.Information] <Childrens>k__BackingField).SetValue(
	                                    $current .As AspNetCore.ApiDoc.Internal.Information,
	                                    $value)
	                        .Case ("_descriptor"):
	                                .Block() {
	                                    $current._descriptor = (AspNetCore.ApiDoc.ApiDocDescriptor)$value;
	                                    .Default(System.Void)
	                                }
	                        .Default:
	                                .Throw .New System.Collections.Generic.KeyNotFoundException(.Call System.String.Concat(
	                                        "Cannot found the property or field '",
	                                        $name,
	                                        "' of 'AspNetCore.ApiDoc.Internal.ActionInformation'"))
	                        }
	                    } .Else {
	                        .Switch ($name) {
	                        .Case ("Request"):
	                                .Block() {
	                                    $_ = (System.Object)$current.Request;
	                                    .Default(System.Void)
	                                }
	                        .Case ("RequestExample"):
	                                .Block() {
	                                    $_ = (System.Object)$current.RequestExample;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Response"):
	                                .Block() {
	                                    $_ = (System.Object)$current.Response;
	                                    .Default(System.Void)
	                                }
	                        .Case ("ResponseExample"):
	                                .Block() {
	                                    $_ = (System.Object)$current.ResponseExample;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Url"):
	                                .Block() {
	                                    $_ = (System.Object)$current.Url;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Method"):
	                                .Block() {
	                                    $_ = (System.Object)$current.Method;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Id"):
	                                .Block() {
	                                    $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Id;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Name"):
	                                .Block() {
	                                    $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Name;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Description"):
	                                .Block() {
	                                    $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Description;
	                                    .Default(System.Void)
	                                }
	                        .Case ("IsObsolete"):
	                                .Block() {
	                                    $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).IsObsolete;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Message"):
	                                .Block() {
	                                    $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Message;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Remarks"):
	                                .Block() {
	                                    $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Remarks;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Order"):
	                                .Block() {
	                                    $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Order;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Parent"):
	                                .Block() {
	                                    $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Parent;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Current"):
	                                .Block() {
	                                    $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Current;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Childrens"):
	                                .Block() {
	                                    $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Childrens;
	                                    .Default(System.Void)
	                                }
	                        .Case ("_descriptor"):
	                                .Block() {
	                                    $_ = (System.Object)$current._descriptor;
	                                    .Default(System.Void)
	                                }
	                        .Default:
	                                .Throw .New System.Collections.Generic.KeyNotFoundException(.Call System.String.Concat(
	                                        "Cannot found the property or field '",
	                                        $name,
	                                        "' of 'AspNetCore.ApiDoc.Internal.ActionInformation'"))
	                        }
	                    }
	                }
	            } .Catch (System.Exception $ex) {
	                .Throw .New System.Exception(
	                    .Call System.String.Concat(
	                        " Occur error when Get or Set the property or field '",
	                        $name,
	                        "' of 'AspNetCore.ApiDoc.Internal.ActionInformation' "),
	                    $ex)
	            };
	            $_
	        }
	    }
Path:       http://localhost:5000/v1/apidoc/docViewData.json?v=636924785771347857
Method:     GET
From IP:    ::1
UserAgent:  Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36
StackTrace: at AspNetCore.Extensions.Internal.FastExpressions.GenerateExpressions()
   at AspNetCore.Extensions.Internal.FastExpressions.<>c__DisplayClass22_0.<CreateDelegate>b__0(Int32 _func)
   at System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(TKey key, Func`2 valueFactory)
   at AspNetCore.Extensions.Internal.FastExpressions.CreateDelegate(Object object)
   at System.Extensions.ReflectExtensions.Value(Object value, String name)
#################### 05/03/2019 19:10:01.5271278 ###############
Message:    FastExpressions For Type: AspNetCore.ApiDoc.ModelInfo
	    .Lambda #Lambda1<System.Func`5[System.Object,System.String,System.Boolean,System.Object,System.Object]>(
	        System.Object $@object,
	        System.String $name,
	        System.Boolean $isAssign,
	        System.Object $value) {
	        .Block(
	            System.Object $_,
	            AspNetCore.ApiDoc.ModelInfo $current) {
	            $_;
	            .If ($value != null) {
	                $_ = $value
	            } .Else {
	                .Default(System.Void)
	            };
	            $current = $@object .As AspNetCore.ApiDoc.ModelInfo;
	            .Try {
	                .Block() {
	                    .If (
	                        $isAssign
	                    ) {
	                        .Switch ($name) {
	                        .Case ("CurrentType"):
	                                .Block() {
	                                    $current.CurrentType = (System.Type)$value;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Name"):
	                                .Block() {
	                                    $current.Name = (System.String)$value;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Type"):
	                                .Block() {
	                                    $current.Type = (System.String)$value;
	                                    .Default(System.Void)
	                                }
	                        .Case ("IsRequired"):
	                                .Block() {
	                                    $current.IsRequired = (System.Boolean)$value;
	                                    .Default(System.Void)
	                                }
	                        .Case ("IsLoop"):
	                                .Block() {
	                                    $current.IsLoop = (System.Boolean)$value;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Description"):
	                                .Block() {
	                                    $current.Description = (System.String)$value;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Remarks"):
	                                .Block() {
	                                    $current.Remarks = (System.String)$value;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Value"):
	                                .Block() {
	                                    $current.Value = (System.Object)$value;
	                                    .Default(System.Void)
	                                }
	                        .Case ("IsArray"):
	                                .Block() {
	                                    $current.IsArray = (System.Boolean)$value;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Parent"):
	                                .Block() {
	                                    $current.Parent = (AspNetCore.ApiDoc.ModelInfo)$value;
	                                    .Default(System.Void)
	                                }
	                        .Case ("IsEnum"):
	                                .Block() {
	                                    $current.IsEnum = (System.Boolean)$value;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Children"):
	                                .Block() {
	                                    $current.Children = (System.Collections.Generic.SortedSet`1[AspNetCore.ApiDoc.ModelInfo])$value;
	                                    .Default(System.Void)
	                                }
	                        .Default:
	                                .Throw .New System.Collections.Generic.KeyNotFoundException(.Call System.String.Concat(
	                                        "Cannot found the property or field '",
	                                        $name,
	                                        "' of 'AspNetCore.ApiDoc.ModelInfo'"))
	                        }
	                    } .Else {
	                        .Switch ($name) {
	                        .Case ("CurrentType"):
	                                .Block() {
	                                    $_ = (System.Object)$current.CurrentType;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Name"):
	                                .Block() {
	                                    $_ = (System.Object)$current.Name;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Type"):
	                                .Block() {
	                                    $_ = (System.Object)$current.Type;
	                                    .Default(System.Void)
	                                }
	                        .Case ("IsRequired"):
	                                .Block() {
	                                    $_ = (System.Object)$current.IsRequired;
	                                    .Default(System.Void)
	                                }
	                        .Case ("IsLoop"):
	                                .Block() {
	                                    $_ = (System.Object)$current.IsLoop;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Description"):
	                                .Block() {
	                                    $_ = (System.Object)$current.Description;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Remarks"):
	                                .Block() {
	                                    $_ = (System.Object)$current.Remarks;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Value"):
	                                .Block() {
	                                    $_ = (System.Object)$current.Value;
	                                    .Default(System.Void)
	                                }
	                        .Case ("IsArray"):
	                                .Block() {
	                                    $_ = (System.Object)$current.IsArray;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Parent"):
	                                .Block() {
	                                    $_ = (System.Object)$current.Parent;
	                                    .Default(System.Void)
	                                }
	                        .Case ("IsEnum"):
	                                .Block() {
	                                    $_ = (System.Object)$current.IsEnum;
	                                    .Default(System.Void)
	                                }
	                        .Case ("Children"):
	                                .Block() {
	                                    $_ = (System.Object)$current.Children;
	                                    .Default(System.Void)
	                                }
	                        .Default:
	                                .Throw .New System.Collections.Generic.KeyNotFoundException(.Call System.String.Concat(
	                                        "Cannot found the property or field '",
	                                        $name,
	                                        "' of 'AspNetCore.ApiDoc.ModelInfo'"))
	                        }
	                    }
	                }
	            } .Catch (System.Exception $ex) {
	                .Throw .New System.Exception(
	                    .Call System.String.Concat(
	                        " Occur error when Get or Set the property or field '",
	                        $name,
	                        "' of 'AspNetCore.ApiDoc.ModelInfo' "),
	                    $ex)
	            };
	            $_
	        }
	    }
Path:       http://localhost:5000/v1/apidoc/docViewData.json?v=636924785771347857
Method:     GET
From IP:    ::1
UserAgent:  Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36
StackTrace: at AspNetCore.Extensions.Internal.FastExpressions.GenerateExpressions()
   at AspNetCore.Extensions.Internal.FastExpressions.<>c__DisplayClass22_0.<CreateDelegate>b__0(Int32 _func)
   at System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(TKey key, Func`2 valueFactory)
   at AspNetCore.Extensions.Internal.FastExpressions.CreateDelegate(Object object)
   at System.Extensions.ReflectExtensions.Value(Object value, String name)
