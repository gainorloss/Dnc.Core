2019-05-03 18:57:38.564 +08:00 [DBG] TaskSchedulingThreadPool configured with max concurrency of 10 and TaskScheduler ThreadPoolTaskScheduler.
2019-05-03 18:57:38.922 +08:00 [INF] Initialized Scheduler Signaller of type: Quartz.Core.SchedulerSignalerImpl
2019-05-03 18:57:38.928 +08:00 [INF] Quartz Scheduler v.3.0.7.0 created.
2019-05-03 18:57:38.979 +08:00 [INF] RAMJobStore initialized.
2019-05-03 18:57:38.995 +08:00 [INF] Scheduler meta-data: Quartz Scheduler (v3.0.7.0) 'QuartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'Quartz.Core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'Quartz.Simpl.DefaultThreadPool' - with 10 threads.
  Using job-store 'Quartz.Simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2019-05-03 18:57:38.999 +08:00 [INF] Quartz scheduler 'QuartzScheduler' initialized
2019-05-03 18:57:39.007 +08:00 [INF] Quartz scheduler version: 3.0.7.0
2019-05-03 18:57:48.554 +08:00 [INF] User profile is available. Using 'C:\Users\gainorloss\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2019-05-03 18:57:58.958 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/  
2019-05-03 18:57:59.171 +08:00 [INF] Request finished in 214.0059ms 404 
2019-05-03 18:58:12.443 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/apidoc  
2019-05-03 18:58:12.472 +08:00 [INF] Request finished in 29.6461ms 200 text/html; charset=utf-8
2019-05-03 18:58:12.492 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/apidoc/docView.min.css?v=636924778697984862  
2019-05-03 18:58:12.498 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/apidoc/docViewData.json?v=636924778697984862  
2019-05-03 18:58:12.512 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/apidoc/jquery.js  
2019-05-03 18:58:12.498 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/apidoc/angular.js  
2019-05-03 18:58:12.513 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/apidoc/docView.min.js?v=636924778697984862  
2019-05-03 18:58:12.513 +08:00 [INF] Request finished in 21.2205ms 200 text/css
2019-05-03 18:58:12.519 +08:00 [INF] Request finished in 6.054ms 200 application/javascript
2019-05-03 18:58:12.527 +08:00 [INF] Request finished in 15.0548ms 200 application/javascript
2019-05-03 18:58:12.527 +08:00 [INF] Request finished in 30.7733ms 200 application/javascript
2019-05-03 18:58:12.675 +08:00 [INF] FastExpressions For Type: AspNetCore.ApiDoc.Internal.ControllerInformation
.Lambda #Lambda1<System.Func`5[System.Object,System.String,System.Boolean,System.Object,System.Object]>(
    System.Object $@object,
    System.String $name,
    System.Boolean $isAssign,
    System.Object $value) {
    .Block(
        System.Object $_,
        AspNetCore.ApiDoc.Internal.ControllerInformation $current) {
        $_;
        .If ($value != null) {
            $_ = $value
        } .Else {
            .Default(System.Void)
        };
        $current = $@object .As AspNetCore.ApiDoc.Internal.ControllerInformation;
        .Try {
            .Block() {
                .If (
                    $isAssign
                ) {
                    .Switch ($name) {
                    .Case ("IsObsolete"):
                            .Block() {
                                ($current .As AspNetCore.ApiDoc.Internal.Information).IsObsolete = (System.Boolean)$value;
                                .Default(System.Void)
                            }
                    .Case ("Message"):
                            .Block() {
                                ($current .As AspNetCore.ApiDoc.Internal.Information).Message = (System.String)$value;
                                .Default(System.Void)
                            }
                    .Default:
                            .Throw .New System.Collections.Generic.KeyNotFoundException(.Call System.String.Concat(
                                    "Cannot found the property or field '",
                                    $name,
                                    "' of 'AspNetCore.ApiDoc.Internal.ControllerInformation'"))
                    }
                } .Else {
                    .Switch ($name) {
                    .Case ("Id"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Id;
                                .Default(System.Void)
                            }
                    .Case ("Name"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Name;
                                .Default(System.Void)
                            }
                    .Case ("Description"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Description;
                                .Default(System.Void)
                            }
                    .Case ("IsObsolete"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).IsObsolete;
                                .Default(System.Void)
                            }
                    .Case ("Message"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Message;
                                .Default(System.Void)
                            }
                    .Case ("Remarks"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Remarks;
                                .Default(System.Void)
                            }
                    .Case ("Order"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Order;
                                .Default(System.Void)
                            }
                    .Case ("Parent"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Parent;
                                .Default(System.Void)
                            }
                    .Case ("Current"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Current;
                                .Default(System.Void)
                            }
                    .Case ("Childrens"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Childrens;
                                .Default(System.Void)
                            }
                    .Default:
                            .Throw .New System.Collections.Generic.KeyNotFoundException(.Call System.String.Concat(
                                    "Cannot found the property or field '",
                                    $name,
                                    "' of 'AspNetCore.ApiDoc.Internal.ControllerInformation'"))
                    }
                }
            }
        } .Catch (System.Exception $ex) {
            .Throw .New System.Exception(
                .Call System.String.Concat(
                    " Occur error when Get or Set the property or field '",
                    $name,
                    "' of 'AspNetCore.ApiDoc.Internal.ControllerInformation' "),
                $ex)
        };
        $_
    }
}
2019-05-03 18:58:12.803 +08:00 [INF] FastExpressions For Type: AspNetCore.ApiDoc.Internal.ActionInformation
.Lambda #Lambda1<System.Func`5[System.Object,System.String,System.Boolean,System.Object,System.Object]>(
    System.Object $@object,
    System.String $name,
    System.Boolean $isAssign,
    System.Object $value) {
    .Block(
        System.Object $_,
        AspNetCore.ApiDoc.Internal.ActionInformation $current) {
        $_;
        .If ($value != null) {
            $_ = $value
        } .Else {
            .Default(System.Void)
        };
        $current = $@object .As AspNetCore.ApiDoc.Internal.ActionInformation;
        .Try {
            .Block() {
                .If (
                    $isAssign
                ) {
                    .Switch ($name) {
                    .Case ("Request"):
                            .Block() {
                                $current.Request = (System.Collections.Generic.SortedSet`1[AspNetCore.ApiDoc.ModelInfo])$value;
                                .Default(System.Void)
                            }
                    .Case ("RequestExample"):
                            .Block() {
                                $current.RequestExample = (System.Collections.Generic.SortedDictionary`2[System.String,System.Object])$value;
                                .Default(System.Void)
                            }
                    .Case ("Response"):
                            .Block() {
                                $current.Response = (System.Collections.Generic.SortedSet`1[AspNetCore.ApiDoc.ModelInfo])$value;
                                .Default(System.Void)
                            }
                    .Case ("ResponseExample"):
                            .Block() {
                                $current.ResponseExample = (System.Collections.Generic.Dictionary`2[System.String,System.Object])$value;
                                .Default(System.Void)
                            }
                    .Case ("Url"):
                            .Block() {
                                $current.Url = (System.String)$value;
                                .Default(System.Void)
                            }
                    .Case ("Method"):
                            .Block() {
                                $current.Method = (System.String)$value;
                                .Default(System.Void)
                            }
                    .Case ("Id"):
                            .Call .Constant<System.Reflection.RtFieldInfo>(System.String <Id>k__BackingField).SetValue(
                                $current .As AspNetCore.ApiDoc.Internal.Information,
                                $value)
                    .Case ("Name"):
                            .Call .Constant<System.Reflection.RtFieldInfo>(System.String <Name>k__BackingField).SetValue(
                                $current .As AspNetCore.ApiDoc.Internal.Information,
                                $value)
                    .Case ("Description"):
                            .Call .Constant<System.Reflection.RtFieldInfo>(System.String <Description>k__BackingField).SetValue(
                                $current .As AspNetCore.ApiDoc.Internal.Information,
                                $value)
                    .Case ("IsObsolete"):
                            .Block() {
                                ($current .As AspNetCore.ApiDoc.Internal.Information).IsObsolete = (System.Boolean)$value;
                                .Default(System.Void)
                            }
                    .Case ("Message"):
                            .Block() {
                                ($current .As AspNetCore.ApiDoc.Internal.Information).Message = (System.String)$value;
                                .Default(System.Void)
                            }
                    .Case ("Remarks"):
                            .Call .Constant<System.Reflection.RtFieldInfo>(System.String <Remarks>k__BackingField).SetValue(
                                $current .As AspNetCore.ApiDoc.Internal.Information,
                                $value)
                    .Case ("Order"):
                            .Call .Constant<System.Reflection.RtFieldInfo>(Int32 <Order>k__BackingField).SetValue(
                                $current .As AspNetCore.ApiDoc.Internal.Information,
                                $value)
                    .Case ("Parent"):
                            .Call .Constant<System.Reflection.RtFieldInfo>(System.Type <Parent>k__BackingField).SetValue(
                                $current .As AspNetCore.ApiDoc.Internal.Information,
                                $value)
                    .Case ("Current"):
                            .Call .Constant<System.Reflection.RtFieldInfo>(System.Type <Current>k__BackingField).SetValue(
                                $current .As AspNetCore.ApiDoc.Internal.Information,
                                $value)
                    .Case ("Childrens"):
                            .Call .Constant<System.Reflection.RtFieldInfo>(System.Collections.Generic.List`1[AspNetCore.ApiDoc.Internal.Information] <Childrens>k__BackingField).SetValue(
                                $current .As AspNetCore.ApiDoc.Internal.Information,
                                $value)
                    .Case ("_descriptor"):
                            .Block() {
                                $current._descriptor = (AspNetCore.ApiDoc.ApiDocDescriptor)$value;
                                .Default(System.Void)
                            }
                    .Default:
                            .Throw .New System.Collections.Generic.KeyNotFoundException(.Call System.String.Concat(
                                    "Cannot found the property or field '",
                                    $name,
                                    "' of 'AspNetCore.ApiDoc.Internal.ActionInformation'"))
                    }
                } .Else {
                    .Switch ($name) {
                    .Case ("Request"):
                            .Block() {
                                $_ = (System.Object)$current.Request;
                                .Default(System.Void)
                            }
                    .Case ("RequestExample"):
                            .Block() {
                                $_ = (System.Object)$current.RequestExample;
                                .Default(System.Void)
                            }
                    .Case ("Response"):
                            .Block() {
                                $_ = (System.Object)$current.Response;
                                .Default(System.Void)
                            }
                    .Case ("ResponseExample"):
                            .Block() {
                                $_ = (System.Object)$current.ResponseExample;
                                .Default(System.Void)
                            }
                    .Case ("Url"):
                            .Block() {
                                $_ = (System.Object)$current.Url;
                                .Default(System.Void)
                            }
                    .Case ("Method"):
                            .Block() {
                                $_ = (System.Object)$current.Method;
                                .Default(System.Void)
                            }
                    .Case ("Id"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Id;
                                .Default(System.Void)
                            }
                    .Case ("Name"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Name;
                                .Default(System.Void)
                            }
                    .Case ("Description"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Description;
                                .Default(System.Void)
                            }
                    .Case ("IsObsolete"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).IsObsolete;
                                .Default(System.Void)
                            }
                    .Case ("Message"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Message;
                                .Default(System.Void)
                            }
                    .Case ("Remarks"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Remarks;
                                .Default(System.Void)
                            }
                    .Case ("Order"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Order;
                                .Default(System.Void)
                            }
                    .Case ("Parent"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Parent;
                                .Default(System.Void)
                            }
                    .Case ("Current"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Current;
                                .Default(System.Void)
                            }
                    .Case ("Childrens"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Childrens;
                                .Default(System.Void)
                            }
                    .Case ("_descriptor"):
                            .Block() {
                                $_ = (System.Object)$current._descriptor;
                                .Default(System.Void)
                            }
                    .Default:
                            .Throw .New System.Collections.Generic.KeyNotFoundException(.Call System.String.Concat(
                                    "Cannot found the property or field '",
                                    $name,
                                    "' of 'AspNetCore.ApiDoc.Internal.ActionInformation'"))
                    }
                }
            }
        } .Catch (System.Exception $ex) {
            .Throw .New System.Exception(
                .Call System.String.Concat(
                    " Occur error when Get or Set the property or field '",
                    $name,
                    "' of 'AspNetCore.ApiDoc.Internal.ActionInformation' "),
                $ex)
        };
        $_
    }
}
2019-05-03 18:58:12.959 +08:00 [INF] FastExpressions For Type: AspNetCore.ApiDoc.ModelInfo
.Lambda #Lambda1<System.Func`5[System.Object,System.String,System.Boolean,System.Object,System.Object]>(
    System.Object $@object,
    System.String $name,
    System.Boolean $isAssign,
    System.Object $value) {
    .Block(
        System.Object $_,
        AspNetCore.ApiDoc.ModelInfo $current) {
        $_;
        .If ($value != null) {
            $_ = $value
        } .Else {
            .Default(System.Void)
        };
        $current = $@object .As AspNetCore.ApiDoc.ModelInfo;
        .Try {
            .Block() {
                .If (
                    $isAssign
                ) {
                    .Switch ($name) {
                    .Case ("CurrentType"):
                            .Block() {
                                $current.CurrentType = (System.Type)$value;
                                .Default(System.Void)
                            }
                    .Case ("Name"):
                            .Block() {
                                $current.Name = (System.String)$value;
                                .Default(System.Void)
                            }
                    .Case ("Type"):
                            .Block() {
                                $current.Type = (System.String)$value;
                                .Default(System.Void)
                            }
                    .Case ("IsRequired"):
                            .Block() {
                                $current.IsRequired = (System.Boolean)$value;
                                .Default(System.Void)
                            }
                    .Case ("IsLoop"):
                            .Block() {
                                $current.IsLoop = (System.Boolean)$value;
                                .Default(System.Void)
                            }
                    .Case ("Description"):
                            .Block() {
                                $current.Description = (System.String)$value;
                                .Default(System.Void)
                            }
                    .Case ("Remarks"):
                            .Block() {
                                $current.Remarks = (System.String)$value;
                                .Default(System.Void)
                            }
                    .Case ("Value"):
                            .Block() {
                                $current.Value = (System.Object)$value;
                                .Default(System.Void)
                            }
                    .Case ("IsArray"):
                            .Block() {
                                $current.IsArray = (System.Boolean)$value;
                                .Default(System.Void)
                            }
                    .Case ("Parent"):
                            .Block() {
                                $current.Parent = (AspNetCore.ApiDoc.ModelInfo)$value;
                                .Default(System.Void)
                            }
                    .Case ("IsEnum"):
                            .Block() {
                                $current.IsEnum = (System.Boolean)$value;
                                .Default(System.Void)
                            }
                    .Case ("Children"):
                            .Block() {
                                $current.Children = (System.Collections.Generic.SortedSet`1[AspNetCore.ApiDoc.ModelInfo])$value;
                                .Default(System.Void)
                            }
                    .Default:
                            .Throw .New System.Collections.Generic.KeyNotFoundException(.Call System.String.Concat(
                                    "Cannot found the property or field '",
                                    $name,
                                    "' of 'AspNetCore.ApiDoc.ModelInfo'"))
                    }
                } .Else {
                    .Switch ($name) {
                    .Case ("CurrentType"):
                            .Block() {
                                $_ = (System.Object)$current.CurrentType;
                                .Default(System.Void)
                            }
                    .Case ("Name"):
                            .Block() {
                                $_ = (System.Object)$current.Name;
                                .Default(System.Void)
                            }
                    .Case ("Type"):
                            .Block() {
                                $_ = (System.Object)$current.Type;
                                .Default(System.Void)
                            }
                    .Case ("IsRequired"):
                            .Block() {
                                $_ = (System.Object)$current.IsRequired;
                                .Default(System.Void)
                            }
                    .Case ("IsLoop"):
                            .Block() {
                                $_ = (System.Object)$current.IsLoop;
                                .Default(System.Void)
                            }
                    .Case ("Description"):
                            .Block() {
                                $_ = (System.Object)$current.Description;
                                .Default(System.Void)
                            }
                    .Case ("Remarks"):
                            .Block() {
                                $_ = (System.Object)$current.Remarks;
                                .Default(System.Void)
                            }
                    .Case ("Value"):
                            .Block() {
                                $_ = (System.Object)$current.Value;
                                .Default(System.Void)
                            }
                    .Case ("IsArray"):
                            .Block() {
                                $_ = (System.Object)$current.IsArray;
                                .Default(System.Void)
                            }
                    .Case ("Parent"):
                            .Block() {
                                $_ = (System.Object)$current.Parent;
                                .Default(System.Void)
                            }
                    .Case ("IsEnum"):
                            .Block() {
                                $_ = (System.Object)$current.IsEnum;
                                .Default(System.Void)
                            }
                    .Case ("Children"):
                            .Block() {
                                $_ = (System.Object)$current.Children;
                                .Default(System.Void)
                            }
                    .Default:
                            .Throw .New System.Collections.Generic.KeyNotFoundException(.Call System.String.Concat(
                                    "Cannot found the property or field '",
                                    $name,
                                    "' of 'AspNetCore.ApiDoc.ModelInfo'"))
                    }
                }
            }
        } .Catch (System.Exception $ex) {
            .Throw .New System.Exception(
                .Call System.String.Concat(
                    " Occur error when Get or Set the property or field '",
                    $name,
                    "' of 'AspNetCore.ApiDoc.ModelInfo' "),
                $ex)
        };
        $_
    }
}
2019-05-03 18:58:13.033 +08:00 [INF] Request finished in 536.911ms 200 application/javascript
2019-05-03 18:58:13.164 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/favicon.ico  
2019-05-03 18:58:13.167 +08:00 [INF] Request finished in 2.9804ms 404 
2019-05-03 19:05:11.208 +08:00 [DBG] TaskSchedulingThreadPool configured with max concurrency of 10 and TaskScheduler ThreadPoolTaskScheduler.
2019-05-03 19:05:11.485 +08:00 [INF] Initialized Scheduler Signaller of type: Quartz.Core.SchedulerSignalerImpl
2019-05-03 19:05:11.498 +08:00 [INF] Quartz Scheduler v.3.0.7.0 created.
2019-05-03 19:05:11.509 +08:00 [INF] RAMJobStore initialized.
2019-05-03 19:05:11.522 +08:00 [INF] Scheduler meta-data: Quartz Scheduler (v3.0.7.0) 'QuartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'Quartz.Core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'Quartz.Simpl.DefaultThreadPool' - with 10 threads.
  Using job-store 'Quartz.Simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2019-05-03 19:05:11.526 +08:00 [INF] Quartz scheduler 'QuartzScheduler' initialized
2019-05-03 19:05:11.528 +08:00 [INF] Quartz scheduler version: 3.0.7.0
2019-05-03 19:05:17.093 +08:00 [INF] User profile is available. Using 'C:\Users\gainorloss\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2019-05-03 19:06:07.815 +08:00 [DBG] TaskSchedulingThreadPool configured with max concurrency of 10 and TaskScheduler ThreadPoolTaskScheduler.
2019-05-03 19:06:08.031 +08:00 [INF] Initialized Scheduler Signaller of type: Quartz.Core.SchedulerSignalerImpl
2019-05-03 19:06:08.051 +08:00 [INF] Quartz Scheduler v.3.0.7.0 created.
2019-05-03 19:06:08.058 +08:00 [INF] RAMJobStore initialized.
2019-05-03 19:06:08.069 +08:00 [INF] Scheduler meta-data: Quartz Scheduler (v3.0.7.0) 'QuartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'Quartz.Core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'Quartz.Simpl.DefaultThreadPool' - with 10 threads.
  Using job-store 'Quartz.Simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2019-05-03 19:06:08.071 +08:00 [INF] Quartz scheduler 'QuartzScheduler' initialized
2019-05-03 19:06:08.072 +08:00 [INF] Quartz scheduler version: 3.0.7.0
2019-05-03 19:06:12.504 +08:00 [INF] User profile is available. Using 'C:\Users\gainorloss\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2019-05-03 19:06:19.732 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/apidoc  
2019-05-03 19:06:19.804 +08:00 [INF] Request finished in 75.2144ms 200 text/html; charset=utf-8
2019-05-03 19:06:19.828 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/apidoc/docView.min.css?v=636924783731816692  
2019-05-03 19:06:19.840 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/apidoc/docViewData.json?v=636924783731816692  
2019-05-03 19:06:19.840 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/apidoc/jquery.js  
2019-05-03 19:06:19.857 +08:00 [INF] Request finished in 29.217ms 200 text/css
2019-05-03 19:06:19.828 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/apidoc/angular.js  
2019-05-03 19:06:19.828 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/apidoc/docView.min.js?v=636924783731816692  
2019-05-03 19:06:19.867 +08:00 [INF] Request finished in 40.0247ms 200 application/javascript
2019-05-03 19:06:19.868 +08:00 [INF] Request finished in 27.843ms 200 application/javascript
2019-05-03 19:06:19.875 +08:00 [INF] Request finished in 47.6968ms 200 application/javascript
2019-05-03 19:06:20.030 +08:00 [INF] FastExpressions For Type: AspNetCore.ApiDoc.Internal.ControllerInformation
.Lambda #Lambda1<System.Func`5[System.Object,System.String,System.Boolean,System.Object,System.Object]>(
    System.Object $@object,
    System.String $name,
    System.Boolean $isAssign,
    System.Object $value) {
    .Block(
        System.Object $_,
        AspNetCore.ApiDoc.Internal.ControllerInformation $current) {
        $_;
        .If ($value != null) {
            $_ = $value
        } .Else {
            .Default(System.Void)
        };
        $current = $@object .As AspNetCore.ApiDoc.Internal.ControllerInformation;
        .Try {
            .Block() {
                .If (
                    $isAssign
                ) {
                    .Switch ($name) {
                    .Case ("IsObsolete"):
                            .Block() {
                                ($current .As AspNetCore.ApiDoc.Internal.Information).IsObsolete = (System.Boolean)$value;
                                .Default(System.Void)
                            }
                    .Case ("Message"):
                            .Block() {
                                ($current .As AspNetCore.ApiDoc.Internal.Information).Message = (System.String)$value;
                                .Default(System.Void)
                            }
                    .Default:
                            .Throw .New System.Collections.Generic.KeyNotFoundException(.Call System.String.Concat(
                                    "Cannot found the property or field '",
                                    $name,
                                    "' of 'AspNetCore.ApiDoc.Internal.ControllerInformation'"))
                    }
                } .Else {
                    .Switch ($name) {
                    .Case ("Id"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Id;
                                .Default(System.Void)
                            }
                    .Case ("Name"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Name;
                                .Default(System.Void)
                            }
                    .Case ("Description"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Description;
                                .Default(System.Void)
                            }
                    .Case ("IsObsolete"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).IsObsolete;
                                .Default(System.Void)
                            }
                    .Case ("Message"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Message;
                                .Default(System.Void)
                            }
                    .Case ("Remarks"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Remarks;
                                .Default(System.Void)
                            }
                    .Case ("Order"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Order;
                                .Default(System.Void)
                            }
                    .Case ("Parent"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Parent;
                                .Default(System.Void)
                            }
                    .Case ("Current"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Current;
                                .Default(System.Void)
                            }
                    .Case ("Childrens"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Childrens;
                                .Default(System.Void)
                            }
                    .Default:
                            .Throw .New System.Collections.Generic.KeyNotFoundException(.Call System.String.Concat(
                                    "Cannot found the property or field '",
                                    $name,
                                    "' of 'AspNetCore.ApiDoc.Internal.ControllerInformation'"))
                    }
                }
            }
        } .Catch (System.Exception $ex) {
            .Throw .New System.Exception(
                .Call System.String.Concat(
                    " Occur error when Get or Set the property or field '",
                    $name,
                    "' of 'AspNetCore.ApiDoc.Internal.ControllerInformation' "),
                $ex)
        };
        $_
    }
}
2019-05-03 19:06:20.124 +08:00 [INF] FastExpressions For Type: AspNetCore.ApiDoc.Internal.ActionInformation
.Lambda #Lambda1<System.Func`5[System.Object,System.String,System.Boolean,System.Object,System.Object]>(
    System.Object $@object,
    System.String $name,
    System.Boolean $isAssign,
    System.Object $value) {
    .Block(
        System.Object $_,
        AspNetCore.ApiDoc.Internal.ActionInformation $current) {
        $_;
        .If ($value != null) {
            $_ = $value
        } .Else {
            .Default(System.Void)
        };
        $current = $@object .As AspNetCore.ApiDoc.Internal.ActionInformation;
        .Try {
            .Block() {
                .If (
                    $isAssign
                ) {
                    .Switch ($name) {
                    .Case ("Request"):
                            .Block() {
                                $current.Request = (System.Collections.Generic.SortedSet`1[AspNetCore.ApiDoc.ModelInfo])$value;
                                .Default(System.Void)
                            }
                    .Case ("RequestExample"):
                            .Block() {
                                $current.RequestExample = (System.Collections.Generic.SortedDictionary`2[System.String,System.Object])$value;
                                .Default(System.Void)
                            }
                    .Case ("Response"):
                            .Block() {
                                $current.Response = (System.Collections.Generic.SortedSet`1[AspNetCore.ApiDoc.ModelInfo])$value;
                                .Default(System.Void)
                            }
                    .Case ("ResponseExample"):
                            .Block() {
                                $current.ResponseExample = (System.Collections.Generic.Dictionary`2[System.String,System.Object])$value;
                                .Default(System.Void)
                            }
                    .Case ("Url"):
                            .Block() {
                                $current.Url = (System.String)$value;
                                .Default(System.Void)
                            }
                    .Case ("Method"):
                            .Block() {
                                $current.Method = (System.String)$value;
                                .Default(System.Void)
                            }
                    .Case ("Id"):
                            .Call .Constant<System.Reflection.RtFieldInfo>(System.String <Id>k__BackingField).SetValue(
                                $current .As AspNetCore.ApiDoc.Internal.Information,
                                $value)
                    .Case ("Name"):
                            .Call .Constant<System.Reflection.RtFieldInfo>(System.String <Name>k__BackingField).SetValue(
                                $current .As AspNetCore.ApiDoc.Internal.Information,
                                $value)
                    .Case ("Description"):
                            .Call .Constant<System.Reflection.RtFieldInfo>(System.String <Description>k__BackingField).SetValue(
                                $current .As AspNetCore.ApiDoc.Internal.Information,
                                $value)
                    .Case ("IsObsolete"):
                            .Block() {
                                ($current .As AspNetCore.ApiDoc.Internal.Information).IsObsolete = (System.Boolean)$value;
                                .Default(System.Void)
                            }
                    .Case ("Message"):
                            .Block() {
                                ($current .As AspNetCore.ApiDoc.Internal.Information).Message = (System.String)$value;
                                .Default(System.Void)
                            }
                    .Case ("Remarks"):
                            .Call .Constant<System.Reflection.RtFieldInfo>(System.String <Remarks>k__BackingField).SetValue(
                                $current .As AspNetCore.ApiDoc.Internal.Information,
                                $value)
                    .Case ("Order"):
                            .Call .Constant<System.Reflection.RtFieldInfo>(Int32 <Order>k__BackingField).SetValue(
                                $current .As AspNetCore.ApiDoc.Internal.Information,
                                $value)
                    .Case ("Parent"):
                            .Call .Constant<System.Reflection.RtFieldInfo>(System.Type <Parent>k__BackingField).SetValue(
                                $current .As AspNetCore.ApiDoc.Internal.Information,
                                $value)
                    .Case ("Current"):
                            .Call .Constant<System.Reflection.RtFieldInfo>(System.Type <Current>k__BackingField).SetValue(
                                $current .As AspNetCore.ApiDoc.Internal.Information,
                                $value)
                    .Case ("Childrens"):
                            .Call .Constant<System.Reflection.RtFieldInfo>(System.Collections.Generic.List`1[AspNetCore.ApiDoc.Internal.Information] <Childrens>k__BackingField).SetValue(
                                $current .As AspNetCore.ApiDoc.Internal.Information,
                                $value)
                    .Case ("_descriptor"):
                            .Block() {
                                $current._descriptor = (AspNetCore.ApiDoc.ApiDocDescriptor)$value;
                                .Default(System.Void)
                            }
                    .Default:
                            .Throw .New System.Collections.Generic.KeyNotFoundException(.Call System.String.Concat(
                                    "Cannot found the property or field '",
                                    $name,
                                    "' of 'AspNetCore.ApiDoc.Internal.ActionInformation'"))
                    }
                } .Else {
                    .Switch ($name) {
                    .Case ("Request"):
                            .Block() {
                                $_ = (System.Object)$current.Request;
                                .Default(System.Void)
                            }
                    .Case ("RequestExample"):
                            .Block() {
                                $_ = (System.Object)$current.RequestExample;
                                .Default(System.Void)
                            }
                    .Case ("Response"):
                            .Block() {
                                $_ = (System.Object)$current.Response;
                                .Default(System.Void)
                            }
                    .Case ("ResponseExample"):
                            .Block() {
                                $_ = (System.Object)$current.ResponseExample;
                                .Default(System.Void)
                            }
                    .Case ("Url"):
                            .Block() {
                                $_ = (System.Object)$current.Url;
                                .Default(System.Void)
                            }
                    .Case ("Method"):
                            .Block() {
                                $_ = (System.Object)$current.Method;
                                .Default(System.Void)
                            }
                    .Case ("Id"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Id;
                                .Default(System.Void)
                            }
                    .Case ("Name"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Name;
                                .Default(System.Void)
                            }
                    .Case ("Description"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Description;
                                .Default(System.Void)
                            }
                    .Case ("IsObsolete"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).IsObsolete;
                                .Default(System.Void)
                            }
                    .Case ("Message"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Message;
                                .Default(System.Void)
                            }
                    .Case ("Remarks"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Remarks;
                                .Default(System.Void)
                            }
                    .Case ("Order"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Order;
                                .Default(System.Void)
                            }
                    .Case ("Parent"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Parent;
                                .Default(System.Void)
                            }
                    .Case ("Current"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Current;
                                .Default(System.Void)
                            }
                    .Case ("Childrens"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Childrens;
                                .Default(System.Void)
                            }
                    .Case ("_descriptor"):
                            .Block() {
                                $_ = (System.Object)$current._descriptor;
                                .Default(System.Void)
                            }
                    .Default:
                            .Throw .New System.Collections.Generic.KeyNotFoundException(.Call System.String.Concat(
                                    "Cannot found the property or field '",
                                    $name,
                                    "' of 'AspNetCore.ApiDoc.Internal.ActionInformation'"))
                    }
                }
            }
        } .Catch (System.Exception $ex) {
            .Throw .New System.Exception(
                .Call System.String.Concat(
                    " Occur error when Get or Set the property or field '",
                    $name,
                    "' of 'AspNetCore.ApiDoc.Internal.ActionInformation' "),
                $ex)
        };
        $_
    }
}
2019-05-03 19:06:20.277 +08:00 [INF] FastExpressions For Type: AspNetCore.ApiDoc.ModelInfo
.Lambda #Lambda1<System.Func`5[System.Object,System.String,System.Boolean,System.Object,System.Object]>(
    System.Object $@object,
    System.String $name,
    System.Boolean $isAssign,
    System.Object $value) {
    .Block(
        System.Object $_,
        AspNetCore.ApiDoc.ModelInfo $current) {
        $_;
        .If ($value != null) {
            $_ = $value
        } .Else {
            .Default(System.Void)
        };
        $current = $@object .As AspNetCore.ApiDoc.ModelInfo;
        .Try {
            .Block() {
                .If (
                    $isAssign
                ) {
                    .Switch ($name) {
                    .Case ("CurrentType"):
                            .Block() {
                                $current.CurrentType = (System.Type)$value;
                                .Default(System.Void)
                            }
                    .Case ("Name"):
                            .Block() {
                                $current.Name = (System.String)$value;
                                .Default(System.Void)
                            }
                    .Case ("Type"):
                            .Block() {
                                $current.Type = (System.String)$value;
                                .Default(System.Void)
                            }
                    .Case ("IsRequired"):
                            .Block() {
                                $current.IsRequired = (System.Boolean)$value;
                                .Default(System.Void)
                            }
                    .Case ("IsLoop"):
                            .Block() {
                                $current.IsLoop = (System.Boolean)$value;
                                .Default(System.Void)
                            }
                    .Case ("Description"):
                            .Block() {
                                $current.Description = (System.String)$value;
                                .Default(System.Void)
                            }
                    .Case ("Remarks"):
                            .Block() {
                                $current.Remarks = (System.String)$value;
                                .Default(System.Void)
                            }
                    .Case ("Value"):
                            .Block() {
                                $current.Value = (System.Object)$value;
                                .Default(System.Void)
                            }
                    .Case ("IsArray"):
                            .Block() {
                                $current.IsArray = (System.Boolean)$value;
                                .Default(System.Void)
                            }
                    .Case ("Parent"):
                            .Block() {
                                $current.Parent = (AspNetCore.ApiDoc.ModelInfo)$value;
                                .Default(System.Void)
                            }
                    .Case ("IsEnum"):
                            .Block() {
                                $current.IsEnum = (System.Boolean)$value;
                                .Default(System.Void)
                            }
                    .Case ("Children"):
                            .Block() {
                                $current.Children = (System.Collections.Generic.SortedSet`1[AspNetCore.ApiDoc.ModelInfo])$value;
                                .Default(System.Void)
                            }
                    .Default:
                            .Throw .New System.Collections.Generic.KeyNotFoundException(.Call System.String.Concat(
                                    "Cannot found the property or field '",
                                    $name,
                                    "' of 'AspNetCore.ApiDoc.ModelInfo'"))
                    }
                } .Else {
                    .Switch ($name) {
                    .Case ("CurrentType"):
                            .Block() {
                                $_ = (System.Object)$current.CurrentType;
                                .Default(System.Void)
                            }
                    .Case ("Name"):
                            .Block() {
                                $_ = (System.Object)$current.Name;
                                .Default(System.Void)
                            }
                    .Case ("Type"):
                            .Block() {
                                $_ = (System.Object)$current.Type;
                                .Default(System.Void)
                            }
                    .Case ("IsRequired"):
                            .Block() {
                                $_ = (System.Object)$current.IsRequired;
                                .Default(System.Void)
                            }
                    .Case ("IsLoop"):
                            .Block() {
                                $_ = (System.Object)$current.IsLoop;
                                .Default(System.Void)
                            }
                    .Case ("Description"):
                            .Block() {
                                $_ = (System.Object)$current.Description;
                                .Default(System.Void)
                            }
                    .Case ("Remarks"):
                            .Block() {
                                $_ = (System.Object)$current.Remarks;
                                .Default(System.Void)
                            }
                    .Case ("Value"):
                            .Block() {
                                $_ = (System.Object)$current.Value;
                                .Default(System.Void)
                            }
                    .Case ("IsArray"):
                            .Block() {
                                $_ = (System.Object)$current.IsArray;
                                .Default(System.Void)
                            }
                    .Case ("Parent"):
                            .Block() {
                                $_ = (System.Object)$current.Parent;
                                .Default(System.Void)
                            }
                    .Case ("IsEnum"):
                            .Block() {
                                $_ = (System.Object)$current.IsEnum;
                                .Default(System.Void)
                            }
                    .Case ("Children"):
                            .Block() {
                                $_ = (System.Object)$current.Children;
                                .Default(System.Void)
                            }
                    .Default:
                            .Throw .New System.Collections.Generic.KeyNotFoundException(.Call System.String.Concat(
                                    "Cannot found the property or field '",
                                    $name,
                                    "' of 'AspNetCore.ApiDoc.ModelInfo'"))
                    }
                }
            }
        } .Catch (System.Exception $ex) {
            .Throw .New System.Exception(
                .Call System.String.Concat(
                    " Occur error when Get or Set the property or field '",
                    $name,
                    "' of 'AspNetCore.ApiDoc.ModelInfo' "),
                $ex)
        };
        $_
    }
}
2019-05-03 19:06:20.363 +08:00 [INF] Request finished in 523.0542ms 200 application/javascript
2019-05-03 19:06:20.467 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/favicon.ico  
2019-05-03 19:06:20.562 +08:00 [INF] Request finished in 95.6039ms 404 
2019-05-03 19:06:33.163 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/api/Values/Get?id=0  
2019-05-03 19:06:33.168 +08:00 [INF] Executing endpoint 'Dnc.API.Controllers.ValuesController.Get (Dnc.API)'
2019-05-03 19:06:33.244 +08:00 [INF] Route matched with {action = "Get", controller = "Values"}. Executing action Dnc.API.Controllers.ValuesController.Get (Dnc.API)
2019-05-03 19:06:33.341 +08:00 [INF] Executing ObjectResult, writing value of type 'Microsoft.AspNetCore.Mvc.ValidationProblemDetails'.
2019-05-03 19:06:33.423 +08:00 [INF] Executed action Dnc.API.Controllers.ValuesController.Get (Dnc.API) in 169.44060000000002ms
2019-05-03 19:06:33.435 +08:00 [INF] Executed endpoint 'Dnc.API.Controllers.ValuesController.Get (Dnc.API)'
2019-05-03 19:06:33.437 +08:00 [INF] Request finished in 274.0716ms 400 application/problem+json; charset=utf-8
2019-05-03 19:06:59.521 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/api/Values?id=0  
2019-05-03 19:06:59.523 +08:00 [INF] Executing endpoint 'Dnc.API.Controllers.ValuesController.Get (Dnc.API)'
2019-05-03 19:06:59.528 +08:00 [INF] Route matched with {action = "Get", controller = "Values"}. Executing action Dnc.API.Controllers.ValuesController.Get (Dnc.API)
2019-05-03 19:06:59.541 +08:00 [INF] Executing action method Dnc.API.Controllers.ValuesController.Get (Dnc.API) - Validation state: "Valid"
2019-05-03 19:07:02.876 +08:00 [ERR] d7cae49fd38547c48669aa42013b0bd0
2019-05-03 19:07:03.354 +08:00 [INF] Executed action method Dnc.API.Controllers.ValuesController.Get (Dnc.API), returned result Microsoft.AspNetCore.Mvc.OkObjectResult in 3803.9458ms.
2019-05-03 19:07:03.359 +08:00 [INF] Executing ObjectResult, writing value of type '<>f__AnonymousType0`4[[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[<>f__AnonymousType1`3[[Dnc.API.Models.ABC, Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.IEnumerable`1[[Dnc.API.Models.ABC, Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2019-05-03 19:07:03.451 +08:00 [INF] Executed action Dnc.API.Controllers.ValuesController.Get (Dnc.API) in 3918.5718ms
2019-05-03 19:07:03.455 +08:00 [INF] Executed endpoint 'Dnc.API.Controllers.ValuesController.Get (Dnc.API)'
2019-05-03 19:07:03.458 +08:00 [INF] Request finished in 3936.8052ms 200 application/json; charset=utf-8
2019-05-03 19:07:25.467 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/apidoc  
2019-05-03 19:07:25.478 +08:00 [INF] Request finished in 10.4689ms 304 
2019-05-03 19:07:52.433 +08:00 [DBG] TaskSchedulingThreadPool configured with max concurrency of 10 and TaskScheduler ThreadPoolTaskScheduler.
2019-05-03 19:07:52.666 +08:00 [INF] Initialized Scheduler Signaller of type: Quartz.Core.SchedulerSignalerImpl
2019-05-03 19:07:52.680 +08:00 [INF] Quartz Scheduler v.3.0.7.0 created.
2019-05-03 19:07:52.690 +08:00 [INF] RAMJobStore initialized.
2019-05-03 19:07:52.704 +08:00 [INF] Scheduler meta-data: Quartz Scheduler (v3.0.7.0) 'QuartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'Quartz.Core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'Quartz.Simpl.DefaultThreadPool' - with 10 threads.
  Using job-store 'Quartz.Simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2019-05-03 19:07:52.706 +08:00 [INF] Quartz scheduler 'QuartzScheduler' initialized
2019-05-03 19:07:52.708 +08:00 [INF] Quartz scheduler version: 3.0.7.0
2019-05-03 19:07:57.285 +08:00 [INF] User profile is available. Using 'C:\Users\gainorloss\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2019-05-03 19:07:58.234 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/apidoc  
2019-05-03 19:07:58.313 +08:00 [INF] Request finished in 82.4069ms 200 text/html; charset=utf-8
2019-05-03 19:07:58.345 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/apidoc/docView.min.css?v=636924784779868764  
2019-05-03 19:07:58.345 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/apidoc/docViewData.json?v=636924784779868764  
2019-05-03 19:07:58.346 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/apidoc/docView.min.js?v=636924784779868764  
2019-05-03 19:07:58.353 +08:00 [INF] Request finished in 5.8785ms 200 text/css
2019-05-03 19:07:58.366 +08:00 [INF] Request finished in 20.4826ms 200 application/javascript
2019-05-03 19:07:58.507 +08:00 [INF] FastExpressions For Type: AspNetCore.ApiDoc.Internal.ControllerInformation
.Lambda #Lambda1<System.Func`5[System.Object,System.String,System.Boolean,System.Object,System.Object]>(
    System.Object $@object,
    System.String $name,
    System.Boolean $isAssign,
    System.Object $value) {
    .Block(
        System.Object $_,
        AspNetCore.ApiDoc.Internal.ControllerInformation $current) {
        $_;
        .If ($value != null) {
            $_ = $value
        } .Else {
            .Default(System.Void)
        };
        $current = $@object .As AspNetCore.ApiDoc.Internal.ControllerInformation;
        .Try {
            .Block() {
                .If (
                    $isAssign
                ) {
                    .Switch ($name) {
                    .Case ("IsObsolete"):
                            .Block() {
                                ($current .As AspNetCore.ApiDoc.Internal.Information).IsObsolete = (System.Boolean)$value;
                                .Default(System.Void)
                            }
                    .Case ("Message"):
                            .Block() {
                                ($current .As AspNetCore.ApiDoc.Internal.Information).Message = (System.String)$value;
                                .Default(System.Void)
                            }
                    .Default:
                            .Throw .New System.Collections.Generic.KeyNotFoundException(.Call System.String.Concat(
                                    "Cannot found the property or field '",
                                    $name,
                                    "' of 'AspNetCore.ApiDoc.Internal.ControllerInformation'"))
                    }
                } .Else {
                    .Switch ($name) {
                    .Case ("Id"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Id;
                                .Default(System.Void)
                            }
                    .Case ("Name"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Name;
                                .Default(System.Void)
                            }
                    .Case ("Description"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Description;
                                .Default(System.Void)
                            }
                    .Case ("IsObsolete"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).IsObsolete;
                                .Default(System.Void)
                            }
                    .Case ("Message"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Message;
                                .Default(System.Void)
                            }
                    .Case ("Remarks"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Remarks;
                                .Default(System.Void)
                            }
                    .Case ("Order"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Order;
                                .Default(System.Void)
                            }
                    .Case ("Parent"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Parent;
                                .Default(System.Void)
                            }
                    .Case ("Current"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Current;
                                .Default(System.Void)
                            }
                    .Case ("Childrens"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Childrens;
                                .Default(System.Void)
                            }
                    .Default:
                            .Throw .New System.Collections.Generic.KeyNotFoundException(.Call System.String.Concat(
                                    "Cannot found the property or field '",
                                    $name,
                                    "' of 'AspNetCore.ApiDoc.Internal.ControllerInformation'"))
                    }
                }
            }
        } .Catch (System.Exception $ex) {
            .Throw .New System.Exception(
                .Call System.String.Concat(
                    " Occur error when Get or Set the property or field '",
                    $name,
                    "' of 'AspNetCore.ApiDoc.Internal.ControllerInformation' "),
                $ex)
        };
        $_
    }
}
2019-05-03 19:07:58.598 +08:00 [INF] FastExpressions For Type: AspNetCore.ApiDoc.Internal.ActionInformation
.Lambda #Lambda1<System.Func`5[System.Object,System.String,System.Boolean,System.Object,System.Object]>(
    System.Object $@object,
    System.String $name,
    System.Boolean $isAssign,
    System.Object $value) {
    .Block(
        System.Object $_,
        AspNetCore.ApiDoc.Internal.ActionInformation $current) {
        $_;
        .If ($value != null) {
            $_ = $value
        } .Else {
            .Default(System.Void)
        };
        $current = $@object .As AspNetCore.ApiDoc.Internal.ActionInformation;
        .Try {
            .Block() {
                .If (
                    $isAssign
                ) {
                    .Switch ($name) {
                    .Case ("Request"):
                            .Block() {
                                $current.Request = (System.Collections.Generic.SortedSet`1[AspNetCore.ApiDoc.ModelInfo])$value;
                                .Default(System.Void)
                            }
                    .Case ("RequestExample"):
                            .Block() {
                                $current.RequestExample = (System.Collections.Generic.SortedDictionary`2[System.String,System.Object])$value;
                                .Default(System.Void)
                            }
                    .Case ("Response"):
                            .Block() {
                                $current.Response = (System.Collections.Generic.SortedSet`1[AspNetCore.ApiDoc.ModelInfo])$value;
                                .Default(System.Void)
                            }
                    .Case ("ResponseExample"):
                            .Block() {
                                $current.ResponseExample = (System.Collections.Generic.Dictionary`2[System.String,System.Object])$value;
                                .Default(System.Void)
                            }
                    .Case ("Url"):
                            .Block() {
                                $current.Url = (System.String)$value;
                                .Default(System.Void)
                            }
                    .Case ("Method"):
                            .Block() {
                                $current.Method = (System.String)$value;
                                .Default(System.Void)
                            }
                    .Case ("Id"):
                            .Call .Constant<System.Reflection.RtFieldInfo>(System.String <Id>k__BackingField).SetValue(
                                $current .As AspNetCore.ApiDoc.Internal.Information,
                                $value)
                    .Case ("Name"):
                            .Call .Constant<System.Reflection.RtFieldInfo>(System.String <Name>k__BackingField).SetValue(
                                $current .As AspNetCore.ApiDoc.Internal.Information,
                                $value)
                    .Case ("Description"):
                            .Call .Constant<System.Reflection.RtFieldInfo>(System.String <Description>k__BackingField).SetValue(
                                $current .As AspNetCore.ApiDoc.Internal.Information,
                                $value)
                    .Case ("IsObsolete"):
                            .Block() {
                                ($current .As AspNetCore.ApiDoc.Internal.Information).IsObsolete = (System.Boolean)$value;
                                .Default(System.Void)
                            }
                    .Case ("Message"):
                            .Block() {
                                ($current .As AspNetCore.ApiDoc.Internal.Information).Message = (System.String)$value;
                                .Default(System.Void)
                            }
                    .Case ("Remarks"):
                            .Call .Constant<System.Reflection.RtFieldInfo>(System.String <Remarks>k__BackingField).SetValue(
                                $current .As AspNetCore.ApiDoc.Internal.Information,
                                $value)
                    .Case ("Order"):
                            .Call .Constant<System.Reflection.RtFieldInfo>(Int32 <Order>k__BackingField).SetValue(
                                $current .As AspNetCore.ApiDoc.Internal.Information,
                                $value)
                    .Case ("Parent"):
                            .Call .Constant<System.Reflection.RtFieldInfo>(System.Type <Parent>k__BackingField).SetValue(
                                $current .As AspNetCore.ApiDoc.Internal.Information,
                                $value)
                    .Case ("Current"):
                            .Call .Constant<System.Reflection.RtFieldInfo>(System.Type <Current>k__BackingField).SetValue(
                                $current .As AspNetCore.ApiDoc.Internal.Information,
                                $value)
                    .Case ("Childrens"):
                            .Call .Constant<System.Reflection.RtFieldInfo>(System.Collections.Generic.List`1[AspNetCore.ApiDoc.Internal.Information] <Childrens>k__BackingField).SetValue(
                                $current .As AspNetCore.ApiDoc.Internal.Information,
                                $value)
                    .Case ("_descriptor"):
                            .Block() {
                                $current._descriptor = (AspNetCore.ApiDoc.ApiDocDescriptor)$value;
                                .Default(System.Void)
                            }
                    .Default:
                            .Throw .New System.Collections.Generic.KeyNotFoundException(.Call System.String.Concat(
                                    "Cannot found the property or field '",
                                    $name,
                                    "' of 'AspNetCore.ApiDoc.Internal.ActionInformation'"))
                    }
                } .Else {
                    .Switch ($name) {
                    .Case ("Request"):
                            .Block() {
                                $_ = (System.Object)$current.Request;
                                .Default(System.Void)
                            }
                    .Case ("RequestExample"):
                            .Block() {
                                $_ = (System.Object)$current.RequestExample;
                                .Default(System.Void)
                            }
                    .Case ("Response"):
                            .Block() {
                                $_ = (System.Object)$current.Response;
                                .Default(System.Void)
                            }
                    .Case ("ResponseExample"):
                            .Block() {
                                $_ = (System.Object)$current.ResponseExample;
                                .Default(System.Void)
                            }
                    .Case ("Url"):
                            .Block() {
                                $_ = (System.Object)$current.Url;
                                .Default(System.Void)
                            }
                    .Case ("Method"):
                            .Block() {
                                $_ = (System.Object)$current.Method;
                                .Default(System.Void)
                            }
                    .Case ("Id"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Id;
                                .Default(System.Void)
                            }
                    .Case ("Name"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Name;
                                .Default(System.Void)
                            }
                    .Case ("Description"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Description;
                                .Default(System.Void)
                            }
                    .Case ("IsObsolete"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).IsObsolete;
                                .Default(System.Void)
                            }
                    .Case ("Message"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Message;
                                .Default(System.Void)
                            }
                    .Case ("Remarks"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Remarks;
                                .Default(System.Void)
                            }
                    .Case ("Order"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Order;
                                .Default(System.Void)
                            }
                    .Case ("Parent"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Parent;
                                .Default(System.Void)
                            }
                    .Case ("Current"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Current;
                                .Default(System.Void)
                            }
                    .Case ("Childrens"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Childrens;
                                .Default(System.Void)
                            }
                    .Case ("_descriptor"):
                            .Block() {
                                $_ = (System.Object)$current._descriptor;
                                .Default(System.Void)
                            }
                    .Default:
                            .Throw .New System.Collections.Generic.KeyNotFoundException(.Call System.String.Concat(
                                    "Cannot found the property or field '",
                                    $name,
                                    "' of 'AspNetCore.ApiDoc.Internal.ActionInformation'"))
                    }
                }
            }
        } .Catch (System.Exception $ex) {
            .Throw .New System.Exception(
                .Call System.String.Concat(
                    " Occur error when Get or Set the property or field '",
                    $name,
                    "' of 'AspNetCore.ApiDoc.Internal.ActionInformation' "),
                $ex)
        };
        $_
    }
}
2019-05-03 19:07:58.775 +08:00 [INF] FastExpressions For Type: AspNetCore.ApiDoc.ModelInfo
.Lambda #Lambda1<System.Func`5[System.Object,System.String,System.Boolean,System.Object,System.Object]>(
    System.Object $@object,
    System.String $name,
    System.Boolean $isAssign,
    System.Object $value) {
    .Block(
        System.Object $_,
        AspNetCore.ApiDoc.ModelInfo $current) {
        $_;
        .If ($value != null) {
            $_ = $value
        } .Else {
            .Default(System.Void)
        };
        $current = $@object .As AspNetCore.ApiDoc.ModelInfo;
        .Try {
            .Block() {
                .If (
                    $isAssign
                ) {
                    .Switch ($name) {
                    .Case ("CurrentType"):
                            .Block() {
                                $current.CurrentType = (System.Type)$value;
                                .Default(System.Void)
                            }
                    .Case ("Name"):
                            .Block() {
                                $current.Name = (System.String)$value;
                                .Default(System.Void)
                            }
                    .Case ("Type"):
                            .Block() {
                                $current.Type = (System.String)$value;
                                .Default(System.Void)
                            }
                    .Case ("IsRequired"):
                            .Block() {
                                $current.IsRequired = (System.Boolean)$value;
                                .Default(System.Void)
                            }
                    .Case ("IsLoop"):
                            .Block() {
                                $current.IsLoop = (System.Boolean)$value;
                                .Default(System.Void)
                            }
                    .Case ("Description"):
                            .Block() {
                                $current.Description = (System.String)$value;
                                .Default(System.Void)
                            }
                    .Case ("Remarks"):
                            .Block() {
                                $current.Remarks = (System.String)$value;
                                .Default(System.Void)
                            }
                    .Case ("Value"):
                            .Block() {
                                $current.Value = (System.Object)$value;
                                .Default(System.Void)
                            }
                    .Case ("IsArray"):
                            .Block() {
                                $current.IsArray = (System.Boolean)$value;
                                .Default(System.Void)
                            }
                    .Case ("Parent"):
                            .Block() {
                                $current.Parent = (AspNetCore.ApiDoc.ModelInfo)$value;
                                .Default(System.Void)
                            }
                    .Case ("IsEnum"):
                            .Block() {
                                $current.IsEnum = (System.Boolean)$value;
                                .Default(System.Void)
                            }
                    .Case ("Children"):
                            .Block() {
                                $current.Children = (System.Collections.Generic.SortedSet`1[AspNetCore.ApiDoc.ModelInfo])$value;
                                .Default(System.Void)
                            }
                    .Default:
                            .Throw .New System.Collections.Generic.KeyNotFoundException(.Call System.String.Concat(
                                    "Cannot found the property or field '",
                                    $name,
                                    "' of 'AspNetCore.ApiDoc.ModelInfo'"))
                    }
                } .Else {
                    .Switch ($name) {
                    .Case ("CurrentType"):
                            .Block() {
                                $_ = (System.Object)$current.CurrentType;
                                .Default(System.Void)
                            }
                    .Case ("Name"):
                            .Block() {
                                $_ = (System.Object)$current.Name;
                                .Default(System.Void)
                            }
                    .Case ("Type"):
                            .Block() {
                                $_ = (System.Object)$current.Type;
                                .Default(System.Void)
                            }
                    .Case ("IsRequired"):
                            .Block() {
                                $_ = (System.Object)$current.IsRequired;
                                .Default(System.Void)
                            }
                    .Case ("IsLoop"):
                            .Block() {
                                $_ = (System.Object)$current.IsLoop;
                                .Default(System.Void)
                            }
                    .Case ("Description"):
                            .Block() {
                                $_ = (System.Object)$current.Description;
                                .Default(System.Void)
                            }
                    .Case ("Remarks"):
                            .Block() {
                                $_ = (System.Object)$current.Remarks;
                                .Default(System.Void)
                            }
                    .Case ("Value"):
                            .Block() {
                                $_ = (System.Object)$current.Value;
                                .Default(System.Void)
                            }
                    .Case ("IsArray"):
                            .Block() {
                                $_ = (System.Object)$current.IsArray;
                                .Default(System.Void)
                            }
                    .Case ("Parent"):
                            .Block() {
                                $_ = (System.Object)$current.Parent;
                                .Default(System.Void)
                            }
                    .Case ("IsEnum"):
                            .Block() {
                                $_ = (System.Object)$current.IsEnum;
                                .Default(System.Void)
                            }
                    .Case ("Children"):
                            .Block() {
                                $_ = (System.Object)$current.Children;
                                .Default(System.Void)
                            }
                    .Default:
                            .Throw .New System.Collections.Generic.KeyNotFoundException(.Call System.String.Concat(
                                    "Cannot found the property or field '",
                                    $name,
                                    "' of 'AspNetCore.ApiDoc.ModelInfo'"))
                    }
                }
            }
        } .Catch (System.Exception $ex) {
            .Throw .New System.Exception(
                .Call System.String.Concat(
                    " Occur error when Get or Set the property or field '",
                    $name,
                    "' of 'AspNetCore.ApiDoc.ModelInfo' "),
                $ex)
        };
        $_
    }
}
2019-05-03 19:07:58.855 +08:00 [INF] Request finished in 509.348ms 200 application/javascript
2019-05-03 19:08:07.517 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/api/Values/Get?id=0  
2019-05-03 19:08:07.598 +08:00 [INF] Executing endpoint 'Dnc.API.Controllers.ValuesController.Get (Dnc.API)'
2019-05-03 19:08:07.617 +08:00 [INF] Route matched with {action = "Get", controller = "Values"}. Executing action Dnc.API.Controllers.ValuesController.Get (Dnc.API)
2019-05-03 19:08:07.637 +08:00 [INF] Executing action method Dnc.API.Controllers.ValuesController.Get (Dnc.API) - Validation state: "Valid"
2019-05-03 19:08:10.929 +08:00 [ERR] 643aa718c90b4b4991faaa42013b5b90
2019-05-03 19:08:11.246 +08:00 [INF] Executed action method Dnc.API.Controllers.ValuesController.Get (Dnc.API), returned result Microsoft.AspNetCore.Mvc.OkObjectResult in 3592.3764ms.
2019-05-03 19:08:11.265 +08:00 [INF] Executing ObjectResult, writing value of type '<>f__AnonymousType0`4[[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[<>f__AnonymousType1`3[[Dnc.API.Models.ABC, Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.IEnumerable`1[[Dnc.API.Models.ABC, Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2019-05-03 19:08:11.412 +08:00 [INF] Executed action Dnc.API.Controllers.ValuesController.Get (Dnc.API) in 3787.6909ms
2019-05-03 19:08:11.416 +08:00 [INF] Executed endpoint 'Dnc.API.Controllers.ValuesController.Get (Dnc.API)'
2019-05-03 19:08:11.418 +08:00 [INF] Request finished in 3900.5981ms 200 application/json; charset=utf-8
2019-05-03 19:09:31.719 +08:00 [DBG] TaskSchedulingThreadPool configured with max concurrency of 10 and TaskScheduler ThreadPoolTaskScheduler.
2019-05-03 19:09:31.960 +08:00 [INF] Initialized Scheduler Signaller of type: Quartz.Core.SchedulerSignalerImpl
2019-05-03 19:09:31.974 +08:00 [INF] Quartz Scheduler v.3.0.7.0 created.
2019-05-03 19:09:31.983 +08:00 [INF] RAMJobStore initialized.
2019-05-03 19:09:31.996 +08:00 [INF] Scheduler meta-data: Quartz Scheduler (v3.0.7.0) 'QuartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'Quartz.Core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'Quartz.Simpl.DefaultThreadPool' - with 10 threads.
  Using job-store 'Quartz.Simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2019-05-03 19:09:32.000 +08:00 [INF] Quartz scheduler 'QuartzScheduler' initialized
2019-05-03 19:09:32.002 +08:00 [INF] Quartz scheduler version: 3.0.7.0
2019-05-03 19:09:36.491 +08:00 [INF] User profile is available. Using 'C:\Users\gainorloss\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2019-05-03 19:09:53.550 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/apidoc  
2019-05-03 19:09:53.689 +08:00 [INF] Request finished in 142.9254ms 404 
2019-05-03 19:10:00.931 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/v1/apidoc  
2019-05-03 19:10:00.954 +08:00 [INF] Request finished in 23.1351ms 200 text/html; charset=utf-8
2019-05-03 19:10:00.973 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/v1/apidoc/docView.min.css?v=636924785771347857  
2019-05-03 19:10:00.973 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/v1/apidoc/jquery.js  
2019-05-03 19:10:00.974 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/v1/apidoc/angular.js  
2019-05-03 19:10:00.975 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/v1/apidoc/docViewData.json?v=636924785771347857  
2019-05-03 19:10:01.016 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/v1/apidoc/docView.min.js?v=636924785771347857  
2019-05-03 19:10:01.031 +08:00 [INF] Request finished in 58.7934ms 200 text/css
2019-05-03 19:10:01.038 +08:00 [INF] Request finished in 21.7741ms 200 application/javascript
2019-05-03 19:10:01.040 +08:00 [INF] Request finished in 66.9299ms 200 application/javascript
2019-05-03 19:10:01.040 +08:00 [INF] Request finished in 67.3849ms 200 application/javascript
2019-05-03 19:10:01.196 +08:00 [INF] FastExpressions For Type: AspNetCore.ApiDoc.Internal.ControllerInformation
.Lambda #Lambda1<System.Func`5[System.Object,System.String,System.Boolean,System.Object,System.Object]>(
    System.Object $@object,
    System.String $name,
    System.Boolean $isAssign,
    System.Object $value) {
    .Block(
        System.Object $_,
        AspNetCore.ApiDoc.Internal.ControllerInformation $current) {
        $_;
        .If ($value != null) {
            $_ = $value
        } .Else {
            .Default(System.Void)
        };
        $current = $@object .As AspNetCore.ApiDoc.Internal.ControllerInformation;
        .Try {
            .Block() {
                .If (
                    $isAssign
                ) {
                    .Switch ($name) {
                    .Case ("IsObsolete"):
                            .Block() {
                                ($current .As AspNetCore.ApiDoc.Internal.Information).IsObsolete = (System.Boolean)$value;
                                .Default(System.Void)
                            }
                    .Case ("Message"):
                            .Block() {
                                ($current .As AspNetCore.ApiDoc.Internal.Information).Message = (System.String)$value;
                                .Default(System.Void)
                            }
                    .Default:
                            .Throw .New System.Collections.Generic.KeyNotFoundException(.Call System.String.Concat(
                                    "Cannot found the property or field '",
                                    $name,
                                    "' of 'AspNetCore.ApiDoc.Internal.ControllerInformation'"))
                    }
                } .Else {
                    .Switch ($name) {
                    .Case ("Id"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Id;
                                .Default(System.Void)
                            }
                    .Case ("Name"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Name;
                                .Default(System.Void)
                            }
                    .Case ("Description"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Description;
                                .Default(System.Void)
                            }
                    .Case ("IsObsolete"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).IsObsolete;
                                .Default(System.Void)
                            }
                    .Case ("Message"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Message;
                                .Default(System.Void)
                            }
                    .Case ("Remarks"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Remarks;
                                .Default(System.Void)
                            }
                    .Case ("Order"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Order;
                                .Default(System.Void)
                            }
                    .Case ("Parent"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Parent;
                                .Default(System.Void)
                            }
                    .Case ("Current"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Current;
                                .Default(System.Void)
                            }
                    .Case ("Childrens"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Childrens;
                                .Default(System.Void)
                            }
                    .Default:
                            .Throw .New System.Collections.Generic.KeyNotFoundException(.Call System.String.Concat(
                                    "Cannot found the property or field '",
                                    $name,
                                    "' of 'AspNetCore.ApiDoc.Internal.ControllerInformation'"))
                    }
                }
            }
        } .Catch (System.Exception $ex) {
            .Throw .New System.Exception(
                .Call System.String.Concat(
                    " Occur error when Get or Set the property or field '",
                    $name,
                    "' of 'AspNetCore.ApiDoc.Internal.ControllerInformation' "),
                $ex)
        };
        $_
    }
}
2019-05-03 19:10:01.289 +08:00 [INF] FastExpressions For Type: AspNetCore.ApiDoc.Internal.ActionInformation
.Lambda #Lambda1<System.Func`5[System.Object,System.String,System.Boolean,System.Object,System.Object]>(
    System.Object $@object,
    System.String $name,
    System.Boolean $isAssign,
    System.Object $value) {
    .Block(
        System.Object $_,
        AspNetCore.ApiDoc.Internal.ActionInformation $current) {
        $_;
        .If ($value != null) {
            $_ = $value
        } .Else {
            .Default(System.Void)
        };
        $current = $@object .As AspNetCore.ApiDoc.Internal.ActionInformation;
        .Try {
            .Block() {
                .If (
                    $isAssign
                ) {
                    .Switch ($name) {
                    .Case ("Request"):
                            .Block() {
                                $current.Request = (System.Collections.Generic.SortedSet`1[AspNetCore.ApiDoc.ModelInfo])$value;
                                .Default(System.Void)
                            }
                    .Case ("RequestExample"):
                            .Block() {
                                $current.RequestExample = (System.Collections.Generic.SortedDictionary`2[System.String,System.Object])$value;
                                .Default(System.Void)
                            }
                    .Case ("Response"):
                            .Block() {
                                $current.Response = (System.Collections.Generic.SortedSet`1[AspNetCore.ApiDoc.ModelInfo])$value;
                                .Default(System.Void)
                            }
                    .Case ("ResponseExample"):
                            .Block() {
                                $current.ResponseExample = (System.Collections.Generic.Dictionary`2[System.String,System.Object])$value;
                                .Default(System.Void)
                            }
                    .Case ("Url"):
                            .Block() {
                                $current.Url = (System.String)$value;
                                .Default(System.Void)
                            }
                    .Case ("Method"):
                            .Block() {
                                $current.Method = (System.String)$value;
                                .Default(System.Void)
                            }
                    .Case ("Id"):
                            .Call .Constant<System.Reflection.RtFieldInfo>(System.String <Id>k__BackingField).SetValue(
                                $current .As AspNetCore.ApiDoc.Internal.Information,
                                $value)
                    .Case ("Name"):
                            .Call .Constant<System.Reflection.RtFieldInfo>(System.String <Name>k__BackingField).SetValue(
                                $current .As AspNetCore.ApiDoc.Internal.Information,
                                $value)
                    .Case ("Description"):
                            .Call .Constant<System.Reflection.RtFieldInfo>(System.String <Description>k__BackingField).SetValue(
                                $current .As AspNetCore.ApiDoc.Internal.Information,
                                $value)
                    .Case ("IsObsolete"):
                            .Block() {
                                ($current .As AspNetCore.ApiDoc.Internal.Information).IsObsolete = (System.Boolean)$value;
                                .Default(System.Void)
                            }
                    .Case ("Message"):
                            .Block() {
                                ($current .As AspNetCore.ApiDoc.Internal.Information).Message = (System.String)$value;
                                .Default(System.Void)
                            }
                    .Case ("Remarks"):
                            .Call .Constant<System.Reflection.RtFieldInfo>(System.String <Remarks>k__BackingField).SetValue(
                                $current .As AspNetCore.ApiDoc.Internal.Information,
                                $value)
                    .Case ("Order"):
                            .Call .Constant<System.Reflection.RtFieldInfo>(Int32 <Order>k__BackingField).SetValue(
                                $current .As AspNetCore.ApiDoc.Internal.Information,
                                $value)
                    .Case ("Parent"):
                            .Call .Constant<System.Reflection.RtFieldInfo>(System.Type <Parent>k__BackingField).SetValue(
                                $current .As AspNetCore.ApiDoc.Internal.Information,
                                $value)
                    .Case ("Current"):
                            .Call .Constant<System.Reflection.RtFieldInfo>(System.Type <Current>k__BackingField).SetValue(
                                $current .As AspNetCore.ApiDoc.Internal.Information,
                                $value)
                    .Case ("Childrens"):
                            .Call .Constant<System.Reflection.RtFieldInfo>(System.Collections.Generic.List`1[AspNetCore.ApiDoc.Internal.Information] <Childrens>k__BackingField).SetValue(
                                $current .As AspNetCore.ApiDoc.Internal.Information,
                                $value)
                    .Case ("_descriptor"):
                            .Block() {
                                $current._descriptor = (AspNetCore.ApiDoc.ApiDocDescriptor)$value;
                                .Default(System.Void)
                            }
                    .Default:
                            .Throw .New System.Collections.Generic.KeyNotFoundException(.Call System.String.Concat(
                                    "Cannot found the property or field '",
                                    $name,
                                    "' of 'AspNetCore.ApiDoc.Internal.ActionInformation'"))
                    }
                } .Else {
                    .Switch ($name) {
                    .Case ("Request"):
                            .Block() {
                                $_ = (System.Object)$current.Request;
                                .Default(System.Void)
                            }
                    .Case ("RequestExample"):
                            .Block() {
                                $_ = (System.Object)$current.RequestExample;
                                .Default(System.Void)
                            }
                    .Case ("Response"):
                            .Block() {
                                $_ = (System.Object)$current.Response;
                                .Default(System.Void)
                            }
                    .Case ("ResponseExample"):
                            .Block() {
                                $_ = (System.Object)$current.ResponseExample;
                                .Default(System.Void)
                            }
                    .Case ("Url"):
                            .Block() {
                                $_ = (System.Object)$current.Url;
                                .Default(System.Void)
                            }
                    .Case ("Method"):
                            .Block() {
                                $_ = (System.Object)$current.Method;
                                .Default(System.Void)
                            }
                    .Case ("Id"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Id;
                                .Default(System.Void)
                            }
                    .Case ("Name"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Name;
                                .Default(System.Void)
                            }
                    .Case ("Description"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Description;
                                .Default(System.Void)
                            }
                    .Case ("IsObsolete"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).IsObsolete;
                                .Default(System.Void)
                            }
                    .Case ("Message"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Message;
                                .Default(System.Void)
                            }
                    .Case ("Remarks"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Remarks;
                                .Default(System.Void)
                            }
                    .Case ("Order"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Order;
                                .Default(System.Void)
                            }
                    .Case ("Parent"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Parent;
                                .Default(System.Void)
                            }
                    .Case ("Current"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Current;
                                .Default(System.Void)
                            }
                    .Case ("Childrens"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Childrens;
                                .Default(System.Void)
                            }
                    .Case ("_descriptor"):
                            .Block() {
                                $_ = (System.Object)$current._descriptor;
                                .Default(System.Void)
                            }
                    .Default:
                            .Throw .New System.Collections.Generic.KeyNotFoundException(.Call System.String.Concat(
                                    "Cannot found the property or field '",
                                    $name,
                                    "' of 'AspNetCore.ApiDoc.Internal.ActionInformation'"))
                    }
                }
            }
        } .Catch (System.Exception $ex) {
            .Throw .New System.Exception(
                .Call System.String.Concat(
                    " Occur error when Get or Set the property or field '",
                    $name,
                    "' of 'AspNetCore.ApiDoc.Internal.ActionInformation' "),
                $ex)
        };
        $_
    }
}
2019-05-03 19:10:01.459 +08:00 [INF] FastExpressions For Type: AspNetCore.ApiDoc.ModelInfo
.Lambda #Lambda1<System.Func`5[System.Object,System.String,System.Boolean,System.Object,System.Object]>(
    System.Object $@object,
    System.String $name,
    System.Boolean $isAssign,
    System.Object $value) {
    .Block(
        System.Object $_,
        AspNetCore.ApiDoc.ModelInfo $current) {
        $_;
        .If ($value != null) {
            $_ = $value
        } .Else {
            .Default(System.Void)
        };
        $current = $@object .As AspNetCore.ApiDoc.ModelInfo;
        .Try {
            .Block() {
                .If (
                    $isAssign
                ) {
                    .Switch ($name) {
                    .Case ("CurrentType"):
                            .Block() {
                                $current.CurrentType = (System.Type)$value;
                                .Default(System.Void)
                            }
                    .Case ("Name"):
                            .Block() {
                                $current.Name = (System.String)$value;
                                .Default(System.Void)
                            }
                    .Case ("Type"):
                            .Block() {
                                $current.Type = (System.String)$value;
                                .Default(System.Void)
                            }
                    .Case ("IsRequired"):
                            .Block() {
                                $current.IsRequired = (System.Boolean)$value;
                                .Default(System.Void)
                            }
                    .Case ("IsLoop"):
                            .Block() {
                                $current.IsLoop = (System.Boolean)$value;
                                .Default(System.Void)
                            }
                    .Case ("Description"):
                            .Block() {
                                $current.Description = (System.String)$value;
                                .Default(System.Void)
                            }
                    .Case ("Remarks"):
                            .Block() {
                                $current.Remarks = (System.String)$value;
                                .Default(System.Void)
                            }
                    .Case ("Value"):
                            .Block() {
                                $current.Value = (System.Object)$value;
                                .Default(System.Void)
                            }
                    .Case ("IsArray"):
                            .Block() {
                                $current.IsArray = (System.Boolean)$value;
                                .Default(System.Void)
                            }
                    .Case ("Parent"):
                            .Block() {
                                $current.Parent = (AspNetCore.ApiDoc.ModelInfo)$value;
                                .Default(System.Void)
                            }
                    .Case ("IsEnum"):
                            .Block() {
                                $current.IsEnum = (System.Boolean)$value;
                                .Default(System.Void)
                            }
                    .Case ("Children"):
                            .Block() {
                                $current.Children = (System.Collections.Generic.SortedSet`1[AspNetCore.ApiDoc.ModelInfo])$value;
                                .Default(System.Void)
                            }
                    .Default:
                            .Throw .New System.Collections.Generic.KeyNotFoundException(.Call System.String.Concat(
                                    "Cannot found the property or field '",
                                    $name,
                                    "' of 'AspNetCore.ApiDoc.ModelInfo'"))
                    }
                } .Else {
                    .Switch ($name) {
                    .Case ("CurrentType"):
                            .Block() {
                                $_ = (System.Object)$current.CurrentType;
                                .Default(System.Void)
                            }
                    .Case ("Name"):
                            .Block() {
                                $_ = (System.Object)$current.Name;
                                .Default(System.Void)
                            }
                    .Case ("Type"):
                            .Block() {
                                $_ = (System.Object)$current.Type;
                                .Default(System.Void)
                            }
                    .Case ("IsRequired"):
                            .Block() {
                                $_ = (System.Object)$current.IsRequired;
                                .Default(System.Void)
                            }
                    .Case ("IsLoop"):
                            .Block() {
                                $_ = (System.Object)$current.IsLoop;
                                .Default(System.Void)
                            }
                    .Case ("Description"):
                            .Block() {
                                $_ = (System.Object)$current.Description;
                                .Default(System.Void)
                            }
                    .Case ("Remarks"):
                            .Block() {
                                $_ = (System.Object)$current.Remarks;
                                .Default(System.Void)
                            }
                    .Case ("Value"):
                            .Block() {
                                $_ = (System.Object)$current.Value;
                                .Default(System.Void)
                            }
                    .Case ("IsArray"):
                            .Block() {
                                $_ = (System.Object)$current.IsArray;
                                .Default(System.Void)
                            }
                    .Case ("Parent"):
                            .Block() {
                                $_ = (System.Object)$current.Parent;
                                .Default(System.Void)
                            }
                    .Case ("IsEnum"):
                            .Block() {
                                $_ = (System.Object)$current.IsEnum;
                                .Default(System.Void)
                            }
                    .Case ("Children"):
                            .Block() {
                                $_ = (System.Object)$current.Children;
                                .Default(System.Void)
                            }
                    .Default:
                            .Throw .New System.Collections.Generic.KeyNotFoundException(.Call System.String.Concat(
                                    "Cannot found the property or field '",
                                    $name,
                                    "' of 'AspNetCore.ApiDoc.ModelInfo'"))
                    }
                }
            }
        } .Catch (System.Exception $ex) {
            .Throw .New System.Exception(
                .Call System.String.Concat(
                    " Occur error when Get or Set the property or field '",
                    $name,
                    "' of 'AspNetCore.ApiDoc.ModelInfo' "),
                $ex)
        };
        $_
    }
}
2019-05-03 19:10:01.541 +08:00 [INF] Request finished in 566.5563ms 200 application/javascript
2019-05-03 19:24:58.338 +08:00 [DBG] TaskSchedulingThreadPool configured with max concurrency of 10 and TaskScheduler ThreadPoolTaskScheduler.
2019-05-03 19:24:58.735 +08:00 [INF] Initialized Scheduler Signaller of type: Quartz.Core.SchedulerSignalerImpl
2019-05-03 19:24:58.749 +08:00 [INF] Quartz Scheduler v.3.0.7.0 created.
2019-05-03 19:24:58.775 +08:00 [INF] RAMJobStore initialized.
2019-05-03 19:24:58.792 +08:00 [INF] Scheduler meta-data: Quartz Scheduler (v3.0.7.0) 'QuartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'Quartz.Core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'Quartz.Simpl.DefaultThreadPool' - with 10 threads.
  Using job-store 'Quartz.Simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2019-05-03 19:24:58.794 +08:00 [INF] Quartz scheduler 'QuartzScheduler' initialized
2019-05-03 19:24:58.796 +08:00 [INF] Quartz scheduler version: 3.0.7.0
2019-05-03 19:25:03.553 +08:00 [INF] User profile is available. Using 'C:\Users\gainorloss\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2019-05-03 19:25:19.932 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/  
2019-05-03 19:25:20.084 +08:00 [INF] Request finished in 151.7076ms 404 
2019-05-03 19:25:25.157 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/swagger  
2019-05-03 19:25:25.162 +08:00 [INF] Request finished in 4.8702ms 301 
2019-05-03 19:25:25.167 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/swagger/index.html  
2019-05-03 19:25:25.465 +08:00 [INF] Request finished in 298.4218ms 200 text/html
2019-05-03 19:25:25.485 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/swagger/swagger-ui.css  
2019-05-03 19:25:25.485 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/swagger/swagger-ui-bundle.js  
2019-05-03 19:25:25.485 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/swagger/swagger-ui-standalone-preset.js  
2019-05-03 19:25:25.585 +08:00 [INF] Sending file. Request path: '/swagger-ui.css'. Physical path: 'N/A'
2019-05-03 19:25:25.585 +08:00 [INF] Sending file. Request path: '/swagger-ui-standalone-preset.js'. Physical path: 'N/A'
2019-05-03 19:25:25.601 +08:00 [INF] Request finished in 115.7451ms 200 application/javascript
2019-05-03 19:25:25.601 +08:00 [INF] Request finished in 116.564ms 200 text/css
2019-05-03 19:25:25.612 +08:00 [INF] Sending file. Request path: '/swagger-ui-bundle.js'. Physical path: 'N/A'
2019-05-03 19:25:25.614 +08:00 [INF] Request finished in 128.908ms 200 application/javascript
2019-05-03 19:25:26.321 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/swagger/favicon-16x16.png  
2019-05-03 19:25:26.323 +08:00 [INF] Sending file. Request path: '/favicon-16x16.png'. Physical path: 'N/A'
2019-05-03 19:25:26.326 +08:00 [INF] Request finished in 5.0269ms 200 image/png
2019-05-03 19:28:40.525 +08:00 [DBG] TaskSchedulingThreadPool configured with max concurrency of 10 and TaskScheduler ThreadPoolTaskScheduler.
2019-05-03 19:28:40.760 +08:00 [INF] Initialized Scheduler Signaller of type: Quartz.Core.SchedulerSignalerImpl
2019-05-03 19:28:40.772 +08:00 [INF] Quartz Scheduler v.3.0.7.0 created.
2019-05-03 19:28:40.782 +08:00 [INF] RAMJobStore initialized.
2019-05-03 19:28:40.798 +08:00 [INF] Scheduler meta-data: Quartz Scheduler (v3.0.7.0) 'QuartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'Quartz.Core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'Quartz.Simpl.DefaultThreadPool' - with 10 threads.
  Using job-store 'Quartz.Simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2019-05-03 19:28:40.802 +08:00 [INF] Quartz scheduler 'QuartzScheduler' initialized
2019-05-03 19:28:40.803 +08:00 [INF] Quartz scheduler version: 3.0.7.0
2019-05-03 19:28:44.818 +08:00 [INF] User profile is available. Using 'C:\Users\gainorloss\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2019-05-03 19:28:48.326 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/swagger/index.html  
2019-05-03 19:28:48.707 +08:00 [INF] Request finished in 383.6191ms 200 text/html
2019-05-03 19:28:49.221 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/swagger/swagger/v1/swagger.json  
2019-05-03 19:28:49.236 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/swagger/favicon-16x16.png  
2019-05-03 19:28:49.251 +08:00 [INF] Sending file. Request path: '/favicon-16x16.png'. Physical path: 'N/A'
2019-05-03 19:28:49.254 +08:00 [INF] Request finished in 18.3333ms 200 image/png
2019-05-03 19:28:49.297 +08:00 [INF] Request finished in 76.733ms 404 
2019-05-03 19:35:24.975 +08:00 [DBG] TaskSchedulingThreadPool configured with max concurrency of 10 and TaskScheduler ThreadPoolTaskScheduler.
2019-05-03 19:35:25.223 +08:00 [INF] Initialized Scheduler Signaller of type: Quartz.Core.SchedulerSignalerImpl
2019-05-03 19:35:25.239 +08:00 [INF] Quartz Scheduler v.3.0.7.0 created.
2019-05-03 19:35:25.251 +08:00 [INF] RAMJobStore initialized.
2019-05-03 19:35:25.268 +08:00 [INF] Scheduler meta-data: Quartz Scheduler (v3.0.7.0) 'QuartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'Quartz.Core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'Quartz.Simpl.DefaultThreadPool' - with 10 threads.
  Using job-store 'Quartz.Simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2019-05-03 19:35:25.271 +08:00 [INF] Quartz scheduler 'QuartzScheduler' initialized
2019-05-03 19:35:25.273 +08:00 [INF] Quartz scheduler version: 3.0.7.0
2019-05-03 19:35:29.508 +08:00 [INF] User profile is available. Using 'C:\Users\gainorloss\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2019-05-03 19:35:41.379 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/swagger/index.html  
2019-05-03 19:37:42.509 +08:00 [DBG] TaskSchedulingThreadPool configured with max concurrency of 10 and TaskScheduler ThreadPoolTaskScheduler.
2019-05-03 19:37:42.752 +08:00 [INF] Initialized Scheduler Signaller of type: Quartz.Core.SchedulerSignalerImpl
2019-05-03 19:37:42.767 +08:00 [INF] Quartz Scheduler v.3.0.7.0 created.
2019-05-03 19:37:42.776 +08:00 [INF] RAMJobStore initialized.
2019-05-03 19:37:42.787 +08:00 [INF] Scheduler meta-data: Quartz Scheduler (v3.0.7.0) 'QuartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'Quartz.Core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'Quartz.Simpl.DefaultThreadPool' - with 10 threads.
  Using job-store 'Quartz.Simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2019-05-03 19:37:42.790 +08:00 [INF] Quartz scheduler 'QuartzScheduler' initialized
2019-05-03 19:37:42.792 +08:00 [INF] Quartz scheduler version: 3.0.7.0
2019-05-03 19:37:47.018 +08:00 [INF] User profile is available. Using 'C:\Users\gainorloss\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2019-05-03 19:37:48.151 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/swagger/index.html  
2019-05-03 19:38:16.694 +08:00 [DBG] TaskSchedulingThreadPool configured with max concurrency of 10 and TaskScheduler ThreadPoolTaskScheduler.
2019-05-03 19:38:16.953 +08:00 [INF] Initialized Scheduler Signaller of type: Quartz.Core.SchedulerSignalerImpl
2019-05-03 19:38:16.966 +08:00 [INF] Quartz Scheduler v.3.0.7.0 created.
2019-05-03 19:38:16.976 +08:00 [INF] RAMJobStore initialized.
2019-05-03 19:38:16.987 +08:00 [INF] Scheduler meta-data: Quartz Scheduler (v3.0.7.0) 'QuartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'Quartz.Core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'Quartz.Simpl.DefaultThreadPool' - with 10 threads.
  Using job-store 'Quartz.Simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2019-05-03 19:38:16.990 +08:00 [INF] Quartz scheduler 'QuartzScheduler' initialized
2019-05-03 19:38:16.992 +08:00 [INF] Quartz scheduler version: 3.0.7.0
2019-05-03 19:38:21.467 +08:00 [INF] User profile is available. Using 'C:\Users\gainorloss\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2019-05-03 19:38:24.080 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/swagger/index.html  
2019-05-03 19:38:24.540 +08:00 [INF] Request finished in 462.626ms 200 text/html
2019-05-03 19:38:25.160 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/swagger/swagger/v1/swagger.json  
2019-05-03 19:38:25.240 +08:00 [INF] Request finished in 79.6641ms 404 
2019-05-03 19:39:32.117 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/swagger/  
2019-05-03 19:39:32.141 +08:00 [INF] Request finished in 24.4822ms 301 
2019-05-03 19:39:32.159 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/swagger/index.html  
2019-05-03 19:39:32.162 +08:00 [INF] Request finished in 2.4122ms 200 text/html
2019-05-03 19:39:32.571 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/swagger/swagger/v1/swagger.json  
2019-05-03 19:39:32.573 +08:00 [INF] Request finished in 2.2115ms 404 
2019-05-03 19:40:29.822 +08:00 [DBG] TaskSchedulingThreadPool configured with max concurrency of 10 and TaskScheduler ThreadPoolTaskScheduler.
2019-05-03 19:40:30.072 +08:00 [INF] Initialized Scheduler Signaller of type: Quartz.Core.SchedulerSignalerImpl
2019-05-03 19:40:30.093 +08:00 [INF] Quartz Scheduler v.3.0.7.0 created.
2019-05-03 19:40:30.101 +08:00 [INF] RAMJobStore initialized.
2019-05-03 19:40:30.114 +08:00 [INF] Scheduler meta-data: Quartz Scheduler (v3.0.7.0) 'QuartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'Quartz.Core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'Quartz.Simpl.DefaultThreadPool' - with 10 threads.
  Using job-store 'Quartz.Simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2019-05-03 19:40:30.118 +08:00 [INF] Quartz scheduler 'QuartzScheduler' initialized
2019-05-03 19:40:30.120 +08:00 [INF] Quartz scheduler version: 3.0.7.0
2019-05-03 19:40:34.286 +08:00 [INF] User profile is available. Using 'C:\Users\gainorloss\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2019-05-03 19:40:35.326 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/swagger/index.html  
2019-05-03 19:40:35.768 +08:00 [INF] Request finished in 443.9999ms 200 text/html
2019-05-03 19:40:36.138 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/swagger/v1/swagger.json  
2019-05-03 19:40:36.146 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/swagger/favicon-16x16.png  
2019-05-03 19:40:36.181 +08:00 [INF] Sending file. Request path: '/favicon-16x16.png'. Physical path: 'N/A'
2019-05-03 19:40:36.184 +08:00 [INF] Request finished in 38.13ms 200 image/png
2019-05-03 19:40:36.397 +08:00 [INF] Request finished in 259.1404ms 200 application/json;charset=utf-8
2019-05-03 19:41:40.648 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/swagger/v1/swagger.json  
2019-05-03 19:41:40.652 +08:00 [INF] Request finished in 3.41ms 200 application/json;charset=utf-8
2019-05-03 19:41:53.139 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/api/Values/Get  
2019-05-03 19:41:53.193 +08:00 [INF] Executing endpoint 'Dnc.API.Controllers.ValuesController.Get (Dnc.API)'
2019-05-03 19:41:53.216 +08:00 [INF] Route matched with {action = "Get", controller = "Values"}. Executing action Dnc.API.Controllers.ValuesController.Get (Dnc.API)
2019-05-03 19:41:53.381 +08:00 [INF] Executing action method Dnc.API.Controllers.ValuesController.Get (Dnc.API) - Validation state: "Valid"
2019-05-03 19:41:53.394 +08:00 [DBG] aha
2019-05-03 19:41:53.548 +08:00 [DBG] redis:gainorloss
2019-05-03 19:41:56.596 +08:00 [DBG] redis:gainorloss
2019-05-03 19:41:56.709 +08:00 [DBG] redis:gainorloss
2019-05-03 19:41:56.711 +08:00 [ERR] e198ca1a037a45499010aa420144a187
2019-05-03 19:41:57.106 +08:00 [INF] Executed action method Dnc.API.Controllers.ValuesController.Get (Dnc.API), returned result Microsoft.AspNetCore.Mvc.OkObjectResult in 3708.9475ms.
2019-05-03 19:41:57.126 +08:00 [INF] Executing ObjectResult, writing value of type '<>f__AnonymousType0`4[[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[<>f__AnonymousType1`3[[Dnc.API.Models.ABC, Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.IEnumerable`1[[Dnc.API.Models.ABC, Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2019-05-03 19:41:57.217 +08:00 [INF] Executed action Dnc.API.Controllers.ValuesController.Get (Dnc.API) in 3990.7751000000003ms
2019-05-03 19:41:57.220 +08:00 [INF] Executed endpoint 'Dnc.API.Controllers.ValuesController.Get (Dnc.API)'
2019-05-03 19:41:57.224 +08:00 [INF] Request finished in 4084.131ms 200 application/json; charset=utf-8
2019-05-03 19:42:03.608 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/api/Values/Get  
2019-05-03 19:42:03.612 +08:00 [INF] Executing endpoint 'Dnc.API.Controllers.ValuesController.Get (Dnc.API)'
2019-05-03 19:42:03.614 +08:00 [INF] Route matched with {action = "Get", controller = "Values"}. Executing action Dnc.API.Controllers.ValuesController.Get (Dnc.API)
2019-05-03 19:42:03.654 +08:00 [INF] Executing action method Dnc.API.Controllers.ValuesController.Get (Dnc.API) - Validation state: "Valid"
2019-05-03 19:42:03.656 +08:00 [DBG] aha
2019-05-03 19:42:03.700 +08:00 [DBG] redis:gainorloss
2019-05-03 19:42:06.745 +08:00 [DBG] redis:gainorloss
2019-05-03 19:42:06.749 +08:00 [DBG] redis:gainorloss
2019-05-03 19:42:06.750 +08:00 [ERR] 70518a86c9fd465e8064aa420144ad4a
2019-05-03 19:42:06.796 +08:00 [INF] Executed action method Dnc.API.Controllers.ValuesController.Get (Dnc.API), returned result Microsoft.AspNetCore.Mvc.OkObjectResult in 3139.9183000000003ms.
2019-05-03 19:42:06.802 +08:00 [INF] Executing ObjectResult, writing value of type '<>f__AnonymousType0`4[[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[<>f__AnonymousType1`3[[Dnc.API.Models.ABC, Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.IEnumerable`1[[Dnc.API.Models.ABC, Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2019-05-03 19:42:06.810 +08:00 [INF] Executed action Dnc.API.Controllers.ValuesController.Get (Dnc.API) in 3189.2324000000003ms
2019-05-03 19:42:06.813 +08:00 [INF] Executed endpoint 'Dnc.API.Controllers.ValuesController.Get (Dnc.API)'
2019-05-03 19:42:06.818 +08:00 [INF] Request finished in 3210.0145ms 200 application/json; charset=utf-8
2019-05-03 19:42:45.049 +08:00 [DBG] TaskSchedulingThreadPool configured with max concurrency of 10 and TaskScheduler ThreadPoolTaskScheduler.
2019-05-03 19:42:45.344 +08:00 [INF] Initialized Scheduler Signaller of type: Quartz.Core.SchedulerSignalerImpl
2019-05-03 19:42:45.358 +08:00 [INF] Quartz Scheduler v.3.0.7.0 created.
2019-05-03 19:42:45.370 +08:00 [INF] RAMJobStore initialized.
2019-05-03 19:42:45.387 +08:00 [INF] Scheduler meta-data: Quartz Scheduler (v3.0.7.0) 'QuartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'Quartz.Core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'Quartz.Simpl.DefaultThreadPool' - with 10 threads.
  Using job-store 'Quartz.Simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2019-05-03 19:42:45.391 +08:00 [INF] Quartz scheduler 'QuartzScheduler' initialized
2019-05-03 19:42:45.392 +08:00 [INF] Quartz scheduler version: 3.0.7.0
2019-05-03 19:42:50.175 +08:00 [INF] User profile is available. Using 'C:\Users\gainorloss\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2019-05-03 19:43:25.862 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/api/Values/Get?id=0  
2019-05-03 19:43:25.968 +08:00 [INF] Executing endpoint 'Dnc.API.Controllers.ValuesController.Get (Dnc.API)'
2019-05-03 19:43:25.994 +08:00 [INF] Route matched with {action = "Get", controller = "Values"}. Executing action Dnc.API.Controllers.ValuesController.Get (Dnc.API)
2019-05-03 19:43:26.011 +08:00 [INF] Executing action method Dnc.API.Controllers.ValuesController.Get (Dnc.API) - Validation state: "Valid"
2019-05-03 19:43:29.298 +08:00 [ERR] 39d097010caf410ea0c9aa4201450e07
2019-05-03 19:43:29.646 +08:00 [INF] Executed action method Dnc.API.Controllers.ValuesController.Get (Dnc.API), returned result Microsoft.AspNetCore.Mvc.OkObjectResult in 3619.5107000000003ms.
2019-05-03 19:43:29.667 +08:00 [INF] Executing ObjectResult, writing value of type '<>f__AnonymousType0`4[[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[<>f__AnonymousType1`3[[Dnc.API.Models.ABC, Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.IEnumerable`1[[Dnc.API.Models.ABC, Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2019-05-03 19:43:29.808 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/api/Values/Get?id=0  
2019-05-03 19:43:29.812 +08:00 [INF] Executing endpoint 'Dnc.API.Controllers.ValuesController.Get (Dnc.API)'
2019-05-03 19:43:29.815 +08:00 [INF] Route matched with {action = "Get", controller = "Values"}. Executing action Dnc.API.Controllers.ValuesController.Get (Dnc.API)
2019-05-03 19:43:29.818 +08:00 [INF] Executing action method Dnc.API.Controllers.ValuesController.Get (Dnc.API) - Validation state: "Valid"
2019-05-03 19:43:29.863 +08:00 [INF] Executed action Dnc.API.Controllers.ValuesController.Get (Dnc.API) in 3860.7455ms
2019-05-03 19:43:29.868 +08:00 [INF] Executed endpoint 'Dnc.API.Controllers.ValuesController.Get (Dnc.API)'
2019-05-03 19:43:29.878 +08:00 [INF] Request finished in 4018.9688ms 200 application/json; charset=utf-8
2019-05-03 19:43:32.910 +08:00 [ERR] b8eeffc9a62d42299f2eaa4201451243
2019-05-03 19:43:32.962 +08:00 [INF] Executed action method Dnc.API.Controllers.ValuesController.Get (Dnc.API), returned result Microsoft.AspNetCore.Mvc.OkObjectResult in 3140.3794000000003ms.
2019-05-03 19:43:32.967 +08:00 [INF] Executing ObjectResult, writing value of type '<>f__AnonymousType0`4[[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[<>f__AnonymousType1`3[[Dnc.API.Models.ABC, Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.IEnumerable`1[[Dnc.API.Models.ABC, Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2019-05-03 19:43:32.977 +08:00 [INF] Executed action Dnc.API.Controllers.ValuesController.Get (Dnc.API) in 3158.9335ms
2019-05-03 19:43:32.979 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/api/Values/Get?id=0  
2019-05-03 19:43:32.979 +08:00 [INF] Executed endpoint 'Dnc.API.Controllers.ValuesController.Get (Dnc.API)'
2019-05-03 19:43:32.981 +08:00 [INF] Executing endpoint 'Dnc.API.Controllers.ValuesController.Get (Dnc.API)'
2019-05-03 19:43:32.984 +08:00 [INF] Request finished in 3175.2537ms 200 application/json; charset=utf-8
2019-05-03 19:43:32.987 +08:00 [INF] Route matched with {action = "Get", controller = "Values"}. Executing action Dnc.API.Controllers.ValuesController.Get (Dnc.API)
2019-05-03 19:43:32.993 +08:00 [INF] Executing action method Dnc.API.Controllers.ValuesController.Get (Dnc.API) - Validation state: "Valid"
2019-05-03 19:43:36.086 +08:00 [ERR] 8f98b980e73d41688c9faa42014515fb
2019-05-03 19:43:36.129 +08:00 [INF] Executed action method Dnc.API.Controllers.ValuesController.Get (Dnc.API), returned result Microsoft.AspNetCore.Mvc.OkObjectResult in 3132.9737ms.
2019-05-03 19:43:36.133 +08:00 [INF] Executing ObjectResult, writing value of type '<>f__AnonymousType0`4[[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[<>f__AnonymousType1`3[[Dnc.API.Models.ABC, Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.IEnumerable`1[[Dnc.API.Models.ABC, Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2019-05-03 19:43:36.142 +08:00 [INF] Executed action Dnc.API.Controllers.ValuesController.Get (Dnc.API) in 3148.7726000000002ms
2019-05-03 19:43:36.144 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/api/Values/Get?id=0  
2019-05-03 19:43:36.145 +08:00 [INF] Executed endpoint 'Dnc.API.Controllers.ValuesController.Get (Dnc.API)'
2019-05-03 19:43:36.146 +08:00 [INF] Executing endpoint 'Dnc.API.Controllers.ValuesController.Get (Dnc.API)'
2019-05-03 19:43:36.150 +08:00 [INF] Request finished in 3171.4932ms 200 application/json; charset=utf-8
2019-05-03 19:43:36.154 +08:00 [INF] Route matched with {action = "Get", controller = "Values"}. Executing action Dnc.API.Controllers.ValuesController.Get (Dnc.API)
2019-05-03 19:43:36.160 +08:00 [INF] Executing action method Dnc.API.Controllers.ValuesController.Get (Dnc.API) - Validation state: "Valid"
2019-05-03 19:43:39.254 +08:00 [ERR] d7901d368827452fb135aa42014519b2
2019-05-03 19:43:39.298 +08:00 [INF] Executed action method Dnc.API.Controllers.ValuesController.Get (Dnc.API), returned result Microsoft.AspNetCore.Mvc.OkObjectResult in 3133.5383ms.
2019-05-03 19:43:39.303 +08:00 [INF] Executing ObjectResult, writing value of type '<>f__AnonymousType0`4[[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[<>f__AnonymousType1`3[[Dnc.API.Models.ABC, Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.IEnumerable`1[[Dnc.API.Models.ABC, Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2019-05-03 19:43:39.313 +08:00 [INF] Executed action Dnc.API.Controllers.ValuesController.Get (Dnc.API) in 3153.0475ms
2019-05-03 19:43:39.315 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/api/Values/Get?id=0  
2019-05-03 19:43:39.316 +08:00 [INF] Executed endpoint 'Dnc.API.Controllers.ValuesController.Get (Dnc.API)'
2019-05-03 19:43:39.320 +08:00 [INF] Executing endpoint 'Dnc.API.Controllers.ValuesController.Get (Dnc.API)'
2019-05-03 19:43:39.322 +08:00 [INF] Request finished in 3178.3502ms 200 application/json; charset=utf-8
2019-05-03 19:43:39.325 +08:00 [INF] Route matched with {action = "Get", controller = "Values"}. Executing action Dnc.API.Controllers.ValuesController.Get (Dnc.API)
2019-05-03 19:43:39.335 +08:00 [INF] Executing action method Dnc.API.Controllers.ValuesController.Get (Dnc.API) - Validation state: "Valid"
2019-05-03 19:43:42.430 +08:00 [ERR] 5e8d7c6960a64fcb9221aa4201451d6b
2019-05-03 19:43:42.469 +08:00 [INF] Executed action method Dnc.API.Controllers.ValuesController.Get (Dnc.API), returned result Microsoft.AspNetCore.Mvc.OkObjectResult in 3128.6766000000002ms.
2019-05-03 19:43:42.472 +08:00 [INF] Executing ObjectResult, writing value of type '<>f__AnonymousType0`4[[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[<>f__AnonymousType1`3[[Dnc.API.Models.ABC, Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.IEnumerable`1[[Dnc.API.Models.ABC, Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2019-05-03 19:43:42.481 +08:00 [INF] Executed action Dnc.API.Controllers.ValuesController.Get (Dnc.API) in 3145.7128000000002ms
2019-05-03 19:43:42.483 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/api/Values/Get?id=0  
2019-05-03 19:43:42.484 +08:00 [INF] Executed endpoint 'Dnc.API.Controllers.ValuesController.Get (Dnc.API)'
2019-05-03 19:43:42.485 +08:00 [INF] Executing endpoint 'Dnc.API.Controllers.ValuesController.Get (Dnc.API)'
2019-05-03 19:43:42.487 +08:00 [INF] Request finished in 3171.9328ms 200 application/json; charset=utf-8
2019-05-03 19:43:42.491 +08:00 [INF] Route matched with {action = "Get", controller = "Values"}. Executing action Dnc.API.Controllers.ValuesController.Get (Dnc.API)
2019-05-03 19:43:42.496 +08:00 [INF] Executing action method Dnc.API.Controllers.ValuesController.Get (Dnc.API) - Validation state: "Valid"
2019-05-03 19:43:45.592 +08:00 [ERR] 3763a8f1a2e84c26ad91aa420145211f
2019-05-03 19:43:45.630 +08:00 [INF] Executed action method Dnc.API.Controllers.ValuesController.Get (Dnc.API), returned result Microsoft.AspNetCore.Mvc.OkObjectResult in 3129.1446ms.
2019-05-03 19:43:45.634 +08:00 [INF] Executing ObjectResult, writing value of type '<>f__AnonymousType0`4[[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[<>f__AnonymousType1`3[[Dnc.API.Models.ABC, Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.IEnumerable`1[[Dnc.API.Models.ABC, Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2019-05-03 19:43:45.640 +08:00 [INF] Executed action Dnc.API.Controllers.ValuesController.Get (Dnc.API) in 3144.0498000000002ms
2019-05-03 19:43:45.642 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/api/Values/Get?id=0  
2019-05-03 19:43:45.645 +08:00 [INF] Executed endpoint 'Dnc.API.Controllers.ValuesController.Get (Dnc.API)'
2019-05-03 19:43:45.647 +08:00 [INF] Executing endpoint 'Dnc.API.Controllers.ValuesController.Get (Dnc.API)'
2019-05-03 19:43:45.650 +08:00 [INF] Request finished in 3167.3546ms 200 application/json; charset=utf-8
2019-05-03 19:43:45.654 +08:00 [INF] Route matched with {action = "Get", controller = "Values"}. Executing action Dnc.API.Controllers.ValuesController.Get (Dnc.API)
2019-05-03 19:43:45.659 +08:00 [INF] Executing action method Dnc.API.Controllers.ValuesController.Get (Dnc.API) - Validation state: "Valid"
2019-05-03 19:43:48.751 +08:00 [ERR] aed0bffdc1b14c24b41eaa42014524d3
2019-05-03 19:43:48.794 +08:00 [INF] Executed action method Dnc.API.Controllers.ValuesController.Get (Dnc.API), returned result Microsoft.AspNetCore.Mvc.OkObjectResult in 3132.7096ms.
2019-05-03 19:43:48.799 +08:00 [INF] Executing ObjectResult, writing value of type '<>f__AnonymousType0`4[[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[<>f__AnonymousType1`3[[Dnc.API.Models.ABC, Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.IEnumerable`1[[Dnc.API.Models.ABC, Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2019-05-03 19:43:48.808 +08:00 [INF] Executed action Dnc.API.Controllers.ValuesController.Get (Dnc.API) in 3148.7940000000003ms
2019-05-03 19:43:48.809 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/api/Values/Get?id=0  
2019-05-03 19:43:48.810 +08:00 [INF] Executed endpoint 'Dnc.API.Controllers.ValuesController.Get (Dnc.API)'
2019-05-03 19:43:48.812 +08:00 [INF] Executing endpoint 'Dnc.API.Controllers.ValuesController.Get (Dnc.API)'
2019-05-03 19:43:48.815 +08:00 [INF] Request finished in 3173.0882ms 200 application/json; charset=utf-8
2019-05-03 19:43:48.820 +08:00 [INF] Route matched with {action = "Get", controller = "Values"}. Executing action Dnc.API.Controllers.ValuesController.Get (Dnc.API)
2019-05-03 19:43:48.824 +08:00 [INF] Executing action method Dnc.API.Controllers.ValuesController.Get (Dnc.API) - Validation state: "Valid"
2019-05-03 19:43:49.563 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/api/Values/Get?id=0  
2019-05-03 19:43:49.565 +08:00 [INF] Executing endpoint 'Dnc.API.Controllers.ValuesController.Get (Dnc.API)'
2019-05-03 19:43:49.568 +08:00 [INF] Route matched with {action = "Get", controller = "Values"}. Executing action Dnc.API.Controllers.ValuesController.Get (Dnc.API)
2019-05-03 19:43:49.570 +08:00 [INF] Executing action method Dnc.API.Controllers.ValuesController.Get (Dnc.API) - Validation state: "Valid"
2019-05-03 19:43:49.749 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/api/Values/Get?id=0  
2019-05-03 19:43:49.751 +08:00 [INF] Executing endpoint 'Dnc.API.Controllers.ValuesController.Get (Dnc.API)'
2019-05-03 19:43:49.753 +08:00 [INF] Route matched with {action = "Get", controller = "Values"}. Executing action Dnc.API.Controllers.ValuesController.Get (Dnc.API)
2019-05-03 19:43:49.757 +08:00 [INF] Executing action method Dnc.API.Controllers.ValuesController.Get (Dnc.API) - Validation state: "Valid"
2019-05-03 19:43:49.941 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/api/Values/Get?id=0  
2019-05-03 19:43:49.942 +08:00 [INF] Executing endpoint 'Dnc.API.Controllers.ValuesController.Get (Dnc.API)'
2019-05-03 19:43:49.944 +08:00 [INF] Route matched with {action = "Get", controller = "Values"}. Executing action Dnc.API.Controllers.ValuesController.Get (Dnc.API)
2019-05-03 19:43:49.947 +08:00 [INF] Executing action method Dnc.API.Controllers.ValuesController.Get (Dnc.API) - Validation state: "Valid"
2019-05-03 19:43:51.920 +08:00 [ERR] 5576b640f50845879033aa420145288a
2019-05-03 19:43:51.966 +08:00 [INF] Executed action method Dnc.API.Controllers.ValuesController.Get (Dnc.API), returned result Microsoft.AspNetCore.Mvc.OkObjectResult in 3138.1582000000003ms.
2019-05-03 19:43:51.971 +08:00 [INF] Executing ObjectResult, writing value of type '<>f__AnonymousType0`4[[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[<>f__AnonymousType1`3[[Dnc.API.Models.ABC, Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.IEnumerable`1[[Dnc.API.Models.ABC, Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2019-05-03 19:43:51.982 +08:00 [INF] Executed action Dnc.API.Controllers.ValuesController.Get (Dnc.API) in 3157.322ms
2019-05-03 19:43:51.985 +08:00 [INF] Executed endpoint 'Dnc.API.Controllers.ValuesController.Get (Dnc.API)'
2019-05-03 19:43:51.990 +08:00 [INF] Request finished in 3180.1442ms 200 application/json; charset=utf-8
2019-05-03 19:43:52.666 +08:00 [ERR] e6cd83ffa9b145678517aa420145296a
2019-05-03 19:43:52.715 +08:00 [INF] Executed action method Dnc.API.Controllers.ValuesController.Get (Dnc.API), returned result Microsoft.AspNetCore.Mvc.OkObjectResult in 3141.6567ms.
2019-05-03 19:43:52.724 +08:00 [INF] Executing ObjectResult, writing value of type '<>f__AnonymousType0`4[[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[<>f__AnonymousType1`3[[Dnc.API.Models.ABC, Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.IEnumerable`1[[Dnc.API.Models.ABC, Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2019-05-03 19:43:52.735 +08:00 [INF] Executed action Dnc.API.Controllers.ValuesController.Get (Dnc.API) in 3164.6658ms
2019-05-03 19:43:52.741 +08:00 [INF] Executed endpoint 'Dnc.API.Controllers.ValuesController.Get (Dnc.API)'
2019-05-03 19:43:52.743 +08:00 [INF] Request finished in 3180.8452ms 200 application/json; charset=utf-8
2019-05-03 19:43:52.851 +08:00 [ERR] c1021d8b14db44dd88ceaa42014529a1
2019-05-03 19:43:52.890 +08:00 [INF] Executed action method Dnc.API.Controllers.ValuesController.Get (Dnc.API), returned result Microsoft.AspNetCore.Mvc.OkObjectResult in 3129.8515ms.
2019-05-03 19:43:52.894 +08:00 [INF] Executing ObjectResult, writing value of type '<>f__AnonymousType0`4[[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[<>f__AnonymousType1`3[[Dnc.API.Models.ABC, Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.IEnumerable`1[[Dnc.API.Models.ABC, Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2019-05-03 19:43:52.967 +08:00 [INF] Executed action Dnc.API.Controllers.ValuesController.Get (Dnc.API) in 3210.4258ms
2019-05-03 19:43:52.970 +08:00 [INF] Executed endpoint 'Dnc.API.Controllers.ValuesController.Get (Dnc.API)'
2019-05-03 19:43:52.972 +08:00 [INF] Request finished in 3223.6919ms 200 application/json; charset=utf-8
2019-05-03 19:43:53.037 +08:00 [ERR] 8c021f91279249aa92feaa42014529d9
2019-05-03 19:43:53.077 +08:00 [INF] Executed action method Dnc.API.Controllers.ValuesController.Get (Dnc.API), returned result Microsoft.AspNetCore.Mvc.OkObjectResult in 3127.6895ms.
2019-05-03 19:43:53.082 +08:00 [INF] Executing ObjectResult, writing value of type '<>f__AnonymousType0`4[[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[<>f__AnonymousType1`3[[Dnc.API.Models.ABC, Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.IEnumerable`1[[Dnc.API.Models.ABC, Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2019-05-03 19:43:53.087 +08:00 [INF] Executed action Dnc.API.Controllers.ValuesController.Get (Dnc.API) in 3140.0829000000003ms
2019-05-03 19:43:53.091 +08:00 [INF] Executed endpoint 'Dnc.API.Controllers.ValuesController.Get (Dnc.API)'
2019-05-03 19:43:53.093 +08:00 [INF] Request finished in 3152.3872ms 200 application/json; charset=utf-8
2019-05-03 19:44:28.810 +08:00 [DBG] TaskSchedulingThreadPool configured with max concurrency of 10 and TaskScheduler ThreadPoolTaskScheduler.
2019-05-03 19:44:29.030 +08:00 [INF] Initialized Scheduler Signaller of type: Quartz.Core.SchedulerSignalerImpl
2019-05-03 19:44:29.052 +08:00 [INF] Quartz Scheduler v.3.0.7.0 created.
2019-05-03 19:44:29.062 +08:00 [INF] RAMJobStore initialized.
2019-05-03 19:44:29.076 +08:00 [INF] Scheduler meta-data: Quartz Scheduler (v3.0.7.0) 'QuartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'Quartz.Core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'Quartz.Simpl.DefaultThreadPool' - with 10 threads.
  Using job-store 'Quartz.Simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2019-05-03 19:44:29.079 +08:00 [INF] Quartz scheduler 'QuartzScheduler' initialized
2019-05-03 19:44:29.081 +08:00 [INF] Quartz scheduler version: 3.0.7.0
2019-05-03 19:44:33.106 +08:00 [INF] User profile is available. Using 'C:\Users\gainorloss\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2019-05-03 19:44:41.569 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/swagger/index.html  
2019-05-03 19:44:42.006 +08:00 [INF] Request finished in 438.8838ms 200 text/html
2019-05-03 19:44:42.406 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/swagger/v1/swagger.json  
2019-05-03 19:44:42.640 +08:00 [INF] Request finished in 234.106ms 200 application/json;charset=utf-8
2019-05-03 19:44:52.288 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/api/Values/Get  
2019-05-03 19:44:52.410 +08:00 [INF] Executing endpoint 'Dnc.API.Controllers.ValuesController.Get (Dnc.API)'
2019-05-03 19:44:52.434 +08:00 [INF] Route matched with {action = "Get", controller = "Values"}. Executing action Dnc.API.Controllers.ValuesController.Get (Dnc.API)
2019-05-03 19:44:52.572 +08:00 [INF] Executing action method Dnc.API.Controllers.ValuesController.Get (Dnc.API) - Validation state: "Valid"
2019-05-03 19:44:52.585 +08:00 [DBG] aha
2019-05-03 19:44:52.703 +08:00 [DBG] redis:gainorloss
2019-05-03 19:44:55.749 +08:00 [DBG] redis:gainorloss
2019-05-03 19:44:55.868 +08:00 [DBG] redis:gainorloss
2019-05-03 19:44:55.869 +08:00 [ERR] 30afe5ec82cd4b2aac7aaa420145737a
2019-05-03 19:44:56.144 +08:00 [INF] Executed action method Dnc.API.Controllers.ValuesController.Get (Dnc.API), returned result Microsoft.AspNetCore.Mvc.OkObjectResult in 3557.5539000000003ms.
2019-05-03 19:44:56.162 +08:00 [INF] Executing ObjectResult, writing value of type '<>f__AnonymousType0`4[[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[<>f__AnonymousType1`3[[Dnc.API.Models.ABC, Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.IEnumerable`1[[Dnc.API.Models.ABC, Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2019-05-03 19:44:56.251 +08:00 [INF] Executed action Dnc.API.Controllers.ValuesController.Get (Dnc.API) in 3807.5858000000003ms
2019-05-03 19:44:56.253 +08:00 [INF] Executed endpoint 'Dnc.API.Controllers.ValuesController.Get (Dnc.API)'
2019-05-03 19:44:56.255 +08:00 [INF] Request finished in 3967.1502ms 200 application/json; charset=utf-8
