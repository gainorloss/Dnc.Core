2019-05-03 18:57:38.564 +08:00 [DBG] TaskSchedulingThreadPool configured with max concurrency of 10 and TaskScheduler ThreadPoolTaskScheduler.
2019-05-03 18:57:38.922 +08:00 [INF] Initialized Scheduler Signaller of type: Quartz.Core.SchedulerSignalerImpl
2019-05-03 18:57:38.928 +08:00 [INF] Quartz Scheduler v.3.0.7.0 created.
2019-05-03 18:57:38.979 +08:00 [INF] RAMJobStore initialized.
2019-05-03 18:57:38.995 +08:00 [INF] Scheduler meta-data: Quartz Scheduler (v3.0.7.0) 'QuartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'Quartz.Core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'Quartz.Simpl.DefaultThreadPool' - with 10 threads.
  Using job-store 'Quartz.Simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2019-05-03 18:57:38.999 +08:00 [INF] Quartz scheduler 'QuartzScheduler' initialized
2019-05-03 18:57:39.007 +08:00 [INF] Quartz scheduler version: 3.0.7.0
2019-05-03 18:57:48.554 +08:00 [INF] User profile is available. Using 'C:\Users\gainorloss\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2019-05-03 18:57:58.958 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/  
2019-05-03 18:57:59.171 +08:00 [INF] Request finished in 214.0059ms 404 
2019-05-03 18:58:12.443 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/apidoc  
2019-05-03 18:58:12.472 +08:00 [INF] Request finished in 29.6461ms 200 text/html; charset=utf-8
2019-05-03 18:58:12.492 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/apidoc/docView.min.css?v=636924778697984862  
2019-05-03 18:58:12.498 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/apidoc/docViewData.json?v=636924778697984862  
2019-05-03 18:58:12.512 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/apidoc/jquery.js  
2019-05-03 18:58:12.498 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/apidoc/angular.js  
2019-05-03 18:58:12.513 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/apidoc/docView.min.js?v=636924778697984862  
2019-05-03 18:58:12.513 +08:00 [INF] Request finished in 21.2205ms 200 text/css
2019-05-03 18:58:12.519 +08:00 [INF] Request finished in 6.054ms 200 application/javascript
2019-05-03 18:58:12.527 +08:00 [INF] Request finished in 15.0548ms 200 application/javascript
2019-05-03 18:58:12.527 +08:00 [INF] Request finished in 30.7733ms 200 application/javascript
2019-05-03 18:58:12.675 +08:00 [INF] FastExpressions For Type: AspNetCore.ApiDoc.Internal.ControllerInformation
.Lambda #Lambda1<System.Func`5[System.Object,System.String,System.Boolean,System.Object,System.Object]>(
    System.Object $@object,
    System.String $name,
    System.Boolean $isAssign,
    System.Object $value) {
    .Block(
        System.Object $_,
        AspNetCore.ApiDoc.Internal.ControllerInformation $current) {
        $_;
        .If ($value != null) {
            $_ = $value
        } .Else {
            .Default(System.Void)
        };
        $current = $@object .As AspNetCore.ApiDoc.Internal.ControllerInformation;
        .Try {
            .Block() {
                .If (
                    $isAssign
                ) {
                    .Switch ($name) {
                    .Case ("IsObsolete"):
                            .Block() {
                                ($current .As AspNetCore.ApiDoc.Internal.Information).IsObsolete = (System.Boolean)$value;
                                .Default(System.Void)
                            }
                    .Case ("Message"):
                            .Block() {
                                ($current .As AspNetCore.ApiDoc.Internal.Information).Message = (System.String)$value;
                                .Default(System.Void)
                            }
                    .Default:
                            .Throw .New System.Collections.Generic.KeyNotFoundException(.Call System.String.Concat(
                                    "Cannot found the property or field '",
                                    $name,
                                    "' of 'AspNetCore.ApiDoc.Internal.ControllerInformation'"))
                    }
                } .Else {
                    .Switch ($name) {
                    .Case ("Id"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Id;
                                .Default(System.Void)
                            }
                    .Case ("Name"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Name;
                                .Default(System.Void)
                            }
                    .Case ("Description"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Description;
                                .Default(System.Void)
                            }
                    .Case ("IsObsolete"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).IsObsolete;
                                .Default(System.Void)
                            }
                    .Case ("Message"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Message;
                                .Default(System.Void)
                            }
                    .Case ("Remarks"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Remarks;
                                .Default(System.Void)
                            }
                    .Case ("Order"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Order;
                                .Default(System.Void)
                            }
                    .Case ("Parent"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Parent;
                                .Default(System.Void)
                            }
                    .Case ("Current"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Current;
                                .Default(System.Void)
                            }
                    .Case ("Childrens"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Childrens;
                                .Default(System.Void)
                            }
                    .Default:
                            .Throw .New System.Collections.Generic.KeyNotFoundException(.Call System.String.Concat(
                                    "Cannot found the property or field '",
                                    $name,
                                    "' of 'AspNetCore.ApiDoc.Internal.ControllerInformation'"))
                    }
                }
            }
        } .Catch (System.Exception $ex) {
            .Throw .New System.Exception(
                .Call System.String.Concat(
                    " Occur error when Get or Set the property or field '",
                    $name,
                    "' of 'AspNetCore.ApiDoc.Internal.ControllerInformation' "),
                $ex)
        };
        $_
    }
}
2019-05-03 18:58:12.803 +08:00 [INF] FastExpressions For Type: AspNetCore.ApiDoc.Internal.ActionInformation
.Lambda #Lambda1<System.Func`5[System.Object,System.String,System.Boolean,System.Object,System.Object]>(
    System.Object $@object,
    System.String $name,
    System.Boolean $isAssign,
    System.Object $value) {
    .Block(
        System.Object $_,
        AspNetCore.ApiDoc.Internal.ActionInformation $current) {
        $_;
        .If ($value != null) {
            $_ = $value
        } .Else {
            .Default(System.Void)
        };
        $current = $@object .As AspNetCore.ApiDoc.Internal.ActionInformation;
        .Try {
            .Block() {
                .If (
                    $isAssign
                ) {
                    .Switch ($name) {
                    .Case ("Request"):
                            .Block() {
                                $current.Request = (System.Collections.Generic.SortedSet`1[AspNetCore.ApiDoc.ModelInfo])$value;
                                .Default(System.Void)
                            }
                    .Case ("RequestExample"):
                            .Block() {
                                $current.RequestExample = (System.Collections.Generic.SortedDictionary`2[System.String,System.Object])$value;
                                .Default(System.Void)
                            }
                    .Case ("Response"):
                            .Block() {
                                $current.Response = (System.Collections.Generic.SortedSet`1[AspNetCore.ApiDoc.ModelInfo])$value;
                                .Default(System.Void)
                            }
                    .Case ("ResponseExample"):
                            .Block() {
                                $current.ResponseExample = (System.Collections.Generic.Dictionary`2[System.String,System.Object])$value;
                                .Default(System.Void)
                            }
                    .Case ("Url"):
                            .Block() {
                                $current.Url = (System.String)$value;
                                .Default(System.Void)
                            }
                    .Case ("Method"):
                            .Block() {
                                $current.Method = (System.String)$value;
                                .Default(System.Void)
                            }
                    .Case ("Id"):
                            .Call .Constant<System.Reflection.RtFieldInfo>(System.String <Id>k__BackingField).SetValue(
                                $current .As AspNetCore.ApiDoc.Internal.Information,
                                $value)
                    .Case ("Name"):
                            .Call .Constant<System.Reflection.RtFieldInfo>(System.String <Name>k__BackingField).SetValue(
                                $current .As AspNetCore.ApiDoc.Internal.Information,
                                $value)
                    .Case ("Description"):
                            .Call .Constant<System.Reflection.RtFieldInfo>(System.String <Description>k__BackingField).SetValue(
                                $current .As AspNetCore.ApiDoc.Internal.Information,
                                $value)
                    .Case ("IsObsolete"):
                            .Block() {
                                ($current .As AspNetCore.ApiDoc.Internal.Information).IsObsolete = (System.Boolean)$value;
                                .Default(System.Void)
                            }
                    .Case ("Message"):
                            .Block() {
                                ($current .As AspNetCore.ApiDoc.Internal.Information).Message = (System.String)$value;
                                .Default(System.Void)
                            }
                    .Case ("Remarks"):
                            .Call .Constant<System.Reflection.RtFieldInfo>(System.String <Remarks>k__BackingField).SetValue(
                                $current .As AspNetCore.ApiDoc.Internal.Information,
                                $value)
                    .Case ("Order"):
                            .Call .Constant<System.Reflection.RtFieldInfo>(Int32 <Order>k__BackingField).SetValue(
                                $current .As AspNetCore.ApiDoc.Internal.Information,
                                $value)
                    .Case ("Parent"):
                            .Call .Constant<System.Reflection.RtFieldInfo>(System.Type <Parent>k__BackingField).SetValue(
                                $current .As AspNetCore.ApiDoc.Internal.Information,
                                $value)
                    .Case ("Current"):
                            .Call .Constant<System.Reflection.RtFieldInfo>(System.Type <Current>k__BackingField).SetValue(
                                $current .As AspNetCore.ApiDoc.Internal.Information,
                                $value)
                    .Case ("Childrens"):
                            .Call .Constant<System.Reflection.RtFieldInfo>(System.Collections.Generic.List`1[AspNetCore.ApiDoc.Internal.Information] <Childrens>k__BackingField).SetValue(
                                $current .As AspNetCore.ApiDoc.Internal.Information,
                                $value)
                    .Case ("_descriptor"):
                            .Block() {
                                $current._descriptor = (AspNetCore.ApiDoc.ApiDocDescriptor)$value;
                                .Default(System.Void)
                            }
                    .Default:
                            .Throw .New System.Collections.Generic.KeyNotFoundException(.Call System.String.Concat(
                                    "Cannot found the property or field '",
                                    $name,
                                    "' of 'AspNetCore.ApiDoc.Internal.ActionInformation'"))
                    }
                } .Else {
                    .Switch ($name) {
                    .Case ("Request"):
                            .Block() {
                                $_ = (System.Object)$current.Request;
                                .Default(System.Void)
                            }
                    .Case ("RequestExample"):
                            .Block() {
                                $_ = (System.Object)$current.RequestExample;
                                .Default(System.Void)
                            }
                    .Case ("Response"):
                            .Block() {
                                $_ = (System.Object)$current.Response;
                                .Default(System.Void)
                            }
                    .Case ("ResponseExample"):
                            .Block() {
                                $_ = (System.Object)$current.ResponseExample;
                                .Default(System.Void)
                            }
                    .Case ("Url"):
                            .Block() {
                                $_ = (System.Object)$current.Url;
                                .Default(System.Void)
                            }
                    .Case ("Method"):
                            .Block() {
                                $_ = (System.Object)$current.Method;
                                .Default(System.Void)
                            }
                    .Case ("Id"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Id;
                                .Default(System.Void)
                            }
                    .Case ("Name"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Name;
                                .Default(System.Void)
                            }
                    .Case ("Description"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Description;
                                .Default(System.Void)
                            }
                    .Case ("IsObsolete"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).IsObsolete;
                                .Default(System.Void)
                            }
                    .Case ("Message"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Message;
                                .Default(System.Void)
                            }
                    .Case ("Remarks"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Remarks;
                                .Default(System.Void)
                            }
                    .Case ("Order"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Order;
                                .Default(System.Void)
                            }
                    .Case ("Parent"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Parent;
                                .Default(System.Void)
                            }
                    .Case ("Current"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Current;
                                .Default(System.Void)
                            }
                    .Case ("Childrens"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Childrens;
                                .Default(System.Void)
                            }
                    .Case ("_descriptor"):
                            .Block() {
                                $_ = (System.Object)$current._descriptor;
                                .Default(System.Void)
                            }
                    .Default:
                            .Throw .New System.Collections.Generic.KeyNotFoundException(.Call System.String.Concat(
                                    "Cannot found the property or field '",
                                    $name,
                                    "' of 'AspNetCore.ApiDoc.Internal.ActionInformation'"))
                    }
                }
            }
        } .Catch (System.Exception $ex) {
            .Throw .New System.Exception(
                .Call System.String.Concat(
                    " Occur error when Get or Set the property or field '",
                    $name,
                    "' of 'AspNetCore.ApiDoc.Internal.ActionInformation' "),
                $ex)
        };
        $_
    }
}
2019-05-03 18:58:12.959 +08:00 [INF] FastExpressions For Type: AspNetCore.ApiDoc.ModelInfo
.Lambda #Lambda1<System.Func`5[System.Object,System.String,System.Boolean,System.Object,System.Object]>(
    System.Object $@object,
    System.String $name,
    System.Boolean $isAssign,
    System.Object $value) {
    .Block(
        System.Object $_,
        AspNetCore.ApiDoc.ModelInfo $current) {
        $_;
        .If ($value != null) {
            $_ = $value
        } .Else {
            .Default(System.Void)
        };
        $current = $@object .As AspNetCore.ApiDoc.ModelInfo;
        .Try {
            .Block() {
                .If (
                    $isAssign
                ) {
                    .Switch ($name) {
                    .Case ("CurrentType"):
                            .Block() {
                                $current.CurrentType = (System.Type)$value;
                                .Default(System.Void)
                            }
                    .Case ("Name"):
                            .Block() {
                                $current.Name = (System.String)$value;
                                .Default(System.Void)
                            }
                    .Case ("Type"):
                            .Block() {
                                $current.Type = (System.String)$value;
                                .Default(System.Void)
                            }
                    .Case ("IsRequired"):
                            .Block() {
                                $current.IsRequired = (System.Boolean)$value;
                                .Default(System.Void)
                            }
                    .Case ("IsLoop"):
                            .Block() {
                                $current.IsLoop = (System.Boolean)$value;
                                .Default(System.Void)
                            }
                    .Case ("Description"):
                            .Block() {
                                $current.Description = (System.String)$value;
                                .Default(System.Void)
                            }
                    .Case ("Remarks"):
                            .Block() {
                                $current.Remarks = (System.String)$value;
                                .Default(System.Void)
                            }
                    .Case ("Value"):
                            .Block() {
                                $current.Value = (System.Object)$value;
                                .Default(System.Void)
                            }
                    .Case ("IsArray"):
                            .Block() {
                                $current.IsArray = (System.Boolean)$value;
                                .Default(System.Void)
                            }
                    .Case ("Parent"):
                            .Block() {
                                $current.Parent = (AspNetCore.ApiDoc.ModelInfo)$value;
                                .Default(System.Void)
                            }
                    .Case ("IsEnum"):
                            .Block() {
                                $current.IsEnum = (System.Boolean)$value;
                                .Default(System.Void)
                            }
                    .Case ("Children"):
                            .Block() {
                                $current.Children = (System.Collections.Generic.SortedSet`1[AspNetCore.ApiDoc.ModelInfo])$value;
                                .Default(System.Void)
                            }
                    .Default:
                            .Throw .New System.Collections.Generic.KeyNotFoundException(.Call System.String.Concat(
                                    "Cannot found the property or field '",
                                    $name,
                                    "' of 'AspNetCore.ApiDoc.ModelInfo'"))
                    }
                } .Else {
                    .Switch ($name) {
                    .Case ("CurrentType"):
                            .Block() {
                                $_ = (System.Object)$current.CurrentType;
                                .Default(System.Void)
                            }
                    .Case ("Name"):
                            .Block() {
                                $_ = (System.Object)$current.Name;
                                .Default(System.Void)
                            }
                    .Case ("Type"):
                            .Block() {
                                $_ = (System.Object)$current.Type;
                                .Default(System.Void)
                            }
                    .Case ("IsRequired"):
                            .Block() {
                                $_ = (System.Object)$current.IsRequired;
                                .Default(System.Void)
                            }
                    .Case ("IsLoop"):
                            .Block() {
                                $_ = (System.Object)$current.IsLoop;
                                .Default(System.Void)
                            }
                    .Case ("Description"):
                            .Block() {
                                $_ = (System.Object)$current.Description;
                                .Default(System.Void)
                            }
                    .Case ("Remarks"):
                            .Block() {
                                $_ = (System.Object)$current.Remarks;
                                .Default(System.Void)
                            }
                    .Case ("Value"):
                            .Block() {
                                $_ = (System.Object)$current.Value;
                                .Default(System.Void)
                            }
                    .Case ("IsArray"):
                            .Block() {
                                $_ = (System.Object)$current.IsArray;
                                .Default(System.Void)
                            }
                    .Case ("Parent"):
                            .Block() {
                                $_ = (System.Object)$current.Parent;
                                .Default(System.Void)
                            }
                    .Case ("IsEnum"):
                            .Block() {
                                $_ = (System.Object)$current.IsEnum;
                                .Default(System.Void)
                            }
                    .Case ("Children"):
                            .Block() {
                                $_ = (System.Object)$current.Children;
                                .Default(System.Void)
                            }
                    .Default:
                            .Throw .New System.Collections.Generic.KeyNotFoundException(.Call System.String.Concat(
                                    "Cannot found the property or field '",
                                    $name,
                                    "' of 'AspNetCore.ApiDoc.ModelInfo'"))
                    }
                }
            }
        } .Catch (System.Exception $ex) {
            .Throw .New System.Exception(
                .Call System.String.Concat(
                    " Occur error when Get or Set the property or field '",
                    $name,
                    "' of 'AspNetCore.ApiDoc.ModelInfo' "),
                $ex)
        };
        $_
    }
}
2019-05-03 18:58:13.033 +08:00 [INF] Request finished in 536.911ms 200 application/javascript
2019-05-03 18:58:13.164 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/favicon.ico  
2019-05-03 18:58:13.167 +08:00 [INF] Request finished in 2.9804ms 404 
2019-05-03 19:05:11.208 +08:00 [DBG] TaskSchedulingThreadPool configured with max concurrency of 10 and TaskScheduler ThreadPoolTaskScheduler.
2019-05-03 19:05:11.485 +08:00 [INF] Initialized Scheduler Signaller of type: Quartz.Core.SchedulerSignalerImpl
2019-05-03 19:05:11.498 +08:00 [INF] Quartz Scheduler v.3.0.7.0 created.
2019-05-03 19:05:11.509 +08:00 [INF] RAMJobStore initialized.
2019-05-03 19:05:11.522 +08:00 [INF] Scheduler meta-data: Quartz Scheduler (v3.0.7.0) 'QuartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'Quartz.Core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'Quartz.Simpl.DefaultThreadPool' - with 10 threads.
  Using job-store 'Quartz.Simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2019-05-03 19:05:11.526 +08:00 [INF] Quartz scheduler 'QuartzScheduler' initialized
2019-05-03 19:05:11.528 +08:00 [INF] Quartz scheduler version: 3.0.7.0
2019-05-03 19:05:17.093 +08:00 [INF] User profile is available. Using 'C:\Users\gainorloss\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2019-05-03 19:06:07.815 +08:00 [DBG] TaskSchedulingThreadPool configured with max concurrency of 10 and TaskScheduler ThreadPoolTaskScheduler.
2019-05-03 19:06:08.031 +08:00 [INF] Initialized Scheduler Signaller of type: Quartz.Core.SchedulerSignalerImpl
2019-05-03 19:06:08.051 +08:00 [INF] Quartz Scheduler v.3.0.7.0 created.
2019-05-03 19:06:08.058 +08:00 [INF] RAMJobStore initialized.
2019-05-03 19:06:08.069 +08:00 [INF] Scheduler meta-data: Quartz Scheduler (v3.0.7.0) 'QuartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'Quartz.Core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'Quartz.Simpl.DefaultThreadPool' - with 10 threads.
  Using job-store 'Quartz.Simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2019-05-03 19:06:08.071 +08:00 [INF] Quartz scheduler 'QuartzScheduler' initialized
2019-05-03 19:06:08.072 +08:00 [INF] Quartz scheduler version: 3.0.7.0
2019-05-03 19:06:12.504 +08:00 [INF] User profile is available. Using 'C:\Users\gainorloss\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2019-05-03 19:06:19.732 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/apidoc  
2019-05-03 19:06:19.804 +08:00 [INF] Request finished in 75.2144ms 200 text/html; charset=utf-8
2019-05-03 19:06:19.828 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/apidoc/docView.min.css?v=636924783731816692  
2019-05-03 19:06:19.840 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/apidoc/docViewData.json?v=636924783731816692  
2019-05-03 19:06:19.840 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/apidoc/jquery.js  
2019-05-03 19:06:19.857 +08:00 [INF] Request finished in 29.217ms 200 text/css
2019-05-03 19:06:19.828 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/apidoc/angular.js  
2019-05-03 19:06:19.828 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/apidoc/docView.min.js?v=636924783731816692  
2019-05-03 19:06:19.867 +08:00 [INF] Request finished in 40.0247ms 200 application/javascript
2019-05-03 19:06:19.868 +08:00 [INF] Request finished in 27.843ms 200 application/javascript
2019-05-03 19:06:19.875 +08:00 [INF] Request finished in 47.6968ms 200 application/javascript
2019-05-03 19:06:20.030 +08:00 [INF] FastExpressions For Type: AspNetCore.ApiDoc.Internal.ControllerInformation
.Lambda #Lambda1<System.Func`5[System.Object,System.String,System.Boolean,System.Object,System.Object]>(
    System.Object $@object,
    System.String $name,
    System.Boolean $isAssign,
    System.Object $value) {
    .Block(
        System.Object $_,
        AspNetCore.ApiDoc.Internal.ControllerInformation $current) {
        $_;
        .If ($value != null) {
            $_ = $value
        } .Else {
            .Default(System.Void)
        };
        $current = $@object .As AspNetCore.ApiDoc.Internal.ControllerInformation;
        .Try {
            .Block() {
                .If (
                    $isAssign
                ) {
                    .Switch ($name) {
                    .Case ("IsObsolete"):
                            .Block() {
                                ($current .As AspNetCore.ApiDoc.Internal.Information).IsObsolete = (System.Boolean)$value;
                                .Default(System.Void)
                            }
                    .Case ("Message"):
                            .Block() {
                                ($current .As AspNetCore.ApiDoc.Internal.Information).Message = (System.String)$value;
                                .Default(System.Void)
                            }
                    .Default:
                            .Throw .New System.Collections.Generic.KeyNotFoundException(.Call System.String.Concat(
                                    "Cannot found the property or field '",
                                    $name,
                                    "' of 'AspNetCore.ApiDoc.Internal.ControllerInformation'"))
                    }
                } .Else {
                    .Switch ($name) {
                    .Case ("Id"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Id;
                                .Default(System.Void)
                            }
                    .Case ("Name"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Name;
                                .Default(System.Void)
                            }
                    .Case ("Description"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Description;
                                .Default(System.Void)
                            }
                    .Case ("IsObsolete"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).IsObsolete;
                                .Default(System.Void)
                            }
                    .Case ("Message"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Message;
                                .Default(System.Void)
                            }
                    .Case ("Remarks"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Remarks;
                                .Default(System.Void)
                            }
                    .Case ("Order"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Order;
                                .Default(System.Void)
                            }
                    .Case ("Parent"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Parent;
                                .Default(System.Void)
                            }
                    .Case ("Current"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Current;
                                .Default(System.Void)
                            }
                    .Case ("Childrens"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Childrens;
                                .Default(System.Void)
                            }
                    .Default:
                            .Throw .New System.Collections.Generic.KeyNotFoundException(.Call System.String.Concat(
                                    "Cannot found the property or field '",
                                    $name,
                                    "' of 'AspNetCore.ApiDoc.Internal.ControllerInformation'"))
                    }
                }
            }
        } .Catch (System.Exception $ex) {
            .Throw .New System.Exception(
                .Call System.String.Concat(
                    " Occur error when Get or Set the property or field '",
                    $name,
                    "' of 'AspNetCore.ApiDoc.Internal.ControllerInformation' "),
                $ex)
        };
        $_
    }
}
2019-05-03 19:06:20.124 +08:00 [INF] FastExpressions For Type: AspNetCore.ApiDoc.Internal.ActionInformation
.Lambda #Lambda1<System.Func`5[System.Object,System.String,System.Boolean,System.Object,System.Object]>(
    System.Object $@object,
    System.String $name,
    System.Boolean $isAssign,
    System.Object $value) {
    .Block(
        System.Object $_,
        AspNetCore.ApiDoc.Internal.ActionInformation $current) {
        $_;
        .If ($value != null) {
            $_ = $value
        } .Else {
            .Default(System.Void)
        };
        $current = $@object .As AspNetCore.ApiDoc.Internal.ActionInformation;
        .Try {
            .Block() {
                .If (
                    $isAssign
                ) {
                    .Switch ($name) {
                    .Case ("Request"):
                            .Block() {
                                $current.Request = (System.Collections.Generic.SortedSet`1[AspNetCore.ApiDoc.ModelInfo])$value;
                                .Default(System.Void)
                            }
                    .Case ("RequestExample"):
                            .Block() {
                                $current.RequestExample = (System.Collections.Generic.SortedDictionary`2[System.String,System.Object])$value;
                                .Default(System.Void)
                            }
                    .Case ("Response"):
                            .Block() {
                                $current.Response = (System.Collections.Generic.SortedSet`1[AspNetCore.ApiDoc.ModelInfo])$value;
                                .Default(System.Void)
                            }
                    .Case ("ResponseExample"):
                            .Block() {
                                $current.ResponseExample = (System.Collections.Generic.Dictionary`2[System.String,System.Object])$value;
                                .Default(System.Void)
                            }
                    .Case ("Url"):
                            .Block() {
                                $current.Url = (System.String)$value;
                                .Default(System.Void)
                            }
                    .Case ("Method"):
                            .Block() {
                                $current.Method = (System.String)$value;
                                .Default(System.Void)
                            }
                    .Case ("Id"):
                            .Call .Constant<System.Reflection.RtFieldInfo>(System.String <Id>k__BackingField).SetValue(
                                $current .As AspNetCore.ApiDoc.Internal.Information,
                                $value)
                    .Case ("Name"):
                            .Call .Constant<System.Reflection.RtFieldInfo>(System.String <Name>k__BackingField).SetValue(
                                $current .As AspNetCore.ApiDoc.Internal.Information,
                                $value)
                    .Case ("Description"):
                            .Call .Constant<System.Reflection.RtFieldInfo>(System.String <Description>k__BackingField).SetValue(
                                $current .As AspNetCore.ApiDoc.Internal.Information,
                                $value)
                    .Case ("IsObsolete"):
                            .Block() {
                                ($current .As AspNetCore.ApiDoc.Internal.Information).IsObsolete = (System.Boolean)$value;
                                .Default(System.Void)
                            }
                    .Case ("Message"):
                            .Block() {
                                ($current .As AspNetCore.ApiDoc.Internal.Information).Message = (System.String)$value;
                                .Default(System.Void)
                            }
                    .Case ("Remarks"):
                            .Call .Constant<System.Reflection.RtFieldInfo>(System.String <Remarks>k__BackingField).SetValue(
                                $current .As AspNetCore.ApiDoc.Internal.Information,
                                $value)
                    .Case ("Order"):
                            .Call .Constant<System.Reflection.RtFieldInfo>(Int32 <Order>k__BackingField).SetValue(
                                $current .As AspNetCore.ApiDoc.Internal.Information,
                                $value)
                    .Case ("Parent"):
                            .Call .Constant<System.Reflection.RtFieldInfo>(System.Type <Parent>k__BackingField).SetValue(
                                $current .As AspNetCore.ApiDoc.Internal.Information,
                                $value)
                    .Case ("Current"):
                            .Call .Constant<System.Reflection.RtFieldInfo>(System.Type <Current>k__BackingField).SetValue(
                                $current .As AspNetCore.ApiDoc.Internal.Information,
                                $value)
                    .Case ("Childrens"):
                            .Call .Constant<System.Reflection.RtFieldInfo>(System.Collections.Generic.List`1[AspNetCore.ApiDoc.Internal.Information] <Childrens>k__BackingField).SetValue(
                                $current .As AspNetCore.ApiDoc.Internal.Information,
                                $value)
                    .Case ("_descriptor"):
                            .Block() {
                                $current._descriptor = (AspNetCore.ApiDoc.ApiDocDescriptor)$value;
                                .Default(System.Void)
                            }
                    .Default:
                            .Throw .New System.Collections.Generic.KeyNotFoundException(.Call System.String.Concat(
                                    "Cannot found the property or field '",
                                    $name,
                                    "' of 'AspNetCore.ApiDoc.Internal.ActionInformation'"))
                    }
                } .Else {
                    .Switch ($name) {
                    .Case ("Request"):
                            .Block() {
                                $_ = (System.Object)$current.Request;
                                .Default(System.Void)
                            }
                    .Case ("RequestExample"):
                            .Block() {
                                $_ = (System.Object)$current.RequestExample;
                                .Default(System.Void)
                            }
                    .Case ("Response"):
                            .Block() {
                                $_ = (System.Object)$current.Response;
                                .Default(System.Void)
                            }
                    .Case ("ResponseExample"):
                            .Block() {
                                $_ = (System.Object)$current.ResponseExample;
                                .Default(System.Void)
                            }
                    .Case ("Url"):
                            .Block() {
                                $_ = (System.Object)$current.Url;
                                .Default(System.Void)
                            }
                    .Case ("Method"):
                            .Block() {
                                $_ = (System.Object)$current.Method;
                                .Default(System.Void)
                            }
                    .Case ("Id"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Id;
                                .Default(System.Void)
                            }
                    .Case ("Name"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Name;
                                .Default(System.Void)
                            }
                    .Case ("Description"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Description;
                                .Default(System.Void)
                            }
                    .Case ("IsObsolete"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).IsObsolete;
                                .Default(System.Void)
                            }
                    .Case ("Message"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Message;
                                .Default(System.Void)
                            }
                    .Case ("Remarks"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Remarks;
                                .Default(System.Void)
                            }
                    .Case ("Order"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Order;
                                .Default(System.Void)
                            }
                    .Case ("Parent"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Parent;
                                .Default(System.Void)
                            }
                    .Case ("Current"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Current;
                                .Default(System.Void)
                            }
                    .Case ("Childrens"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Childrens;
                                .Default(System.Void)
                            }
                    .Case ("_descriptor"):
                            .Block() {
                                $_ = (System.Object)$current._descriptor;
                                .Default(System.Void)
                            }
                    .Default:
                            .Throw .New System.Collections.Generic.KeyNotFoundException(.Call System.String.Concat(
                                    "Cannot found the property or field '",
                                    $name,
                                    "' of 'AspNetCore.ApiDoc.Internal.ActionInformation'"))
                    }
                }
            }
        } .Catch (System.Exception $ex) {
            .Throw .New System.Exception(
                .Call System.String.Concat(
                    " Occur error when Get or Set the property or field '",
                    $name,
                    "' of 'AspNetCore.ApiDoc.Internal.ActionInformation' "),
                $ex)
        };
        $_
    }
}
2019-05-03 19:06:20.277 +08:00 [INF] FastExpressions For Type: AspNetCore.ApiDoc.ModelInfo
.Lambda #Lambda1<System.Func`5[System.Object,System.String,System.Boolean,System.Object,System.Object]>(
    System.Object $@object,
    System.String $name,
    System.Boolean $isAssign,
    System.Object $value) {
    .Block(
        System.Object $_,
        AspNetCore.ApiDoc.ModelInfo $current) {
        $_;
        .If ($value != null) {
            $_ = $value
        } .Else {
            .Default(System.Void)
        };
        $current = $@object .As AspNetCore.ApiDoc.ModelInfo;
        .Try {
            .Block() {
                .If (
                    $isAssign
                ) {
                    .Switch ($name) {
                    .Case ("CurrentType"):
                            .Block() {
                                $current.CurrentType = (System.Type)$value;
                                .Default(System.Void)
                            }
                    .Case ("Name"):
                            .Block() {
                                $current.Name = (System.String)$value;
                                .Default(System.Void)
                            }
                    .Case ("Type"):
                            .Block() {
                                $current.Type = (System.String)$value;
                                .Default(System.Void)
                            }
                    .Case ("IsRequired"):
                            .Block() {
                                $current.IsRequired = (System.Boolean)$value;
                                .Default(System.Void)
                            }
                    .Case ("IsLoop"):
                            .Block() {
                                $current.IsLoop = (System.Boolean)$value;
                                .Default(System.Void)
                            }
                    .Case ("Description"):
                            .Block() {
                                $current.Description = (System.String)$value;
                                .Default(System.Void)
                            }
                    .Case ("Remarks"):
                            .Block() {
                                $current.Remarks = (System.String)$value;
                                .Default(System.Void)
                            }
                    .Case ("Value"):
                            .Block() {
                                $current.Value = (System.Object)$value;
                                .Default(System.Void)
                            }
                    .Case ("IsArray"):
                            .Block() {
                                $current.IsArray = (System.Boolean)$value;
                                .Default(System.Void)
                            }
                    .Case ("Parent"):
                            .Block() {
                                $current.Parent = (AspNetCore.ApiDoc.ModelInfo)$value;
                                .Default(System.Void)
                            }
                    .Case ("IsEnum"):
                            .Block() {
                                $current.IsEnum = (System.Boolean)$value;
                                .Default(System.Void)
                            }
                    .Case ("Children"):
                            .Block() {
                                $current.Children = (System.Collections.Generic.SortedSet`1[AspNetCore.ApiDoc.ModelInfo])$value;
                                .Default(System.Void)
                            }
                    .Default:
                            .Throw .New System.Collections.Generic.KeyNotFoundException(.Call System.String.Concat(
                                    "Cannot found the property or field '",
                                    $name,
                                    "' of 'AspNetCore.ApiDoc.ModelInfo'"))
                    }
                } .Else {
                    .Switch ($name) {
                    .Case ("CurrentType"):
                            .Block() {
                                $_ = (System.Object)$current.CurrentType;
                                .Default(System.Void)
                            }
                    .Case ("Name"):
                            .Block() {
                                $_ = (System.Object)$current.Name;
                                .Default(System.Void)
                            }
                    .Case ("Type"):
                            .Block() {
                                $_ = (System.Object)$current.Type;
                                .Default(System.Void)
                            }
                    .Case ("IsRequired"):
                            .Block() {
                                $_ = (System.Object)$current.IsRequired;
                                .Default(System.Void)
                            }
                    .Case ("IsLoop"):
                            .Block() {
                                $_ = (System.Object)$current.IsLoop;
                                .Default(System.Void)
                            }
                    .Case ("Description"):
                            .Block() {
                                $_ = (System.Object)$current.Description;
                                .Default(System.Void)
                            }
                    .Case ("Remarks"):
                            .Block() {
                                $_ = (System.Object)$current.Remarks;
                                .Default(System.Void)
                            }
                    .Case ("Value"):
                            .Block() {
                                $_ = (System.Object)$current.Value;
                                .Default(System.Void)
                            }
                    .Case ("IsArray"):
                            .Block() {
                                $_ = (System.Object)$current.IsArray;
                                .Default(System.Void)
                            }
                    .Case ("Parent"):
                            .Block() {
                                $_ = (System.Object)$current.Parent;
                                .Default(System.Void)
                            }
                    .Case ("IsEnum"):
                            .Block() {
                                $_ = (System.Object)$current.IsEnum;
                                .Default(System.Void)
                            }
                    .Case ("Children"):
                            .Block() {
                                $_ = (System.Object)$current.Children;
                                .Default(System.Void)
                            }
                    .Default:
                            .Throw .New System.Collections.Generic.KeyNotFoundException(.Call System.String.Concat(
                                    "Cannot found the property or field '",
                                    $name,
                                    "' of 'AspNetCore.ApiDoc.ModelInfo'"))
                    }
                }
            }
        } .Catch (System.Exception $ex) {
            .Throw .New System.Exception(
                .Call System.String.Concat(
                    " Occur error when Get or Set the property or field '",
                    $name,
                    "' of 'AspNetCore.ApiDoc.ModelInfo' "),
                $ex)
        };
        $_
    }
}
2019-05-03 19:06:20.363 +08:00 [INF] Request finished in 523.0542ms 200 application/javascript
2019-05-03 19:06:20.467 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/favicon.ico  
2019-05-03 19:06:20.562 +08:00 [INF] Request finished in 95.6039ms 404 
2019-05-03 19:06:33.163 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/api/Values/Get?id=0  
2019-05-03 19:06:33.168 +08:00 [INF] Executing endpoint 'Dnc.API.Controllers.ValuesController.Get (Dnc.API)'
2019-05-03 19:06:33.244 +08:00 [INF] Route matched with {action = "Get", controller = "Values"}. Executing action Dnc.API.Controllers.ValuesController.Get (Dnc.API)
2019-05-03 19:06:33.341 +08:00 [INF] Executing ObjectResult, writing value of type 'Microsoft.AspNetCore.Mvc.ValidationProblemDetails'.
2019-05-03 19:06:33.423 +08:00 [INF] Executed action Dnc.API.Controllers.ValuesController.Get (Dnc.API) in 169.44060000000002ms
2019-05-03 19:06:33.435 +08:00 [INF] Executed endpoint 'Dnc.API.Controllers.ValuesController.Get (Dnc.API)'
2019-05-03 19:06:33.437 +08:00 [INF] Request finished in 274.0716ms 400 application/problem+json; charset=utf-8
2019-05-03 19:06:59.521 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/api/Values?id=0  
2019-05-03 19:06:59.523 +08:00 [INF] Executing endpoint 'Dnc.API.Controllers.ValuesController.Get (Dnc.API)'
2019-05-03 19:06:59.528 +08:00 [INF] Route matched with {action = "Get", controller = "Values"}. Executing action Dnc.API.Controllers.ValuesController.Get (Dnc.API)
2019-05-03 19:06:59.541 +08:00 [INF] Executing action method Dnc.API.Controllers.ValuesController.Get (Dnc.API) - Validation state: "Valid"
2019-05-03 19:07:02.876 +08:00 [ERR] d7cae49fd38547c48669aa42013b0bd0
2019-05-03 19:07:03.354 +08:00 [INF] Executed action method Dnc.API.Controllers.ValuesController.Get (Dnc.API), returned result Microsoft.AspNetCore.Mvc.OkObjectResult in 3803.9458ms.
2019-05-03 19:07:03.359 +08:00 [INF] Executing ObjectResult, writing value of type '<>f__AnonymousType0`4[[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[<>f__AnonymousType1`3[[Dnc.API.Models.ABC, Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.IEnumerable`1[[Dnc.API.Models.ABC, Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2019-05-03 19:07:03.451 +08:00 [INF] Executed action Dnc.API.Controllers.ValuesController.Get (Dnc.API) in 3918.5718ms
2019-05-03 19:07:03.455 +08:00 [INF] Executed endpoint 'Dnc.API.Controllers.ValuesController.Get (Dnc.API)'
2019-05-03 19:07:03.458 +08:00 [INF] Request finished in 3936.8052ms 200 application/json; charset=utf-8
2019-05-03 19:07:25.467 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/apidoc  
2019-05-03 19:07:25.478 +08:00 [INF] Request finished in 10.4689ms 304 
2019-05-03 19:07:52.433 +08:00 [DBG] TaskSchedulingThreadPool configured with max concurrency of 10 and TaskScheduler ThreadPoolTaskScheduler.
2019-05-03 19:07:52.666 +08:00 [INF] Initialized Scheduler Signaller of type: Quartz.Core.SchedulerSignalerImpl
2019-05-03 19:07:52.680 +08:00 [INF] Quartz Scheduler v.3.0.7.0 created.
2019-05-03 19:07:52.690 +08:00 [INF] RAMJobStore initialized.
2019-05-03 19:07:52.704 +08:00 [INF] Scheduler meta-data: Quartz Scheduler (v3.0.7.0) 'QuartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'Quartz.Core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'Quartz.Simpl.DefaultThreadPool' - with 10 threads.
  Using job-store 'Quartz.Simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2019-05-03 19:07:52.706 +08:00 [INF] Quartz scheduler 'QuartzScheduler' initialized
2019-05-03 19:07:52.708 +08:00 [INF] Quartz scheduler version: 3.0.7.0
2019-05-03 19:07:57.285 +08:00 [INF] User profile is available. Using 'C:\Users\gainorloss\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2019-05-03 19:07:58.234 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/apidoc  
2019-05-03 19:07:58.313 +08:00 [INF] Request finished in 82.4069ms 200 text/html; charset=utf-8
2019-05-03 19:07:58.345 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/apidoc/docView.min.css?v=636924784779868764  
2019-05-03 19:07:58.345 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/apidoc/docViewData.json?v=636924784779868764  
2019-05-03 19:07:58.346 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/apidoc/docView.min.js?v=636924784779868764  
2019-05-03 19:07:58.353 +08:00 [INF] Request finished in 5.8785ms 200 text/css
2019-05-03 19:07:58.366 +08:00 [INF] Request finished in 20.4826ms 200 application/javascript
2019-05-03 19:07:58.507 +08:00 [INF] FastExpressions For Type: AspNetCore.ApiDoc.Internal.ControllerInformation
.Lambda #Lambda1<System.Func`5[System.Object,System.String,System.Boolean,System.Object,System.Object]>(
    System.Object $@object,
    System.String $name,
    System.Boolean $isAssign,
    System.Object $value) {
    .Block(
        System.Object $_,
        AspNetCore.ApiDoc.Internal.ControllerInformation $current) {
        $_;
        .If ($value != null) {
            $_ = $value
        } .Else {
            .Default(System.Void)
        };
        $current = $@object .As AspNetCore.ApiDoc.Internal.ControllerInformation;
        .Try {
            .Block() {
                .If (
                    $isAssign
                ) {
                    .Switch ($name) {
                    .Case ("IsObsolete"):
                            .Block() {
                                ($current .As AspNetCore.ApiDoc.Internal.Information).IsObsolete = (System.Boolean)$value;
                                .Default(System.Void)
                            }
                    .Case ("Message"):
                            .Block() {
                                ($current .As AspNetCore.ApiDoc.Internal.Information).Message = (System.String)$value;
                                .Default(System.Void)
                            }
                    .Default:
                            .Throw .New System.Collections.Generic.KeyNotFoundException(.Call System.String.Concat(
                                    "Cannot found the property or field '",
                                    $name,
                                    "' of 'AspNetCore.ApiDoc.Internal.ControllerInformation'"))
                    }
                } .Else {
                    .Switch ($name) {
                    .Case ("Id"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Id;
                                .Default(System.Void)
                            }
                    .Case ("Name"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Name;
                                .Default(System.Void)
                            }
                    .Case ("Description"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Description;
                                .Default(System.Void)
                            }
                    .Case ("IsObsolete"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).IsObsolete;
                                .Default(System.Void)
                            }
                    .Case ("Message"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Message;
                                .Default(System.Void)
                            }
                    .Case ("Remarks"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Remarks;
                                .Default(System.Void)
                            }
                    .Case ("Order"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Order;
                                .Default(System.Void)
                            }
                    .Case ("Parent"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Parent;
                                .Default(System.Void)
                            }
                    .Case ("Current"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Current;
                                .Default(System.Void)
                            }
                    .Case ("Childrens"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Childrens;
                                .Default(System.Void)
                            }
                    .Default:
                            .Throw .New System.Collections.Generic.KeyNotFoundException(.Call System.String.Concat(
                                    "Cannot found the property or field '",
                                    $name,
                                    "' of 'AspNetCore.ApiDoc.Internal.ControllerInformation'"))
                    }
                }
            }
        } .Catch (System.Exception $ex) {
            .Throw .New System.Exception(
                .Call System.String.Concat(
                    " Occur error when Get or Set the property or field '",
                    $name,
                    "' of 'AspNetCore.ApiDoc.Internal.ControllerInformation' "),
                $ex)
        };
        $_
    }
}
2019-05-03 19:07:58.598 +08:00 [INF] FastExpressions For Type: AspNetCore.ApiDoc.Internal.ActionInformation
.Lambda #Lambda1<System.Func`5[System.Object,System.String,System.Boolean,System.Object,System.Object]>(
    System.Object $@object,
    System.String $name,
    System.Boolean $isAssign,
    System.Object $value) {
    .Block(
        System.Object $_,
        AspNetCore.ApiDoc.Internal.ActionInformation $current) {
        $_;
        .If ($value != null) {
            $_ = $value
        } .Else {
            .Default(System.Void)
        };
        $current = $@object .As AspNetCore.ApiDoc.Internal.ActionInformation;
        .Try {
            .Block() {
                .If (
                    $isAssign
                ) {
                    .Switch ($name) {
                    .Case ("Request"):
                            .Block() {
                                $current.Request = (System.Collections.Generic.SortedSet`1[AspNetCore.ApiDoc.ModelInfo])$value;
                                .Default(System.Void)
                            }
                    .Case ("RequestExample"):
                            .Block() {
                                $current.RequestExample = (System.Collections.Generic.SortedDictionary`2[System.String,System.Object])$value;
                                .Default(System.Void)
                            }
                    .Case ("Response"):
                            .Block() {
                                $current.Response = (System.Collections.Generic.SortedSet`1[AspNetCore.ApiDoc.ModelInfo])$value;
                                .Default(System.Void)
                            }
                    .Case ("ResponseExample"):
                            .Block() {
                                $current.ResponseExample = (System.Collections.Generic.Dictionary`2[System.String,System.Object])$value;
                                .Default(System.Void)
                            }
                    .Case ("Url"):
                            .Block() {
                                $current.Url = (System.String)$value;
                                .Default(System.Void)
                            }
                    .Case ("Method"):
                            .Block() {
                                $current.Method = (System.String)$value;
                                .Default(System.Void)
                            }
                    .Case ("Id"):
                            .Call .Constant<System.Reflection.RtFieldInfo>(System.String <Id>k__BackingField).SetValue(
                                $current .As AspNetCore.ApiDoc.Internal.Information,
                                $value)
                    .Case ("Name"):
                            .Call .Constant<System.Reflection.RtFieldInfo>(System.String <Name>k__BackingField).SetValue(
                                $current .As AspNetCore.ApiDoc.Internal.Information,
                                $value)
                    .Case ("Description"):
                            .Call .Constant<System.Reflection.RtFieldInfo>(System.String <Description>k__BackingField).SetValue(
                                $current .As AspNetCore.ApiDoc.Internal.Information,
                                $value)
                    .Case ("IsObsolete"):
                            .Block() {
                                ($current .As AspNetCore.ApiDoc.Internal.Information).IsObsolete = (System.Boolean)$value;
                                .Default(System.Void)
                            }
                    .Case ("Message"):
                            .Block() {
                                ($current .As AspNetCore.ApiDoc.Internal.Information).Message = (System.String)$value;
                                .Default(System.Void)
                            }
                    .Case ("Remarks"):
                            .Call .Constant<System.Reflection.RtFieldInfo>(System.String <Remarks>k__BackingField).SetValue(
                                $current .As AspNetCore.ApiDoc.Internal.Information,
                                $value)
                    .Case ("Order"):
                            .Call .Constant<System.Reflection.RtFieldInfo>(Int32 <Order>k__BackingField).SetValue(
                                $current .As AspNetCore.ApiDoc.Internal.Information,
                                $value)
                    .Case ("Parent"):
                            .Call .Constant<System.Reflection.RtFieldInfo>(System.Type <Parent>k__BackingField).SetValue(
                                $current .As AspNetCore.ApiDoc.Internal.Information,
                                $value)
                    .Case ("Current"):
                            .Call .Constant<System.Reflection.RtFieldInfo>(System.Type <Current>k__BackingField).SetValue(
                                $current .As AspNetCore.ApiDoc.Internal.Information,
                                $value)
                    .Case ("Childrens"):
                            .Call .Constant<System.Reflection.RtFieldInfo>(System.Collections.Generic.List`1[AspNetCore.ApiDoc.Internal.Information] <Childrens>k__BackingField).SetValue(
                                $current .As AspNetCore.ApiDoc.Internal.Information,
                                $value)
                    .Case ("_descriptor"):
                            .Block() {
                                $current._descriptor = (AspNetCore.ApiDoc.ApiDocDescriptor)$value;
                                .Default(System.Void)
                            }
                    .Default:
                            .Throw .New System.Collections.Generic.KeyNotFoundException(.Call System.String.Concat(
                                    "Cannot found the property or field '",
                                    $name,
                                    "' of 'AspNetCore.ApiDoc.Internal.ActionInformation'"))
                    }
                } .Else {
                    .Switch ($name) {
                    .Case ("Request"):
                            .Block() {
                                $_ = (System.Object)$current.Request;
                                .Default(System.Void)
                            }
                    .Case ("RequestExample"):
                            .Block() {
                                $_ = (System.Object)$current.RequestExample;
                                .Default(System.Void)
                            }
                    .Case ("Response"):
                            .Block() {
                                $_ = (System.Object)$current.Response;
                                .Default(System.Void)
                            }
                    .Case ("ResponseExample"):
                            .Block() {
                                $_ = (System.Object)$current.ResponseExample;
                                .Default(System.Void)
                            }
                    .Case ("Url"):
                            .Block() {
                                $_ = (System.Object)$current.Url;
                                .Default(System.Void)
                            }
                    .Case ("Method"):
                            .Block() {
                                $_ = (System.Object)$current.Method;
                                .Default(System.Void)
                            }
                    .Case ("Id"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Id;
                                .Default(System.Void)
                            }
                    .Case ("Name"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Name;
                                .Default(System.Void)
                            }
                    .Case ("Description"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Description;
                                .Default(System.Void)
                            }
                    .Case ("IsObsolete"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).IsObsolete;
                                .Default(System.Void)
                            }
                    .Case ("Message"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Message;
                                .Default(System.Void)
                            }
                    .Case ("Remarks"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Remarks;
                                .Default(System.Void)
                            }
                    .Case ("Order"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Order;
                                .Default(System.Void)
                            }
                    .Case ("Parent"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Parent;
                                .Default(System.Void)
                            }
                    .Case ("Current"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Current;
                                .Default(System.Void)
                            }
                    .Case ("Childrens"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Childrens;
                                .Default(System.Void)
                            }
                    .Case ("_descriptor"):
                            .Block() {
                                $_ = (System.Object)$current._descriptor;
                                .Default(System.Void)
                            }
                    .Default:
                            .Throw .New System.Collections.Generic.KeyNotFoundException(.Call System.String.Concat(
                                    "Cannot found the property or field '",
                                    $name,
                                    "' of 'AspNetCore.ApiDoc.Internal.ActionInformation'"))
                    }
                }
            }
        } .Catch (System.Exception $ex) {
            .Throw .New System.Exception(
                .Call System.String.Concat(
                    " Occur error when Get or Set the property or field '",
                    $name,
                    "' of 'AspNetCore.ApiDoc.Internal.ActionInformation' "),
                $ex)
        };
        $_
    }
}
2019-05-03 19:07:58.775 +08:00 [INF] FastExpressions For Type: AspNetCore.ApiDoc.ModelInfo
.Lambda #Lambda1<System.Func`5[System.Object,System.String,System.Boolean,System.Object,System.Object]>(
    System.Object $@object,
    System.String $name,
    System.Boolean $isAssign,
    System.Object $value) {
    .Block(
        System.Object $_,
        AspNetCore.ApiDoc.ModelInfo $current) {
        $_;
        .If ($value != null) {
            $_ = $value
        } .Else {
            .Default(System.Void)
        };
        $current = $@object .As AspNetCore.ApiDoc.ModelInfo;
        .Try {
            .Block() {
                .If (
                    $isAssign
                ) {
                    .Switch ($name) {
                    .Case ("CurrentType"):
                            .Block() {
                                $current.CurrentType = (System.Type)$value;
                                .Default(System.Void)
                            }
                    .Case ("Name"):
                            .Block() {
                                $current.Name = (System.String)$value;
                                .Default(System.Void)
                            }
                    .Case ("Type"):
                            .Block() {
                                $current.Type = (System.String)$value;
                                .Default(System.Void)
                            }
                    .Case ("IsRequired"):
                            .Block() {
                                $current.IsRequired = (System.Boolean)$value;
                                .Default(System.Void)
                            }
                    .Case ("IsLoop"):
                            .Block() {
                                $current.IsLoop = (System.Boolean)$value;
                                .Default(System.Void)
                            }
                    .Case ("Description"):
                            .Block() {
                                $current.Description = (System.String)$value;
                                .Default(System.Void)
                            }
                    .Case ("Remarks"):
                            .Block() {
                                $current.Remarks = (System.String)$value;
                                .Default(System.Void)
                            }
                    .Case ("Value"):
                            .Block() {
                                $current.Value = (System.Object)$value;
                                .Default(System.Void)
                            }
                    .Case ("IsArray"):
                            .Block() {
                                $current.IsArray = (System.Boolean)$value;
                                .Default(System.Void)
                            }
                    .Case ("Parent"):
                            .Block() {
                                $current.Parent = (AspNetCore.ApiDoc.ModelInfo)$value;
                                .Default(System.Void)
                            }
                    .Case ("IsEnum"):
                            .Block() {
                                $current.IsEnum = (System.Boolean)$value;
                                .Default(System.Void)
                            }
                    .Case ("Children"):
                            .Block() {
                                $current.Children = (System.Collections.Generic.SortedSet`1[AspNetCore.ApiDoc.ModelInfo])$value;
                                .Default(System.Void)
                            }
                    .Default:
                            .Throw .New System.Collections.Generic.KeyNotFoundException(.Call System.String.Concat(
                                    "Cannot found the property or field '",
                                    $name,
                                    "' of 'AspNetCore.ApiDoc.ModelInfo'"))
                    }
                } .Else {
                    .Switch ($name) {
                    .Case ("CurrentType"):
                            .Block() {
                                $_ = (System.Object)$current.CurrentType;
                                .Default(System.Void)
                            }
                    .Case ("Name"):
                            .Block() {
                                $_ = (System.Object)$current.Name;
                                .Default(System.Void)
                            }
                    .Case ("Type"):
                            .Block() {
                                $_ = (System.Object)$current.Type;
                                .Default(System.Void)
                            }
                    .Case ("IsRequired"):
                            .Block() {
                                $_ = (System.Object)$current.IsRequired;
                                .Default(System.Void)
                            }
                    .Case ("IsLoop"):
                            .Block() {
                                $_ = (System.Object)$current.IsLoop;
                                .Default(System.Void)
                            }
                    .Case ("Description"):
                            .Block() {
                                $_ = (System.Object)$current.Description;
                                .Default(System.Void)
                            }
                    .Case ("Remarks"):
                            .Block() {
                                $_ = (System.Object)$current.Remarks;
                                .Default(System.Void)
                            }
                    .Case ("Value"):
                            .Block() {
                                $_ = (System.Object)$current.Value;
                                .Default(System.Void)
                            }
                    .Case ("IsArray"):
                            .Block() {
                                $_ = (System.Object)$current.IsArray;
                                .Default(System.Void)
                            }
                    .Case ("Parent"):
                            .Block() {
                                $_ = (System.Object)$current.Parent;
                                .Default(System.Void)
                            }
                    .Case ("IsEnum"):
                            .Block() {
                                $_ = (System.Object)$current.IsEnum;
                                .Default(System.Void)
                            }
                    .Case ("Children"):
                            .Block() {
                                $_ = (System.Object)$current.Children;
                                .Default(System.Void)
                            }
                    .Default:
                            .Throw .New System.Collections.Generic.KeyNotFoundException(.Call System.String.Concat(
                                    "Cannot found the property or field '",
                                    $name,
                                    "' of 'AspNetCore.ApiDoc.ModelInfo'"))
                    }
                }
            }
        } .Catch (System.Exception $ex) {
            .Throw .New System.Exception(
                .Call System.String.Concat(
                    " Occur error when Get or Set the property or field '",
                    $name,
                    "' of 'AspNetCore.ApiDoc.ModelInfo' "),
                $ex)
        };
        $_
    }
}
2019-05-03 19:07:58.855 +08:00 [INF] Request finished in 509.348ms 200 application/javascript
2019-05-03 19:08:07.517 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/api/Values/Get?id=0  
2019-05-03 19:08:07.598 +08:00 [INF] Executing endpoint 'Dnc.API.Controllers.ValuesController.Get (Dnc.API)'
2019-05-03 19:08:07.617 +08:00 [INF] Route matched with {action = "Get", controller = "Values"}. Executing action Dnc.API.Controllers.ValuesController.Get (Dnc.API)
2019-05-03 19:08:07.637 +08:00 [INF] Executing action method Dnc.API.Controllers.ValuesController.Get (Dnc.API) - Validation state: "Valid"
2019-05-03 19:08:10.929 +08:00 [ERR] 643aa718c90b4b4991faaa42013b5b90
2019-05-03 19:08:11.246 +08:00 [INF] Executed action method Dnc.API.Controllers.ValuesController.Get (Dnc.API), returned result Microsoft.AspNetCore.Mvc.OkObjectResult in 3592.3764ms.
2019-05-03 19:08:11.265 +08:00 [INF] Executing ObjectResult, writing value of type '<>f__AnonymousType0`4[[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[<>f__AnonymousType1`3[[Dnc.API.Models.ABC, Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.IEnumerable`1[[Dnc.API.Models.ABC, Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2019-05-03 19:08:11.412 +08:00 [INF] Executed action Dnc.API.Controllers.ValuesController.Get (Dnc.API) in 3787.6909ms
2019-05-03 19:08:11.416 +08:00 [INF] Executed endpoint 'Dnc.API.Controllers.ValuesController.Get (Dnc.API)'
2019-05-03 19:08:11.418 +08:00 [INF] Request finished in 3900.5981ms 200 application/json; charset=utf-8
2019-05-03 19:09:31.719 +08:00 [DBG] TaskSchedulingThreadPool configured with max concurrency of 10 and TaskScheduler ThreadPoolTaskScheduler.
2019-05-03 19:09:31.960 +08:00 [INF] Initialized Scheduler Signaller of type: Quartz.Core.SchedulerSignalerImpl
2019-05-03 19:09:31.974 +08:00 [INF] Quartz Scheduler v.3.0.7.0 created.
2019-05-03 19:09:31.983 +08:00 [INF] RAMJobStore initialized.
2019-05-03 19:09:31.996 +08:00 [INF] Scheduler meta-data: Quartz Scheduler (v3.0.7.0) 'QuartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'Quartz.Core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'Quartz.Simpl.DefaultThreadPool' - with 10 threads.
  Using job-store 'Quartz.Simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2019-05-03 19:09:32.000 +08:00 [INF] Quartz scheduler 'QuartzScheduler' initialized
2019-05-03 19:09:32.002 +08:00 [INF] Quartz scheduler version: 3.0.7.0
2019-05-03 19:09:36.491 +08:00 [INF] User profile is available. Using 'C:\Users\gainorloss\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2019-05-03 19:09:53.550 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/apidoc  
2019-05-03 19:09:53.689 +08:00 [INF] Request finished in 142.9254ms 404 
2019-05-03 19:10:00.931 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/v1/apidoc  
2019-05-03 19:10:00.954 +08:00 [INF] Request finished in 23.1351ms 200 text/html; charset=utf-8
2019-05-03 19:10:00.973 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/v1/apidoc/docView.min.css?v=636924785771347857  
2019-05-03 19:10:00.973 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/v1/apidoc/jquery.js  
2019-05-03 19:10:00.974 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/v1/apidoc/angular.js  
2019-05-03 19:10:00.975 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/v1/apidoc/docViewData.json?v=636924785771347857  
2019-05-03 19:10:01.016 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/v1/apidoc/docView.min.js?v=636924785771347857  
2019-05-03 19:10:01.031 +08:00 [INF] Request finished in 58.7934ms 200 text/css
2019-05-03 19:10:01.038 +08:00 [INF] Request finished in 21.7741ms 200 application/javascript
2019-05-03 19:10:01.040 +08:00 [INF] Request finished in 66.9299ms 200 application/javascript
2019-05-03 19:10:01.040 +08:00 [INF] Request finished in 67.3849ms 200 application/javascript
2019-05-03 19:10:01.196 +08:00 [INF] FastExpressions For Type: AspNetCore.ApiDoc.Internal.ControllerInformation
.Lambda #Lambda1<System.Func`5[System.Object,System.String,System.Boolean,System.Object,System.Object]>(
    System.Object $@object,
    System.String $name,
    System.Boolean $isAssign,
    System.Object $value) {
    .Block(
        System.Object $_,
        AspNetCore.ApiDoc.Internal.ControllerInformation $current) {
        $_;
        .If ($value != null) {
            $_ = $value
        } .Else {
            .Default(System.Void)
        };
        $current = $@object .As AspNetCore.ApiDoc.Internal.ControllerInformation;
        .Try {
            .Block() {
                .If (
                    $isAssign
                ) {
                    .Switch ($name) {
                    .Case ("IsObsolete"):
                            .Block() {
                                ($current .As AspNetCore.ApiDoc.Internal.Information).IsObsolete = (System.Boolean)$value;
                                .Default(System.Void)
                            }
                    .Case ("Message"):
                            .Block() {
                                ($current .As AspNetCore.ApiDoc.Internal.Information).Message = (System.String)$value;
                                .Default(System.Void)
                            }
                    .Default:
                            .Throw .New System.Collections.Generic.KeyNotFoundException(.Call System.String.Concat(
                                    "Cannot found the property or field '",
                                    $name,
                                    "' of 'AspNetCore.ApiDoc.Internal.ControllerInformation'"))
                    }
                } .Else {
                    .Switch ($name) {
                    .Case ("Id"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Id;
                                .Default(System.Void)
                            }
                    .Case ("Name"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Name;
                                .Default(System.Void)
                            }
                    .Case ("Description"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Description;
                                .Default(System.Void)
                            }
                    .Case ("IsObsolete"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).IsObsolete;
                                .Default(System.Void)
                            }
                    .Case ("Message"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Message;
                                .Default(System.Void)
                            }
                    .Case ("Remarks"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Remarks;
                                .Default(System.Void)
                            }
                    .Case ("Order"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Order;
                                .Default(System.Void)
                            }
                    .Case ("Parent"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Parent;
                                .Default(System.Void)
                            }
                    .Case ("Current"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Current;
                                .Default(System.Void)
                            }
                    .Case ("Childrens"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Childrens;
                                .Default(System.Void)
                            }
                    .Default:
                            .Throw .New System.Collections.Generic.KeyNotFoundException(.Call System.String.Concat(
                                    "Cannot found the property or field '",
                                    $name,
                                    "' of 'AspNetCore.ApiDoc.Internal.ControllerInformation'"))
                    }
                }
            }
        } .Catch (System.Exception $ex) {
            .Throw .New System.Exception(
                .Call System.String.Concat(
                    " Occur error when Get or Set the property or field '",
                    $name,
                    "' of 'AspNetCore.ApiDoc.Internal.ControllerInformation' "),
                $ex)
        };
        $_
    }
}
2019-05-03 19:10:01.289 +08:00 [INF] FastExpressions For Type: AspNetCore.ApiDoc.Internal.ActionInformation
.Lambda #Lambda1<System.Func`5[System.Object,System.String,System.Boolean,System.Object,System.Object]>(
    System.Object $@object,
    System.String $name,
    System.Boolean $isAssign,
    System.Object $value) {
    .Block(
        System.Object $_,
        AspNetCore.ApiDoc.Internal.ActionInformation $current) {
        $_;
        .If ($value != null) {
            $_ = $value
        } .Else {
            .Default(System.Void)
        };
        $current = $@object .As AspNetCore.ApiDoc.Internal.ActionInformation;
        .Try {
            .Block() {
                .If (
                    $isAssign
                ) {
                    .Switch ($name) {
                    .Case ("Request"):
                            .Block() {
                                $current.Request = (System.Collections.Generic.SortedSet`1[AspNetCore.ApiDoc.ModelInfo])$value;
                                .Default(System.Void)
                            }
                    .Case ("RequestExample"):
                            .Block() {
                                $current.RequestExample = (System.Collections.Generic.SortedDictionary`2[System.String,System.Object])$value;
                                .Default(System.Void)
                            }
                    .Case ("Response"):
                            .Block() {
                                $current.Response = (System.Collections.Generic.SortedSet`1[AspNetCore.ApiDoc.ModelInfo])$value;
                                .Default(System.Void)
                            }
                    .Case ("ResponseExample"):
                            .Block() {
                                $current.ResponseExample = (System.Collections.Generic.Dictionary`2[System.String,System.Object])$value;
                                .Default(System.Void)
                            }
                    .Case ("Url"):
                            .Block() {
                                $current.Url = (System.String)$value;
                                .Default(System.Void)
                            }
                    .Case ("Method"):
                            .Block() {
                                $current.Method = (System.String)$value;
                                .Default(System.Void)
                            }
                    .Case ("Id"):
                            .Call .Constant<System.Reflection.RtFieldInfo>(System.String <Id>k__BackingField).SetValue(
                                $current .As AspNetCore.ApiDoc.Internal.Information,
                                $value)
                    .Case ("Name"):
                            .Call .Constant<System.Reflection.RtFieldInfo>(System.String <Name>k__BackingField).SetValue(
                                $current .As AspNetCore.ApiDoc.Internal.Information,
                                $value)
                    .Case ("Description"):
                            .Call .Constant<System.Reflection.RtFieldInfo>(System.String <Description>k__BackingField).SetValue(
                                $current .As AspNetCore.ApiDoc.Internal.Information,
                                $value)
                    .Case ("IsObsolete"):
                            .Block() {
                                ($current .As AspNetCore.ApiDoc.Internal.Information).IsObsolete = (System.Boolean)$value;
                                .Default(System.Void)
                            }
                    .Case ("Message"):
                            .Block() {
                                ($current .As AspNetCore.ApiDoc.Internal.Information).Message = (System.String)$value;
                                .Default(System.Void)
                            }
                    .Case ("Remarks"):
                            .Call .Constant<System.Reflection.RtFieldInfo>(System.String <Remarks>k__BackingField).SetValue(
                                $current .As AspNetCore.ApiDoc.Internal.Information,
                                $value)
                    .Case ("Order"):
                            .Call .Constant<System.Reflection.RtFieldInfo>(Int32 <Order>k__BackingField).SetValue(
                                $current .As AspNetCore.ApiDoc.Internal.Information,
                                $value)
                    .Case ("Parent"):
                            .Call .Constant<System.Reflection.RtFieldInfo>(System.Type <Parent>k__BackingField).SetValue(
                                $current .As AspNetCore.ApiDoc.Internal.Information,
                                $value)
                    .Case ("Current"):
                            .Call .Constant<System.Reflection.RtFieldInfo>(System.Type <Current>k__BackingField).SetValue(
                                $current .As AspNetCore.ApiDoc.Internal.Information,
                                $value)
                    .Case ("Childrens"):
                            .Call .Constant<System.Reflection.RtFieldInfo>(System.Collections.Generic.List`1[AspNetCore.ApiDoc.Internal.Information] <Childrens>k__BackingField).SetValue(
                                $current .As AspNetCore.ApiDoc.Internal.Information,
                                $value)
                    .Case ("_descriptor"):
                            .Block() {
                                $current._descriptor = (AspNetCore.ApiDoc.ApiDocDescriptor)$value;
                                .Default(System.Void)
                            }
                    .Default:
                            .Throw .New System.Collections.Generic.KeyNotFoundException(.Call System.String.Concat(
                                    "Cannot found the property or field '",
                                    $name,
                                    "' of 'AspNetCore.ApiDoc.Internal.ActionInformation'"))
                    }
                } .Else {
                    .Switch ($name) {
                    .Case ("Request"):
                            .Block() {
                                $_ = (System.Object)$current.Request;
                                .Default(System.Void)
                            }
                    .Case ("RequestExample"):
                            .Block() {
                                $_ = (System.Object)$current.RequestExample;
                                .Default(System.Void)
                            }
                    .Case ("Response"):
                            .Block() {
                                $_ = (System.Object)$current.Response;
                                .Default(System.Void)
                            }
                    .Case ("ResponseExample"):
                            .Block() {
                                $_ = (System.Object)$current.ResponseExample;
                                .Default(System.Void)
                            }
                    .Case ("Url"):
                            .Block() {
                                $_ = (System.Object)$current.Url;
                                .Default(System.Void)
                            }
                    .Case ("Method"):
                            .Block() {
                                $_ = (System.Object)$current.Method;
                                .Default(System.Void)
                            }
                    .Case ("Id"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Id;
                                .Default(System.Void)
                            }
                    .Case ("Name"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Name;
                                .Default(System.Void)
                            }
                    .Case ("Description"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Description;
                                .Default(System.Void)
                            }
                    .Case ("IsObsolete"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).IsObsolete;
                                .Default(System.Void)
                            }
                    .Case ("Message"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Message;
                                .Default(System.Void)
                            }
                    .Case ("Remarks"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Remarks;
                                .Default(System.Void)
                            }
                    .Case ("Order"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Order;
                                .Default(System.Void)
                            }
                    .Case ("Parent"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Parent;
                                .Default(System.Void)
                            }
                    .Case ("Current"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Current;
                                .Default(System.Void)
                            }
                    .Case ("Childrens"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Childrens;
                                .Default(System.Void)
                            }
                    .Case ("_descriptor"):
                            .Block() {
                                $_ = (System.Object)$current._descriptor;
                                .Default(System.Void)
                            }
                    .Default:
                            .Throw .New System.Collections.Generic.KeyNotFoundException(.Call System.String.Concat(
                                    "Cannot found the property or field '",
                                    $name,
                                    "' of 'AspNetCore.ApiDoc.Internal.ActionInformation'"))
                    }
                }
            }
        } .Catch (System.Exception $ex) {
            .Throw .New System.Exception(
                .Call System.String.Concat(
                    " Occur error when Get or Set the property or field '",
                    $name,
                    "' of 'AspNetCore.ApiDoc.Internal.ActionInformation' "),
                $ex)
        };
        $_
    }
}
2019-05-03 19:10:01.459 +08:00 [INF] FastExpressions For Type: AspNetCore.ApiDoc.ModelInfo
.Lambda #Lambda1<System.Func`5[System.Object,System.String,System.Boolean,System.Object,System.Object]>(
    System.Object $@object,
    System.String $name,
    System.Boolean $isAssign,
    System.Object $value) {
    .Block(
        System.Object $_,
        AspNetCore.ApiDoc.ModelInfo $current) {
        $_;
        .If ($value != null) {
            $_ = $value
        } .Else {
            .Default(System.Void)
        };
        $current = $@object .As AspNetCore.ApiDoc.ModelInfo;
        .Try {
            .Block() {
                .If (
                    $isAssign
                ) {
                    .Switch ($name) {
                    .Case ("CurrentType"):
                            .Block() {
                                $current.CurrentType = (System.Type)$value;
                                .Default(System.Void)
                            }
                    .Case ("Name"):
                            .Block() {
                                $current.Name = (System.String)$value;
                                .Default(System.Void)
                            }
                    .Case ("Type"):
                            .Block() {
                                $current.Type = (System.String)$value;
                                .Default(System.Void)
                            }
                    .Case ("IsRequired"):
                            .Block() {
                                $current.IsRequired = (System.Boolean)$value;
                                .Default(System.Void)
                            }
                    .Case ("IsLoop"):
                            .Block() {
                                $current.IsLoop = (System.Boolean)$value;
                                .Default(System.Void)
                            }
                    .Case ("Description"):
                            .Block() {
                                $current.Description = (System.String)$value;
                                .Default(System.Void)
                            }
                    .Case ("Remarks"):
                            .Block() {
                                $current.Remarks = (System.String)$value;
                                .Default(System.Void)
                            }
                    .Case ("Value"):
                            .Block() {
                                $current.Value = (System.Object)$value;
                                .Default(System.Void)
                            }
                    .Case ("IsArray"):
                            .Block() {
                                $current.IsArray = (System.Boolean)$value;
                                .Default(System.Void)
                            }
                    .Case ("Parent"):
                            .Block() {
                                $current.Parent = (AspNetCore.ApiDoc.ModelInfo)$value;
                                .Default(System.Void)
                            }
                    .Case ("IsEnum"):
                            .Block() {
                                $current.IsEnum = (System.Boolean)$value;
                                .Default(System.Void)
                            }
                    .Case ("Children"):
                            .Block() {
                                $current.Children = (System.Collections.Generic.SortedSet`1[AspNetCore.ApiDoc.ModelInfo])$value;
                                .Default(System.Void)
                            }
                    .Default:
                            .Throw .New System.Collections.Generic.KeyNotFoundException(.Call System.String.Concat(
                                    "Cannot found the property or field '",
                                    $name,
                                    "' of 'AspNetCore.ApiDoc.ModelInfo'"))
                    }
                } .Else {
                    .Switch ($name) {
                    .Case ("CurrentType"):
                            .Block() {
                                $_ = (System.Object)$current.CurrentType;
                                .Default(System.Void)
                            }
                    .Case ("Name"):
                            .Block() {
                                $_ = (System.Object)$current.Name;
                                .Default(System.Void)
                            }
                    .Case ("Type"):
                            .Block() {
                                $_ = (System.Object)$current.Type;
                                .Default(System.Void)
                            }
                    .Case ("IsRequired"):
                            .Block() {
                                $_ = (System.Object)$current.IsRequired;
                                .Default(System.Void)
                            }
                    .Case ("IsLoop"):
                            .Block() {
                                $_ = (System.Object)$current.IsLoop;
                                .Default(System.Void)
                            }
                    .Case ("Description"):
                            .Block() {
                                $_ = (System.Object)$current.Description;
                                .Default(System.Void)
                            }
                    .Case ("Remarks"):
                            .Block() {
                                $_ = (System.Object)$current.Remarks;
                                .Default(System.Void)
                            }
                    .Case ("Value"):
                            .Block() {
                                $_ = (System.Object)$current.Value;
                                .Default(System.Void)
                            }
                    .Case ("IsArray"):
                            .Block() {
                                $_ = (System.Object)$current.IsArray;
                                .Default(System.Void)
                            }
                    .Case ("Parent"):
                            .Block() {
                                $_ = (System.Object)$current.Parent;
                                .Default(System.Void)
                            }
                    .Case ("IsEnum"):
                            .Block() {
                                $_ = (System.Object)$current.IsEnum;
                                .Default(System.Void)
                            }
                    .Case ("Children"):
                            .Block() {
                                $_ = (System.Object)$current.Children;
                                .Default(System.Void)
                            }
                    .Default:
                            .Throw .New System.Collections.Generic.KeyNotFoundException(.Call System.String.Concat(
                                    "Cannot found the property or field '",
                                    $name,
                                    "' of 'AspNetCore.ApiDoc.ModelInfo'"))
                    }
                }
            }
        } .Catch (System.Exception $ex) {
            .Throw .New System.Exception(
                .Call System.String.Concat(
                    " Occur error when Get or Set the property or field '",
                    $name,
                    "' of 'AspNetCore.ApiDoc.ModelInfo' "),
                $ex)
        };
        $_
    }
}
2019-05-03 19:10:01.541 +08:00 [INF] Request finished in 566.5563ms 200 application/javascript
2019-05-03 19:24:58.338 +08:00 [DBG] TaskSchedulingThreadPool configured with max concurrency of 10 and TaskScheduler ThreadPoolTaskScheduler.
2019-05-03 19:24:58.735 +08:00 [INF] Initialized Scheduler Signaller of type: Quartz.Core.SchedulerSignalerImpl
2019-05-03 19:24:58.749 +08:00 [INF] Quartz Scheduler v.3.0.7.0 created.
2019-05-03 19:24:58.775 +08:00 [INF] RAMJobStore initialized.
2019-05-03 19:24:58.792 +08:00 [INF] Scheduler meta-data: Quartz Scheduler (v3.0.7.0) 'QuartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'Quartz.Core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'Quartz.Simpl.DefaultThreadPool' - with 10 threads.
  Using job-store 'Quartz.Simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2019-05-03 19:24:58.794 +08:00 [INF] Quartz scheduler 'QuartzScheduler' initialized
2019-05-03 19:24:58.796 +08:00 [INF] Quartz scheduler version: 3.0.7.0
2019-05-03 19:25:03.553 +08:00 [INF] User profile is available. Using 'C:\Users\gainorloss\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2019-05-03 19:25:19.932 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/  
2019-05-03 19:25:20.084 +08:00 [INF] Request finished in 151.7076ms 404 
2019-05-03 19:25:25.157 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/swagger  
2019-05-03 19:25:25.162 +08:00 [INF] Request finished in 4.8702ms 301 
2019-05-03 19:25:25.167 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/swagger/index.html  
2019-05-03 19:25:25.465 +08:00 [INF] Request finished in 298.4218ms 200 text/html
2019-05-03 19:25:25.485 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/swagger/swagger-ui.css  
2019-05-03 19:25:25.485 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/swagger/swagger-ui-bundle.js  
2019-05-03 19:25:25.485 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/swagger/swagger-ui-standalone-preset.js  
2019-05-03 19:25:25.585 +08:00 [INF] Sending file. Request path: '/swagger-ui.css'. Physical path: 'N/A'
2019-05-03 19:25:25.585 +08:00 [INF] Sending file. Request path: '/swagger-ui-standalone-preset.js'. Physical path: 'N/A'
2019-05-03 19:25:25.601 +08:00 [INF] Request finished in 115.7451ms 200 application/javascript
2019-05-03 19:25:25.601 +08:00 [INF] Request finished in 116.564ms 200 text/css
2019-05-03 19:25:25.612 +08:00 [INF] Sending file. Request path: '/swagger-ui-bundle.js'. Physical path: 'N/A'
2019-05-03 19:25:25.614 +08:00 [INF] Request finished in 128.908ms 200 application/javascript
2019-05-03 19:25:26.321 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/swagger/favicon-16x16.png  
2019-05-03 19:25:26.323 +08:00 [INF] Sending file. Request path: '/favicon-16x16.png'. Physical path: 'N/A'
2019-05-03 19:25:26.326 +08:00 [INF] Request finished in 5.0269ms 200 image/png
2019-05-03 19:28:40.525 +08:00 [DBG] TaskSchedulingThreadPool configured with max concurrency of 10 and TaskScheduler ThreadPoolTaskScheduler.
2019-05-03 19:28:40.760 +08:00 [INF] Initialized Scheduler Signaller of type: Quartz.Core.SchedulerSignalerImpl
2019-05-03 19:28:40.772 +08:00 [INF] Quartz Scheduler v.3.0.7.0 created.
2019-05-03 19:28:40.782 +08:00 [INF] RAMJobStore initialized.
2019-05-03 19:28:40.798 +08:00 [INF] Scheduler meta-data: Quartz Scheduler (v3.0.7.0) 'QuartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'Quartz.Core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'Quartz.Simpl.DefaultThreadPool' - with 10 threads.
  Using job-store 'Quartz.Simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2019-05-03 19:28:40.802 +08:00 [INF] Quartz scheduler 'QuartzScheduler' initialized
2019-05-03 19:28:40.803 +08:00 [INF] Quartz scheduler version: 3.0.7.0
2019-05-03 19:28:44.818 +08:00 [INF] User profile is available. Using 'C:\Users\gainorloss\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2019-05-03 19:28:48.326 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/swagger/index.html  
2019-05-03 19:28:48.707 +08:00 [INF] Request finished in 383.6191ms 200 text/html
2019-05-03 19:28:49.221 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/swagger/swagger/v1/swagger.json  
2019-05-03 19:28:49.236 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/swagger/favicon-16x16.png  
2019-05-03 19:28:49.251 +08:00 [INF] Sending file. Request path: '/favicon-16x16.png'. Physical path: 'N/A'
2019-05-03 19:28:49.254 +08:00 [INF] Request finished in 18.3333ms 200 image/png
2019-05-03 19:28:49.297 +08:00 [INF] Request finished in 76.733ms 404 
2019-05-03 19:35:24.975 +08:00 [DBG] TaskSchedulingThreadPool configured with max concurrency of 10 and TaskScheduler ThreadPoolTaskScheduler.
2019-05-03 19:35:25.223 +08:00 [INF] Initialized Scheduler Signaller of type: Quartz.Core.SchedulerSignalerImpl
2019-05-03 19:35:25.239 +08:00 [INF] Quartz Scheduler v.3.0.7.0 created.
2019-05-03 19:35:25.251 +08:00 [INF] RAMJobStore initialized.
2019-05-03 19:35:25.268 +08:00 [INF] Scheduler meta-data: Quartz Scheduler (v3.0.7.0) 'QuartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'Quartz.Core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'Quartz.Simpl.DefaultThreadPool' - with 10 threads.
  Using job-store 'Quartz.Simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2019-05-03 19:35:25.271 +08:00 [INF] Quartz scheduler 'QuartzScheduler' initialized
2019-05-03 19:35:25.273 +08:00 [INF] Quartz scheduler version: 3.0.7.0
2019-05-03 19:35:29.508 +08:00 [INF] User profile is available. Using 'C:\Users\gainorloss\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2019-05-03 19:35:41.379 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/swagger/index.html  
2019-05-03 19:37:42.509 +08:00 [DBG] TaskSchedulingThreadPool configured with max concurrency of 10 and TaskScheduler ThreadPoolTaskScheduler.
2019-05-03 19:37:42.752 +08:00 [INF] Initialized Scheduler Signaller of type: Quartz.Core.SchedulerSignalerImpl
2019-05-03 19:37:42.767 +08:00 [INF] Quartz Scheduler v.3.0.7.0 created.
2019-05-03 19:37:42.776 +08:00 [INF] RAMJobStore initialized.
2019-05-03 19:37:42.787 +08:00 [INF] Scheduler meta-data: Quartz Scheduler (v3.0.7.0) 'QuartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'Quartz.Core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'Quartz.Simpl.DefaultThreadPool' - with 10 threads.
  Using job-store 'Quartz.Simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2019-05-03 19:37:42.790 +08:00 [INF] Quartz scheduler 'QuartzScheduler' initialized
2019-05-03 19:37:42.792 +08:00 [INF] Quartz scheduler version: 3.0.7.0
2019-05-03 19:37:47.018 +08:00 [INF] User profile is available. Using 'C:\Users\gainorloss\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2019-05-03 19:37:48.151 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/swagger/index.html  
2019-05-03 19:38:16.694 +08:00 [DBG] TaskSchedulingThreadPool configured with max concurrency of 10 and TaskScheduler ThreadPoolTaskScheduler.
2019-05-03 19:38:16.953 +08:00 [INF] Initialized Scheduler Signaller of type: Quartz.Core.SchedulerSignalerImpl
2019-05-03 19:38:16.966 +08:00 [INF] Quartz Scheduler v.3.0.7.0 created.
2019-05-03 19:38:16.976 +08:00 [INF] RAMJobStore initialized.
2019-05-03 19:38:16.987 +08:00 [INF] Scheduler meta-data: Quartz Scheduler (v3.0.7.0) 'QuartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'Quartz.Core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'Quartz.Simpl.DefaultThreadPool' - with 10 threads.
  Using job-store 'Quartz.Simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2019-05-03 19:38:16.990 +08:00 [INF] Quartz scheduler 'QuartzScheduler' initialized
2019-05-03 19:38:16.992 +08:00 [INF] Quartz scheduler version: 3.0.7.0
2019-05-03 19:38:21.467 +08:00 [INF] User profile is available. Using 'C:\Users\gainorloss\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2019-05-03 19:38:24.080 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/swagger/index.html  
2019-05-03 19:38:24.540 +08:00 [INF] Request finished in 462.626ms 200 text/html
2019-05-03 19:38:25.160 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/swagger/swagger/v1/swagger.json  
2019-05-03 19:38:25.240 +08:00 [INF] Request finished in 79.6641ms 404 
2019-05-03 19:39:32.117 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/swagger/  
2019-05-03 19:39:32.141 +08:00 [INF] Request finished in 24.4822ms 301 
2019-05-03 19:39:32.159 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/swagger/index.html  
2019-05-03 19:39:32.162 +08:00 [INF] Request finished in 2.4122ms 200 text/html
2019-05-03 19:39:32.571 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/swagger/swagger/v1/swagger.json  
2019-05-03 19:39:32.573 +08:00 [INF] Request finished in 2.2115ms 404 
2019-05-03 19:40:29.822 +08:00 [DBG] TaskSchedulingThreadPool configured with max concurrency of 10 and TaskScheduler ThreadPoolTaskScheduler.
2019-05-03 19:40:30.072 +08:00 [INF] Initialized Scheduler Signaller of type: Quartz.Core.SchedulerSignalerImpl
2019-05-03 19:40:30.093 +08:00 [INF] Quartz Scheduler v.3.0.7.0 created.
2019-05-03 19:40:30.101 +08:00 [INF] RAMJobStore initialized.
2019-05-03 19:40:30.114 +08:00 [INF] Scheduler meta-data: Quartz Scheduler (v3.0.7.0) 'QuartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'Quartz.Core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'Quartz.Simpl.DefaultThreadPool' - with 10 threads.
  Using job-store 'Quartz.Simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2019-05-03 19:40:30.118 +08:00 [INF] Quartz scheduler 'QuartzScheduler' initialized
2019-05-03 19:40:30.120 +08:00 [INF] Quartz scheduler version: 3.0.7.0
2019-05-03 19:40:34.286 +08:00 [INF] User profile is available. Using 'C:\Users\gainorloss\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2019-05-03 19:40:35.326 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/swagger/index.html  
2019-05-03 19:40:35.768 +08:00 [INF] Request finished in 443.9999ms 200 text/html
2019-05-03 19:40:36.138 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/swagger/v1/swagger.json  
2019-05-03 19:40:36.146 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/swagger/favicon-16x16.png  
2019-05-03 19:40:36.181 +08:00 [INF] Sending file. Request path: '/favicon-16x16.png'. Physical path: 'N/A'
2019-05-03 19:40:36.184 +08:00 [INF] Request finished in 38.13ms 200 image/png
2019-05-03 19:40:36.397 +08:00 [INF] Request finished in 259.1404ms 200 application/json;charset=utf-8
2019-05-03 19:41:40.648 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/swagger/v1/swagger.json  
2019-05-03 19:41:40.652 +08:00 [INF] Request finished in 3.41ms 200 application/json;charset=utf-8
2019-05-03 19:41:53.139 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/api/Values/Get  
2019-05-03 19:41:53.193 +08:00 [INF] Executing endpoint 'Dnc.API.Controllers.ValuesController.Get (Dnc.API)'
2019-05-03 19:41:53.216 +08:00 [INF] Route matched with {action = "Get", controller = "Values"}. Executing action Dnc.API.Controllers.ValuesController.Get (Dnc.API)
2019-05-03 19:41:53.381 +08:00 [INF] Executing action method Dnc.API.Controllers.ValuesController.Get (Dnc.API) - Validation state: "Valid"
2019-05-03 19:41:53.394 +08:00 [DBG] aha
2019-05-03 19:41:53.548 +08:00 [DBG] redis:gainorloss
2019-05-03 19:41:56.596 +08:00 [DBG] redis:gainorloss
2019-05-03 19:41:56.709 +08:00 [DBG] redis:gainorloss
2019-05-03 19:41:56.711 +08:00 [ERR] e198ca1a037a45499010aa420144a187
2019-05-03 19:41:57.106 +08:00 [INF] Executed action method Dnc.API.Controllers.ValuesController.Get (Dnc.API), returned result Microsoft.AspNetCore.Mvc.OkObjectResult in 3708.9475ms.
2019-05-03 19:41:57.126 +08:00 [INF] Executing ObjectResult, writing value of type '<>f__AnonymousType0`4[[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[<>f__AnonymousType1`3[[Dnc.API.Models.ABC, Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.IEnumerable`1[[Dnc.API.Models.ABC, Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2019-05-03 19:41:57.217 +08:00 [INF] Executed action Dnc.API.Controllers.ValuesController.Get (Dnc.API) in 3990.7751000000003ms
2019-05-03 19:41:57.220 +08:00 [INF] Executed endpoint 'Dnc.API.Controllers.ValuesController.Get (Dnc.API)'
2019-05-03 19:41:57.224 +08:00 [INF] Request finished in 4084.131ms 200 application/json; charset=utf-8
2019-05-03 19:42:03.608 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/api/Values/Get  
2019-05-03 19:42:03.612 +08:00 [INF] Executing endpoint 'Dnc.API.Controllers.ValuesController.Get (Dnc.API)'
2019-05-03 19:42:03.614 +08:00 [INF] Route matched with {action = "Get", controller = "Values"}. Executing action Dnc.API.Controllers.ValuesController.Get (Dnc.API)
2019-05-03 19:42:03.654 +08:00 [INF] Executing action method Dnc.API.Controllers.ValuesController.Get (Dnc.API) - Validation state: "Valid"
2019-05-03 19:42:03.656 +08:00 [DBG] aha
2019-05-03 19:42:03.700 +08:00 [DBG] redis:gainorloss
2019-05-03 19:42:06.745 +08:00 [DBG] redis:gainorloss
2019-05-03 19:42:06.749 +08:00 [DBG] redis:gainorloss
2019-05-03 19:42:06.750 +08:00 [ERR] 70518a86c9fd465e8064aa420144ad4a
2019-05-03 19:42:06.796 +08:00 [INF] Executed action method Dnc.API.Controllers.ValuesController.Get (Dnc.API), returned result Microsoft.AspNetCore.Mvc.OkObjectResult in 3139.9183000000003ms.
2019-05-03 19:42:06.802 +08:00 [INF] Executing ObjectResult, writing value of type '<>f__AnonymousType0`4[[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[<>f__AnonymousType1`3[[Dnc.API.Models.ABC, Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.IEnumerable`1[[Dnc.API.Models.ABC, Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2019-05-03 19:42:06.810 +08:00 [INF] Executed action Dnc.API.Controllers.ValuesController.Get (Dnc.API) in 3189.2324000000003ms
2019-05-03 19:42:06.813 +08:00 [INF] Executed endpoint 'Dnc.API.Controllers.ValuesController.Get (Dnc.API)'
2019-05-03 19:42:06.818 +08:00 [INF] Request finished in 3210.0145ms 200 application/json; charset=utf-8
2019-05-03 19:42:45.049 +08:00 [DBG] TaskSchedulingThreadPool configured with max concurrency of 10 and TaskScheduler ThreadPoolTaskScheduler.
2019-05-03 19:42:45.344 +08:00 [INF] Initialized Scheduler Signaller of type: Quartz.Core.SchedulerSignalerImpl
2019-05-03 19:42:45.358 +08:00 [INF] Quartz Scheduler v.3.0.7.0 created.
2019-05-03 19:42:45.370 +08:00 [INF] RAMJobStore initialized.
2019-05-03 19:42:45.387 +08:00 [INF] Scheduler meta-data: Quartz Scheduler (v3.0.7.0) 'QuartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'Quartz.Core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'Quartz.Simpl.DefaultThreadPool' - with 10 threads.
  Using job-store 'Quartz.Simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2019-05-03 19:42:45.391 +08:00 [INF] Quartz scheduler 'QuartzScheduler' initialized
2019-05-03 19:42:45.392 +08:00 [INF] Quartz scheduler version: 3.0.7.0
2019-05-03 19:42:50.175 +08:00 [INF] User profile is available. Using 'C:\Users\gainorloss\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2019-05-03 19:43:25.862 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/api/Values/Get?id=0  
2019-05-03 19:43:25.968 +08:00 [INF] Executing endpoint 'Dnc.API.Controllers.ValuesController.Get (Dnc.API)'
2019-05-03 19:43:25.994 +08:00 [INF] Route matched with {action = "Get", controller = "Values"}. Executing action Dnc.API.Controllers.ValuesController.Get (Dnc.API)
2019-05-03 19:43:26.011 +08:00 [INF] Executing action method Dnc.API.Controllers.ValuesController.Get (Dnc.API) - Validation state: "Valid"
2019-05-03 19:43:29.298 +08:00 [ERR] 39d097010caf410ea0c9aa4201450e07
2019-05-03 19:43:29.646 +08:00 [INF] Executed action method Dnc.API.Controllers.ValuesController.Get (Dnc.API), returned result Microsoft.AspNetCore.Mvc.OkObjectResult in 3619.5107000000003ms.
2019-05-03 19:43:29.667 +08:00 [INF] Executing ObjectResult, writing value of type '<>f__AnonymousType0`4[[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[<>f__AnonymousType1`3[[Dnc.API.Models.ABC, Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.IEnumerable`1[[Dnc.API.Models.ABC, Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2019-05-03 19:43:29.808 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/api/Values/Get?id=0  
2019-05-03 19:43:29.812 +08:00 [INF] Executing endpoint 'Dnc.API.Controllers.ValuesController.Get (Dnc.API)'
2019-05-03 19:43:29.815 +08:00 [INF] Route matched with {action = "Get", controller = "Values"}. Executing action Dnc.API.Controllers.ValuesController.Get (Dnc.API)
2019-05-03 19:43:29.818 +08:00 [INF] Executing action method Dnc.API.Controllers.ValuesController.Get (Dnc.API) - Validation state: "Valid"
2019-05-03 19:43:29.863 +08:00 [INF] Executed action Dnc.API.Controllers.ValuesController.Get (Dnc.API) in 3860.7455ms
2019-05-03 19:43:29.868 +08:00 [INF] Executed endpoint 'Dnc.API.Controllers.ValuesController.Get (Dnc.API)'
2019-05-03 19:43:29.878 +08:00 [INF] Request finished in 4018.9688ms 200 application/json; charset=utf-8
2019-05-03 19:43:32.910 +08:00 [ERR] b8eeffc9a62d42299f2eaa4201451243
2019-05-03 19:43:32.962 +08:00 [INF] Executed action method Dnc.API.Controllers.ValuesController.Get (Dnc.API), returned result Microsoft.AspNetCore.Mvc.OkObjectResult in 3140.3794000000003ms.
2019-05-03 19:43:32.967 +08:00 [INF] Executing ObjectResult, writing value of type '<>f__AnonymousType0`4[[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[<>f__AnonymousType1`3[[Dnc.API.Models.ABC, Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.IEnumerable`1[[Dnc.API.Models.ABC, Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2019-05-03 19:43:32.977 +08:00 [INF] Executed action Dnc.API.Controllers.ValuesController.Get (Dnc.API) in 3158.9335ms
2019-05-03 19:43:32.979 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/api/Values/Get?id=0  
2019-05-03 19:43:32.979 +08:00 [INF] Executed endpoint 'Dnc.API.Controllers.ValuesController.Get (Dnc.API)'
2019-05-03 19:43:32.981 +08:00 [INF] Executing endpoint 'Dnc.API.Controllers.ValuesController.Get (Dnc.API)'
2019-05-03 19:43:32.984 +08:00 [INF] Request finished in 3175.2537ms 200 application/json; charset=utf-8
2019-05-03 19:43:32.987 +08:00 [INF] Route matched with {action = "Get", controller = "Values"}. Executing action Dnc.API.Controllers.ValuesController.Get (Dnc.API)
2019-05-03 19:43:32.993 +08:00 [INF] Executing action method Dnc.API.Controllers.ValuesController.Get (Dnc.API) - Validation state: "Valid"
2019-05-03 19:43:36.086 +08:00 [ERR] 8f98b980e73d41688c9faa42014515fb
2019-05-03 19:43:36.129 +08:00 [INF] Executed action method Dnc.API.Controllers.ValuesController.Get (Dnc.API), returned result Microsoft.AspNetCore.Mvc.OkObjectResult in 3132.9737ms.
2019-05-03 19:43:36.133 +08:00 [INF] Executing ObjectResult, writing value of type '<>f__AnonymousType0`4[[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[<>f__AnonymousType1`3[[Dnc.API.Models.ABC, Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.IEnumerable`1[[Dnc.API.Models.ABC, Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2019-05-03 19:43:36.142 +08:00 [INF] Executed action Dnc.API.Controllers.ValuesController.Get (Dnc.API) in 3148.7726000000002ms
2019-05-03 19:43:36.144 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/api/Values/Get?id=0  
2019-05-03 19:43:36.145 +08:00 [INF] Executed endpoint 'Dnc.API.Controllers.ValuesController.Get (Dnc.API)'
2019-05-03 19:43:36.146 +08:00 [INF] Executing endpoint 'Dnc.API.Controllers.ValuesController.Get (Dnc.API)'
2019-05-03 19:43:36.150 +08:00 [INF] Request finished in 3171.4932ms 200 application/json; charset=utf-8
2019-05-03 19:43:36.154 +08:00 [INF] Route matched with {action = "Get", controller = "Values"}. Executing action Dnc.API.Controllers.ValuesController.Get (Dnc.API)
2019-05-03 19:43:36.160 +08:00 [INF] Executing action method Dnc.API.Controllers.ValuesController.Get (Dnc.API) - Validation state: "Valid"
2019-05-03 19:43:39.254 +08:00 [ERR] d7901d368827452fb135aa42014519b2
2019-05-03 19:43:39.298 +08:00 [INF] Executed action method Dnc.API.Controllers.ValuesController.Get (Dnc.API), returned result Microsoft.AspNetCore.Mvc.OkObjectResult in 3133.5383ms.
2019-05-03 19:43:39.303 +08:00 [INF] Executing ObjectResult, writing value of type '<>f__AnonymousType0`4[[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[<>f__AnonymousType1`3[[Dnc.API.Models.ABC, Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.IEnumerable`1[[Dnc.API.Models.ABC, Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2019-05-03 19:43:39.313 +08:00 [INF] Executed action Dnc.API.Controllers.ValuesController.Get (Dnc.API) in 3153.0475ms
2019-05-03 19:43:39.315 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/api/Values/Get?id=0  
2019-05-03 19:43:39.316 +08:00 [INF] Executed endpoint 'Dnc.API.Controllers.ValuesController.Get (Dnc.API)'
2019-05-03 19:43:39.320 +08:00 [INF] Executing endpoint 'Dnc.API.Controllers.ValuesController.Get (Dnc.API)'
2019-05-03 19:43:39.322 +08:00 [INF] Request finished in 3178.3502ms 200 application/json; charset=utf-8
2019-05-03 19:43:39.325 +08:00 [INF] Route matched with {action = "Get", controller = "Values"}. Executing action Dnc.API.Controllers.ValuesController.Get (Dnc.API)
2019-05-03 19:43:39.335 +08:00 [INF] Executing action method Dnc.API.Controllers.ValuesController.Get (Dnc.API) - Validation state: "Valid"
2019-05-03 19:43:42.430 +08:00 [ERR] 5e8d7c6960a64fcb9221aa4201451d6b
2019-05-03 19:43:42.469 +08:00 [INF] Executed action method Dnc.API.Controllers.ValuesController.Get (Dnc.API), returned result Microsoft.AspNetCore.Mvc.OkObjectResult in 3128.6766000000002ms.
2019-05-03 19:43:42.472 +08:00 [INF] Executing ObjectResult, writing value of type '<>f__AnonymousType0`4[[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[<>f__AnonymousType1`3[[Dnc.API.Models.ABC, Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.IEnumerable`1[[Dnc.API.Models.ABC, Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2019-05-03 19:43:42.481 +08:00 [INF] Executed action Dnc.API.Controllers.ValuesController.Get (Dnc.API) in 3145.7128000000002ms
2019-05-03 19:43:42.483 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/api/Values/Get?id=0  
2019-05-03 19:43:42.484 +08:00 [INF] Executed endpoint 'Dnc.API.Controllers.ValuesController.Get (Dnc.API)'
2019-05-03 19:43:42.485 +08:00 [INF] Executing endpoint 'Dnc.API.Controllers.ValuesController.Get (Dnc.API)'
2019-05-03 19:43:42.487 +08:00 [INF] Request finished in 3171.9328ms 200 application/json; charset=utf-8
2019-05-03 19:43:42.491 +08:00 [INF] Route matched with {action = "Get", controller = "Values"}. Executing action Dnc.API.Controllers.ValuesController.Get (Dnc.API)
2019-05-03 19:43:42.496 +08:00 [INF] Executing action method Dnc.API.Controllers.ValuesController.Get (Dnc.API) - Validation state: "Valid"
2019-05-03 19:43:45.592 +08:00 [ERR] 3763a8f1a2e84c26ad91aa420145211f
2019-05-03 19:43:45.630 +08:00 [INF] Executed action method Dnc.API.Controllers.ValuesController.Get (Dnc.API), returned result Microsoft.AspNetCore.Mvc.OkObjectResult in 3129.1446ms.
2019-05-03 19:43:45.634 +08:00 [INF] Executing ObjectResult, writing value of type '<>f__AnonymousType0`4[[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[<>f__AnonymousType1`3[[Dnc.API.Models.ABC, Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.IEnumerable`1[[Dnc.API.Models.ABC, Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2019-05-03 19:43:45.640 +08:00 [INF] Executed action Dnc.API.Controllers.ValuesController.Get (Dnc.API) in 3144.0498000000002ms
2019-05-03 19:43:45.642 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/api/Values/Get?id=0  
2019-05-03 19:43:45.645 +08:00 [INF] Executed endpoint 'Dnc.API.Controllers.ValuesController.Get (Dnc.API)'
2019-05-03 19:43:45.647 +08:00 [INF] Executing endpoint 'Dnc.API.Controllers.ValuesController.Get (Dnc.API)'
2019-05-03 19:43:45.650 +08:00 [INF] Request finished in 3167.3546ms 200 application/json; charset=utf-8
2019-05-03 19:43:45.654 +08:00 [INF] Route matched with {action = "Get", controller = "Values"}. Executing action Dnc.API.Controllers.ValuesController.Get (Dnc.API)
2019-05-03 19:43:45.659 +08:00 [INF] Executing action method Dnc.API.Controllers.ValuesController.Get (Dnc.API) - Validation state: "Valid"
2019-05-03 19:43:48.751 +08:00 [ERR] aed0bffdc1b14c24b41eaa42014524d3
2019-05-03 19:43:48.794 +08:00 [INF] Executed action method Dnc.API.Controllers.ValuesController.Get (Dnc.API), returned result Microsoft.AspNetCore.Mvc.OkObjectResult in 3132.7096ms.
2019-05-03 19:43:48.799 +08:00 [INF] Executing ObjectResult, writing value of type '<>f__AnonymousType0`4[[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[<>f__AnonymousType1`3[[Dnc.API.Models.ABC, Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.IEnumerable`1[[Dnc.API.Models.ABC, Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2019-05-03 19:43:48.808 +08:00 [INF] Executed action Dnc.API.Controllers.ValuesController.Get (Dnc.API) in 3148.7940000000003ms
2019-05-03 19:43:48.809 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/api/Values/Get?id=0  
2019-05-03 19:43:48.810 +08:00 [INF] Executed endpoint 'Dnc.API.Controllers.ValuesController.Get (Dnc.API)'
2019-05-03 19:43:48.812 +08:00 [INF] Executing endpoint 'Dnc.API.Controllers.ValuesController.Get (Dnc.API)'
2019-05-03 19:43:48.815 +08:00 [INF] Request finished in 3173.0882ms 200 application/json; charset=utf-8
2019-05-03 19:43:48.820 +08:00 [INF] Route matched with {action = "Get", controller = "Values"}. Executing action Dnc.API.Controllers.ValuesController.Get (Dnc.API)
2019-05-03 19:43:48.824 +08:00 [INF] Executing action method Dnc.API.Controllers.ValuesController.Get (Dnc.API) - Validation state: "Valid"
2019-05-03 19:43:49.563 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/api/Values/Get?id=0  
2019-05-03 19:43:49.565 +08:00 [INF] Executing endpoint 'Dnc.API.Controllers.ValuesController.Get (Dnc.API)'
2019-05-03 19:43:49.568 +08:00 [INF] Route matched with {action = "Get", controller = "Values"}. Executing action Dnc.API.Controllers.ValuesController.Get (Dnc.API)
2019-05-03 19:43:49.570 +08:00 [INF] Executing action method Dnc.API.Controllers.ValuesController.Get (Dnc.API) - Validation state: "Valid"
2019-05-03 19:43:49.749 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/api/Values/Get?id=0  
2019-05-03 19:43:49.751 +08:00 [INF] Executing endpoint 'Dnc.API.Controllers.ValuesController.Get (Dnc.API)'
2019-05-03 19:43:49.753 +08:00 [INF] Route matched with {action = "Get", controller = "Values"}. Executing action Dnc.API.Controllers.ValuesController.Get (Dnc.API)
2019-05-03 19:43:49.757 +08:00 [INF] Executing action method Dnc.API.Controllers.ValuesController.Get (Dnc.API) - Validation state: "Valid"
2019-05-03 19:43:49.941 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/api/Values/Get?id=0  
2019-05-03 19:43:49.942 +08:00 [INF] Executing endpoint 'Dnc.API.Controllers.ValuesController.Get (Dnc.API)'
2019-05-03 19:43:49.944 +08:00 [INF] Route matched with {action = "Get", controller = "Values"}. Executing action Dnc.API.Controllers.ValuesController.Get (Dnc.API)
2019-05-03 19:43:49.947 +08:00 [INF] Executing action method Dnc.API.Controllers.ValuesController.Get (Dnc.API) - Validation state: "Valid"
2019-05-03 19:43:51.920 +08:00 [ERR] 5576b640f50845879033aa420145288a
2019-05-03 19:43:51.966 +08:00 [INF] Executed action method Dnc.API.Controllers.ValuesController.Get (Dnc.API), returned result Microsoft.AspNetCore.Mvc.OkObjectResult in 3138.1582000000003ms.
2019-05-03 19:43:51.971 +08:00 [INF] Executing ObjectResult, writing value of type '<>f__AnonymousType0`4[[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[<>f__AnonymousType1`3[[Dnc.API.Models.ABC, Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.IEnumerable`1[[Dnc.API.Models.ABC, Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2019-05-03 19:43:51.982 +08:00 [INF] Executed action Dnc.API.Controllers.ValuesController.Get (Dnc.API) in 3157.322ms
2019-05-03 19:43:51.985 +08:00 [INF] Executed endpoint 'Dnc.API.Controllers.ValuesController.Get (Dnc.API)'
2019-05-03 19:43:51.990 +08:00 [INF] Request finished in 3180.1442ms 200 application/json; charset=utf-8
2019-05-03 19:43:52.666 +08:00 [ERR] e6cd83ffa9b145678517aa420145296a
2019-05-03 19:43:52.715 +08:00 [INF] Executed action method Dnc.API.Controllers.ValuesController.Get (Dnc.API), returned result Microsoft.AspNetCore.Mvc.OkObjectResult in 3141.6567ms.
2019-05-03 19:43:52.724 +08:00 [INF] Executing ObjectResult, writing value of type '<>f__AnonymousType0`4[[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[<>f__AnonymousType1`3[[Dnc.API.Models.ABC, Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.IEnumerable`1[[Dnc.API.Models.ABC, Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2019-05-03 19:43:52.735 +08:00 [INF] Executed action Dnc.API.Controllers.ValuesController.Get (Dnc.API) in 3164.6658ms
2019-05-03 19:43:52.741 +08:00 [INF] Executed endpoint 'Dnc.API.Controllers.ValuesController.Get (Dnc.API)'
2019-05-03 19:43:52.743 +08:00 [INF] Request finished in 3180.8452ms 200 application/json; charset=utf-8
2019-05-03 19:43:52.851 +08:00 [ERR] c1021d8b14db44dd88ceaa42014529a1
2019-05-03 19:43:52.890 +08:00 [INF] Executed action method Dnc.API.Controllers.ValuesController.Get (Dnc.API), returned result Microsoft.AspNetCore.Mvc.OkObjectResult in 3129.8515ms.
2019-05-03 19:43:52.894 +08:00 [INF] Executing ObjectResult, writing value of type '<>f__AnonymousType0`4[[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[<>f__AnonymousType1`3[[Dnc.API.Models.ABC, Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.IEnumerable`1[[Dnc.API.Models.ABC, Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2019-05-03 19:43:52.967 +08:00 [INF] Executed action Dnc.API.Controllers.ValuesController.Get (Dnc.API) in 3210.4258ms
2019-05-03 19:43:52.970 +08:00 [INF] Executed endpoint 'Dnc.API.Controllers.ValuesController.Get (Dnc.API)'
2019-05-03 19:43:52.972 +08:00 [INF] Request finished in 3223.6919ms 200 application/json; charset=utf-8
2019-05-03 19:43:53.037 +08:00 [ERR] 8c021f91279249aa92feaa42014529d9
2019-05-03 19:43:53.077 +08:00 [INF] Executed action method Dnc.API.Controllers.ValuesController.Get (Dnc.API), returned result Microsoft.AspNetCore.Mvc.OkObjectResult in 3127.6895ms.
2019-05-03 19:43:53.082 +08:00 [INF] Executing ObjectResult, writing value of type '<>f__AnonymousType0`4[[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[<>f__AnonymousType1`3[[Dnc.API.Models.ABC, Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.IEnumerable`1[[Dnc.API.Models.ABC, Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2019-05-03 19:43:53.087 +08:00 [INF] Executed action Dnc.API.Controllers.ValuesController.Get (Dnc.API) in 3140.0829000000003ms
2019-05-03 19:43:53.091 +08:00 [INF] Executed endpoint 'Dnc.API.Controllers.ValuesController.Get (Dnc.API)'
2019-05-03 19:43:53.093 +08:00 [INF] Request finished in 3152.3872ms 200 application/json; charset=utf-8
2019-05-03 19:44:28.810 +08:00 [DBG] TaskSchedulingThreadPool configured with max concurrency of 10 and TaskScheduler ThreadPoolTaskScheduler.
2019-05-03 19:44:29.030 +08:00 [INF] Initialized Scheduler Signaller of type: Quartz.Core.SchedulerSignalerImpl
2019-05-03 19:44:29.052 +08:00 [INF] Quartz Scheduler v.3.0.7.0 created.
2019-05-03 19:44:29.062 +08:00 [INF] RAMJobStore initialized.
2019-05-03 19:44:29.076 +08:00 [INF] Scheduler meta-data: Quartz Scheduler (v3.0.7.0) 'QuartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'Quartz.Core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'Quartz.Simpl.DefaultThreadPool' - with 10 threads.
  Using job-store 'Quartz.Simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2019-05-03 19:44:29.079 +08:00 [INF] Quartz scheduler 'QuartzScheduler' initialized
2019-05-03 19:44:29.081 +08:00 [INF] Quartz scheduler version: 3.0.7.0
2019-05-03 19:44:33.106 +08:00 [INF] User profile is available. Using 'C:\Users\gainorloss\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2019-05-03 19:44:41.569 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/swagger/index.html  
2019-05-03 19:44:42.006 +08:00 [INF] Request finished in 438.8838ms 200 text/html
2019-05-03 19:44:42.406 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/swagger/v1/swagger.json  
2019-05-03 19:44:42.640 +08:00 [INF] Request finished in 234.106ms 200 application/json;charset=utf-8
2019-05-03 19:44:52.288 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/api/Values/Get  
2019-05-03 19:44:52.410 +08:00 [INF] Executing endpoint 'Dnc.API.Controllers.ValuesController.Get (Dnc.API)'
2019-05-03 19:44:52.434 +08:00 [INF] Route matched with {action = "Get", controller = "Values"}. Executing action Dnc.API.Controllers.ValuesController.Get (Dnc.API)
2019-05-03 19:44:52.572 +08:00 [INF] Executing action method Dnc.API.Controllers.ValuesController.Get (Dnc.API) - Validation state: "Valid"
2019-05-03 19:44:52.585 +08:00 [DBG] aha
2019-05-03 19:44:52.703 +08:00 [DBG] redis:gainorloss
2019-05-03 19:44:55.749 +08:00 [DBG] redis:gainorloss
2019-05-03 19:44:55.868 +08:00 [DBG] redis:gainorloss
2019-05-03 19:44:55.869 +08:00 [ERR] 30afe5ec82cd4b2aac7aaa420145737a
2019-05-03 19:44:56.144 +08:00 [INF] Executed action method Dnc.API.Controllers.ValuesController.Get (Dnc.API), returned result Microsoft.AspNetCore.Mvc.OkObjectResult in 3557.5539000000003ms.
2019-05-03 19:44:56.162 +08:00 [INF] Executing ObjectResult, writing value of type '<>f__AnonymousType0`4[[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[<>f__AnonymousType1`3[[Dnc.API.Models.ABC, Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.IEnumerable`1[[Dnc.API.Models.ABC, Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2019-05-03 19:44:56.251 +08:00 [INF] Executed action Dnc.API.Controllers.ValuesController.Get (Dnc.API) in 3807.5858000000003ms
2019-05-03 19:44:56.253 +08:00 [INF] Executed endpoint 'Dnc.API.Controllers.ValuesController.Get (Dnc.API)'
2019-05-03 19:44:56.255 +08:00 [INF] Request finished in 3967.1502ms 200 application/json; charset=utf-8
2019-05-03 20:56:36.765 +08:00 [DBG] TaskSchedulingThreadPool configured with max concurrency of 10 and TaskScheduler ThreadPoolTaskScheduler.
2019-05-03 20:56:37.090 +08:00 [INF] Initialized Scheduler Signaller of type: Quartz.Core.SchedulerSignalerImpl
2019-05-03 20:56:37.105 +08:00 [INF] Quartz Scheduler v.3.0.7.0 created.
2019-05-03 20:56:37.115 +08:00 [INF] RAMJobStore initialized.
2019-05-03 20:56:37.147 +08:00 [INF] Scheduler meta-data: Quartz Scheduler (v3.0.7.0) 'QuartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'Quartz.Core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'Quartz.Simpl.DefaultThreadPool' - with 10 threads.
  Using job-store 'Quartz.Simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2019-05-03 20:56:37.150 +08:00 [INF] Quartz scheduler 'QuartzScheduler' initialized
2019-05-03 20:56:37.153 +08:00 [INF] Quartz scheduler version: 3.0.7.0
2019-05-03 20:56:43.731 +08:00 [INF] User profile is available. Using 'C:\Users\gainorloss\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2019-05-03 20:57:07.806 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/apidoc  
2019-05-03 20:57:07.984 +08:00 [INF] Request finished in 177.4235ms 404 
2019-05-03 20:58:10.483 +08:00 [DBG] TaskSchedulingThreadPool configured with max concurrency of 10 and TaskScheduler ThreadPoolTaskScheduler.
2019-05-03 20:58:10.706 +08:00 [INF] Initialized Scheduler Signaller of type: Quartz.Core.SchedulerSignalerImpl
2019-05-03 20:58:10.735 +08:00 [INF] Quartz Scheduler v.3.0.7.0 created.
2019-05-03 20:58:10.746 +08:00 [INF] RAMJobStore initialized.
2019-05-03 20:58:10.759 +08:00 [INF] Scheduler meta-data: Quartz Scheduler (v3.0.7.0) 'QuartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'Quartz.Core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'Quartz.Simpl.DefaultThreadPool' - with 10 threads.
  Using job-store 'Quartz.Simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2019-05-03 20:58:10.761 +08:00 [INF] Quartz scheduler 'QuartzScheduler' initialized
2019-05-03 20:58:10.763 +08:00 [INF] Quartz scheduler version: 3.0.7.0
2019-05-03 20:58:15.443 +08:00 [INF] User profile is available. Using 'C:\Users\gainorloss\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2019-05-03 20:58:17.496 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/v1/apidoc  
2019-05-03 20:58:17.568 +08:00 [INF] Request finished in 74.0956ms 200 text/html; charset=utf-8
2019-05-03 20:58:17.595 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/v1/apidoc/docViewData.json?v=636924850961575321  
2019-05-03 20:58:17.595 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/v1/apidoc/docView.min.js?v=636924850961575321  
2019-05-03 20:58:17.595 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/v1/apidoc/docView.min.css?v=636924850961575321  
2019-05-03 20:58:17.600 +08:00 [INF] Request finished in 4.5866ms 200 application/javascript
2019-05-03 20:58:17.613 +08:00 [INF] Request finished in 17.8788ms 200 text/css
2019-05-03 20:58:17.814 +08:00 [INF] FastExpressions For Type: AspNetCore.ApiDoc.Internal.ControllerInformation
.Lambda #Lambda1<System.Func`5[System.Object,System.String,System.Boolean,System.Object,System.Object]>(
    System.Object $@object,
    System.String $name,
    System.Boolean $isAssign,
    System.Object $value) {
    .Block(
        System.Object $_,
        AspNetCore.ApiDoc.Internal.ControllerInformation $current) {
        $_;
        .If ($value != null) {
            $_ = $value
        } .Else {
            .Default(System.Void)
        };
        $current = $@object .As AspNetCore.ApiDoc.Internal.ControllerInformation;
        .Try {
            .Block() {
                .If (
                    $isAssign
                ) {
                    .Switch ($name) {
                    .Case ("IsObsolete"):
                            .Block() {
                                ($current .As AspNetCore.ApiDoc.Internal.Information).IsObsolete = (System.Boolean)$value;
                                .Default(System.Void)
                            }
                    .Case ("Message"):
                            .Block() {
                                ($current .As AspNetCore.ApiDoc.Internal.Information).Message = (System.String)$value;
                                .Default(System.Void)
                            }
                    .Default:
                            .Throw .New System.Collections.Generic.KeyNotFoundException(.Call System.String.Concat(
                                    "Cannot found the property or field '",
                                    $name,
                                    "' of 'AspNetCore.ApiDoc.Internal.ControllerInformation'"))
                    }
                } .Else {
                    .Switch ($name) {
                    .Case ("Id"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Id;
                                .Default(System.Void)
                            }
                    .Case ("Name"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Name;
                                .Default(System.Void)
                            }
                    .Case ("Description"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Description;
                                .Default(System.Void)
                            }
                    .Case ("IsObsolete"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).IsObsolete;
                                .Default(System.Void)
                            }
                    .Case ("Message"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Message;
                                .Default(System.Void)
                            }
                    .Case ("Remarks"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Remarks;
                                .Default(System.Void)
                            }
                    .Case ("Order"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Order;
                                .Default(System.Void)
                            }
                    .Case ("Parent"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Parent;
                                .Default(System.Void)
                            }
                    .Case ("Current"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Current;
                                .Default(System.Void)
                            }
                    .Case ("Childrens"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Childrens;
                                .Default(System.Void)
                            }
                    .Default:
                            .Throw .New System.Collections.Generic.KeyNotFoundException(.Call System.String.Concat(
                                    "Cannot found the property or field '",
                                    $name,
                                    "' of 'AspNetCore.ApiDoc.Internal.ControllerInformation'"))
                    }
                }
            }
        } .Catch (System.Exception $ex) {
            .Throw .New System.Exception(
                .Call System.String.Concat(
                    " Occur error when Get or Set the property or field '",
                    $name,
                    "' of 'AspNetCore.ApiDoc.Internal.ControllerInformation' "),
                $ex)
        };
        $_
    }
}
2019-05-03 20:58:17.942 +08:00 [INF] FastExpressions For Type: AspNetCore.ApiDoc.Internal.ActionInformation
.Lambda #Lambda1<System.Func`5[System.Object,System.String,System.Boolean,System.Object,System.Object]>(
    System.Object $@object,
    System.String $name,
    System.Boolean $isAssign,
    System.Object $value) {
    .Block(
        System.Object $_,
        AspNetCore.ApiDoc.Internal.ActionInformation $current) {
        $_;
        .If ($value != null) {
            $_ = $value
        } .Else {
            .Default(System.Void)
        };
        $current = $@object .As AspNetCore.ApiDoc.Internal.ActionInformation;
        .Try {
            .Block() {
                .If (
                    $isAssign
                ) {
                    .Switch ($name) {
                    .Case ("Request"):
                            .Block() {
                                $current.Request = (System.Collections.Generic.SortedSet`1[AspNetCore.ApiDoc.ModelInfo])$value;
                                .Default(System.Void)
                            }
                    .Case ("RequestExample"):
                            .Block() {
                                $current.RequestExample = (System.Collections.Generic.SortedDictionary`2[System.String,System.Object])$value;
                                .Default(System.Void)
                            }
                    .Case ("Response"):
                            .Block() {
                                $current.Response = (System.Collections.Generic.SortedSet`1[AspNetCore.ApiDoc.ModelInfo])$value;
                                .Default(System.Void)
                            }
                    .Case ("ResponseExample"):
                            .Block() {
                                $current.ResponseExample = (System.Collections.Generic.Dictionary`2[System.String,System.Object])$value;
                                .Default(System.Void)
                            }
                    .Case ("Url"):
                            .Block() {
                                $current.Url = (System.String)$value;
                                .Default(System.Void)
                            }
                    .Case ("Method"):
                            .Block() {
                                $current.Method = (System.String)$value;
                                .Default(System.Void)
                            }
                    .Case ("Id"):
                            .Call .Constant<System.Reflection.RtFieldInfo>(System.String <Id>k__BackingField).SetValue(
                                $current .As AspNetCore.ApiDoc.Internal.Information,
                                $value)
                    .Case ("Name"):
                            .Call .Constant<System.Reflection.RtFieldInfo>(System.String <Name>k__BackingField).SetValue(
                                $current .As AspNetCore.ApiDoc.Internal.Information,
                                $value)
                    .Case ("Description"):
                            .Call .Constant<System.Reflection.RtFieldInfo>(System.String <Description>k__BackingField).SetValue(
                                $current .As AspNetCore.ApiDoc.Internal.Information,
                                $value)
                    .Case ("IsObsolete"):
                            .Block() {
                                ($current .As AspNetCore.ApiDoc.Internal.Information).IsObsolete = (System.Boolean)$value;
                                .Default(System.Void)
                            }
                    .Case ("Message"):
                            .Block() {
                                ($current .As AspNetCore.ApiDoc.Internal.Information).Message = (System.String)$value;
                                .Default(System.Void)
                            }
                    .Case ("Remarks"):
                            .Call .Constant<System.Reflection.RtFieldInfo>(System.String <Remarks>k__BackingField).SetValue(
                                $current .As AspNetCore.ApiDoc.Internal.Information,
                                $value)
                    .Case ("Order"):
                            .Call .Constant<System.Reflection.RtFieldInfo>(Int32 <Order>k__BackingField).SetValue(
                                $current .As AspNetCore.ApiDoc.Internal.Information,
                                $value)
                    .Case ("Parent"):
                            .Call .Constant<System.Reflection.RtFieldInfo>(System.Type <Parent>k__BackingField).SetValue(
                                $current .As AspNetCore.ApiDoc.Internal.Information,
                                $value)
                    .Case ("Current"):
                            .Call .Constant<System.Reflection.RtFieldInfo>(System.Type <Current>k__BackingField).SetValue(
                                $current .As AspNetCore.ApiDoc.Internal.Information,
                                $value)
                    .Case ("Childrens"):
                            .Call .Constant<System.Reflection.RtFieldInfo>(System.Collections.Generic.List`1[AspNetCore.ApiDoc.Internal.Information] <Childrens>k__BackingField).SetValue(
                                $current .As AspNetCore.ApiDoc.Internal.Information,
                                $value)
                    .Case ("_descriptor"):
                            .Block() {
                                $current._descriptor = (AspNetCore.ApiDoc.ApiDocDescriptor)$value;
                                .Default(System.Void)
                            }
                    .Default:
                            .Throw .New System.Collections.Generic.KeyNotFoundException(.Call System.String.Concat(
                                    "Cannot found the property or field '",
                                    $name,
                                    "' of 'AspNetCore.ApiDoc.Internal.ActionInformation'"))
                    }
                } .Else {
                    .Switch ($name) {
                    .Case ("Request"):
                            .Block() {
                                $_ = (System.Object)$current.Request;
                                .Default(System.Void)
                            }
                    .Case ("RequestExample"):
                            .Block() {
                                $_ = (System.Object)$current.RequestExample;
                                .Default(System.Void)
                            }
                    .Case ("Response"):
                            .Block() {
                                $_ = (System.Object)$current.Response;
                                .Default(System.Void)
                            }
                    .Case ("ResponseExample"):
                            .Block() {
                                $_ = (System.Object)$current.ResponseExample;
                                .Default(System.Void)
                            }
                    .Case ("Url"):
                            .Block() {
                                $_ = (System.Object)$current.Url;
                                .Default(System.Void)
                            }
                    .Case ("Method"):
                            .Block() {
                                $_ = (System.Object)$current.Method;
                                .Default(System.Void)
                            }
                    .Case ("Id"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Id;
                                .Default(System.Void)
                            }
                    .Case ("Name"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Name;
                                .Default(System.Void)
                            }
                    .Case ("Description"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Description;
                                .Default(System.Void)
                            }
                    .Case ("IsObsolete"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).IsObsolete;
                                .Default(System.Void)
                            }
                    .Case ("Message"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Message;
                                .Default(System.Void)
                            }
                    .Case ("Remarks"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Remarks;
                                .Default(System.Void)
                            }
                    .Case ("Order"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Order;
                                .Default(System.Void)
                            }
                    .Case ("Parent"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Parent;
                                .Default(System.Void)
                            }
                    .Case ("Current"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Current;
                                .Default(System.Void)
                            }
                    .Case ("Childrens"):
                            .Block() {
                                $_ = (System.Object)($current .As AspNetCore.ApiDoc.Internal.Information).Childrens;
                                .Default(System.Void)
                            }
                    .Case ("_descriptor"):
                            .Block() {
                                $_ = (System.Object)$current._descriptor;
                                .Default(System.Void)
                            }
                    .Default:
                            .Throw .New System.Collections.Generic.KeyNotFoundException(.Call System.String.Concat(
                                    "Cannot found the property or field '",
                                    $name,
                                    "' of 'AspNetCore.ApiDoc.Internal.ActionInformation'"))
                    }
                }
            }
        } .Catch (System.Exception $ex) {
            .Throw .New System.Exception(
                .Call System.String.Concat(
                    " Occur error when Get or Set the property or field '",
                    $name,
                    "' of 'AspNetCore.ApiDoc.Internal.ActionInformation' "),
                $ex)
        };
        $_
    }
}
2019-05-03 20:58:18.108 +08:00 [INF] FastExpressions For Type: AspNetCore.ApiDoc.ModelInfo
.Lambda #Lambda1<System.Func`5[System.Object,System.String,System.Boolean,System.Object,System.Object]>(
    System.Object $@object,
    System.String $name,
    System.Boolean $isAssign,
    System.Object $value) {
    .Block(
        System.Object $_,
        AspNetCore.ApiDoc.ModelInfo $current) {
        $_;
        .If ($value != null) {
            $_ = $value
        } .Else {
            .Default(System.Void)
        };
        $current = $@object .As AspNetCore.ApiDoc.ModelInfo;
        .Try {
            .Block() {
                .If (
                    $isAssign
                ) {
                    .Switch ($name) {
                    .Case ("CurrentType"):
                            .Block() {
                                $current.CurrentType = (System.Type)$value;
                                .Default(System.Void)
                            }
                    .Case ("Name"):
                            .Block() {
                                $current.Name = (System.String)$value;
                                .Default(System.Void)
                            }
                    .Case ("Type"):
                            .Block() {
                                $current.Type = (System.String)$value;
                                .Default(System.Void)
                            }
                    .Case ("IsRequired"):
                            .Block() {
                                $current.IsRequired = (System.Boolean)$value;
                                .Default(System.Void)
                            }
                    .Case ("IsLoop"):
                            .Block() {
                                $current.IsLoop = (System.Boolean)$value;
                                .Default(System.Void)
                            }
                    .Case ("Description"):
                            .Block() {
                                $current.Description = (System.String)$value;
                                .Default(System.Void)
                            }
                    .Case ("Remarks"):
                            .Block() {
                                $current.Remarks = (System.String)$value;
                                .Default(System.Void)
                            }
                    .Case ("Value"):
                            .Block() {
                                $current.Value = (System.Object)$value;
                                .Default(System.Void)
                            }
                    .Case ("IsArray"):
                            .Block() {
                                $current.IsArray = (System.Boolean)$value;
                                .Default(System.Void)
                            }
                    .Case ("Parent"):
                            .Block() {
                                $current.Parent = (AspNetCore.ApiDoc.ModelInfo)$value;
                                .Default(System.Void)
                            }
                    .Case ("IsEnum"):
                            .Block() {
                                $current.IsEnum = (System.Boolean)$value;
                                .Default(System.Void)
                            }
                    .Case ("Children"):
                            .Block() {
                                $current.Children = (System.Collections.Generic.SortedSet`1[AspNetCore.ApiDoc.ModelInfo])$value;
                                .Default(System.Void)
                            }
                    .Default:
                            .Throw .New System.Collections.Generic.KeyNotFoundException(.Call System.String.Concat(
                                    "Cannot found the property or field '",
                                    $name,
                                    "' of 'AspNetCore.ApiDoc.ModelInfo'"))
                    }
                } .Else {
                    .Switch ($name) {
                    .Case ("CurrentType"):
                            .Block() {
                                $_ = (System.Object)$current.CurrentType;
                                .Default(System.Void)
                            }
                    .Case ("Name"):
                            .Block() {
                                $_ = (System.Object)$current.Name;
                                .Default(System.Void)
                            }
                    .Case ("Type"):
                            .Block() {
                                $_ = (System.Object)$current.Type;
                                .Default(System.Void)
                            }
                    .Case ("IsRequired"):
                            .Block() {
                                $_ = (System.Object)$current.IsRequired;
                                .Default(System.Void)
                            }
                    .Case ("IsLoop"):
                            .Block() {
                                $_ = (System.Object)$current.IsLoop;
                                .Default(System.Void)
                            }
                    .Case ("Description"):
                            .Block() {
                                $_ = (System.Object)$current.Description;
                                .Default(System.Void)
                            }
                    .Case ("Remarks"):
                            .Block() {
                                $_ = (System.Object)$current.Remarks;
                                .Default(System.Void)
                            }
                    .Case ("Value"):
                            .Block() {
                                $_ = (System.Object)$current.Value;
                                .Default(System.Void)
                            }
                    .Case ("IsArray"):
                            .Block() {
                                $_ = (System.Object)$current.IsArray;
                                .Default(System.Void)
                            }
                    .Case ("Parent"):
                            .Block() {
                                $_ = (System.Object)$current.Parent;
                                .Default(System.Void)
                            }
                    .Case ("IsEnum"):
                            .Block() {
                                $_ = (System.Object)$current.IsEnum;
                                .Default(System.Void)
                            }
                    .Case ("Children"):
                            .Block() {
                                $_ = (System.Object)$current.Children;
                                .Default(System.Void)
                            }
                    .Default:
                            .Throw .New System.Collections.Generic.KeyNotFoundException(.Call System.String.Concat(
                                    "Cannot found the property or field '",
                                    $name,
                                    "' of 'AspNetCore.ApiDoc.ModelInfo'"))
                    }
                }
            }
        } .Catch (System.Exception $ex) {
            .Throw .New System.Exception(
                .Call System.String.Concat(
                    " Occur error when Get or Set the property or field '",
                    $name,
                    "' of 'AspNetCore.ApiDoc.ModelInfo' "),
                $ex)
        };
        $_
    }
}
2019-05-03 20:58:18.184 +08:00 [INF] Request finished in 588.8018ms 200 application/javascript
2019-05-03 20:58:29.585 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/api/{v:apiVersion}/Values/Get?id=0  
2019-05-03 20:58:29.686 +08:00 [INF] Request finished in 101.2903ms 404 
2019-05-03 20:58:44.541 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/api/{v:apiVersion}/Values/Get?id=0  
2019-05-03 20:58:44.545 +08:00 [INF] Request finished in 4.6031ms 404 
2019-05-03 20:58:46.137 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/api/{v:apiVersion}/Values/Get?id=0  
2019-05-03 20:58:46.139 +08:00 [INF] Request finished in 2.4316ms 404 
2019-05-03 20:58:46.659 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/api/{v:apiVersion}/Values/Get?id=0  
2019-05-03 20:58:46.661 +08:00 [INF] Request finished in 2.3778ms 404 
2019-05-03 20:58:46.883 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/api/{v:apiVersion}/Values/Get?id=0  
2019-05-03 20:58:46.886 +08:00 [INF] Request finished in 2.7997ms 404 
2019-05-03 20:58:47.115 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/api/{v:apiVersion}/Values/Get?id=0  
2019-05-03 20:58:47.117 +08:00 [INF] Request finished in 2.1625ms 404 
2019-05-03 20:58:47.339 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/api/{v:apiVersion}/Values/Get?id=0  
2019-05-03 20:58:47.341 +08:00 [INF] Request finished in 1.9461ms 404 
2019-05-03 20:58:47.563 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/api/{v:apiVersion}/Values/Get?id=0  
2019-05-03 20:58:47.566 +08:00 [INF] Request finished in 3.1784ms 404 
2019-05-03 20:58:47.779 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/api/{v:apiVersion}/Values/Get?id=0  
2019-05-03 20:58:47.781 +08:00 [INF] Request finished in 2.0505ms 404 
2019-05-03 20:58:55.646 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/api/v1/Values/Get?id=0  
2019-05-03 20:58:55.649 +08:00 [INF] Request finished in 2.7086ms 404 
2019-05-03 20:58:56.580 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/api/v1/Values/Get?id=0  
2019-05-03 20:58:56.582 +08:00 [INF] Request finished in 2.8206ms 404 
2019-05-03 20:58:57.027 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/api/v1/Values/Get?id=0  
2019-05-03 20:58:57.029 +08:00 [INF] Request finished in 2.0179ms 404 
2019-05-03 20:58:57.267 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/api/v1/Values/Get?id=0  
2019-05-03 20:58:57.269 +08:00 [INF] Request finished in 1.9739ms 404 
2019-05-03 20:58:57.508 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/api/v1/Values/Get?id=0  
2019-05-03 20:58:57.510 +08:00 [INF] Request finished in 2.3212ms 404 
2019-05-03 20:58:57.731 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/api/v1/Values/Get?id=0  
2019-05-03 20:58:57.733 +08:00 [INF] Request finished in 1.9357ms 404 
2019-05-03 21:01:32.633 +08:00 [DBG] TaskSchedulingThreadPool configured with max concurrency of 10 and TaskScheduler ThreadPoolTaskScheduler.
2019-05-03 21:01:32.869 +08:00 [INF] Initialized Scheduler Signaller of type: Quartz.Core.SchedulerSignalerImpl
2019-05-03 21:01:32.902 +08:00 [INF] Quartz Scheduler v.3.0.7.0 created.
2019-05-03 21:01:32.911 +08:00 [INF] RAMJobStore initialized.
2019-05-03 21:01:32.923 +08:00 [INF] Scheduler meta-data: Quartz Scheduler (v3.0.7.0) 'QuartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'Quartz.Core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'Quartz.Simpl.DefaultThreadPool' - with 10 threads.
  Using job-store 'Quartz.Simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2019-05-03 21:01:32.926 +08:00 [INF] Quartz scheduler 'QuartzScheduler' initialized
2019-05-03 21:01:32.928 +08:00 [INF] Quartz scheduler version: 3.0.7.0
2019-05-03 21:01:37.205 +08:00 [INF] User profile is available. Using 'C:\Users\gainorloss\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2019-05-03 21:01:38.315 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/swagger/index.html  
2019-05-03 21:01:38.812 +08:00 [INF] Request finished in 500.47ms 200 text/html
2019-05-03 21:01:39.918 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/swagger/v1/swagger.json  
2019-05-03 21:01:40.186 +08:00 [INF] Request finished in 268.1034ms 200 application/json;charset=utf-8
2019-05-03 21:01:57.282 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/api/1/Values/Get  
2019-05-03 21:01:57.386 +08:00 [INF] Executing endpoint 'Dnc.API.Controllers.ValuesController.Get (Dnc.API)'
2019-05-03 21:01:57.411 +08:00 [INF] Route matched with {action = "Get", controller = "Values"}. Executing action Dnc.API.Controllers.ValuesController.Get (Dnc.API)
2019-05-03 21:01:57.596 +08:00 [INF] Executing action method Dnc.API.Controllers.ValuesController.Get (Dnc.API) - Validation state: "Valid"
2019-05-03 21:01:57.611 +08:00 [DBG] aha
2019-05-03 21:01:57.725 +08:00 [DBG] redis:gainorloss
2019-05-03 21:02:00.773 +08:00 [DBG] redis:gainorloss
2019-05-03 21:02:00.937 +08:00 [DBG] redis:gainorloss
2019-05-03 21:02:00.939 +08:00 [ERR] 76181d538a84412cbe10aa42015a9f7b
2019-05-03 21:02:01.342 +08:00 [INF] Executed action method Dnc.API.Controllers.ValuesController.Get (Dnc.API), returned result Microsoft.AspNetCore.Mvc.OkObjectResult in 3729.9056ms.
2019-05-03 21:02:01.374 +08:00 [INF] Executing ObjectResult, writing value of type '<>f__AnonymousType0`4[[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[<>f__AnonymousType1`3[[Dnc.API.Models.ABC, Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.IEnumerable`1[[Dnc.API.Models.ABC, Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2019-05-03 21:02:01.461 +08:00 [INF] Executed action Dnc.API.Controllers.ValuesController.Get (Dnc.API) in 4043.1034000000004ms
2019-05-03 21:02:01.463 +08:00 [INF] Executed endpoint 'Dnc.API.Controllers.ValuesController.Get (Dnc.API)'
2019-05-03 21:02:01.466 +08:00 [INF] Request finished in 4183.9928ms 200 application/json; charset=utf-8
2019-05-03 21:02:34.712 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/api/1.0/Values/Get  
2019-05-03 21:02:34.730 +08:00 [INF] Executing endpoint 'Dnc.API.Controllers.ValuesController.Get (Dnc.API)'
2019-05-03 21:02:34.735 +08:00 [INF] Route matched with {action = "Get", controller = "Values"}. Executing action Dnc.API.Controllers.ValuesController.Get (Dnc.API)
2019-05-03 21:02:34.818 +08:00 [INF] Executing action method Dnc.API.Controllers.ValuesController.Get (Dnc.API) - Validation state: "Valid"
2019-05-03 21:02:34.820 +08:00 [DBG] aha
2019-05-03 21:02:34.907 +08:00 [DBG] redis:gainorloss
2019-05-03 21:02:37.952 +08:00 [DBG] redis:gainorloss
2019-05-03 21:02:37.955 +08:00 [DBG] redis:gainorloss
2019-05-03 21:02:37.956 +08:00 [ERR] 2cb43132f2a44efd9dfdaa42015acadc
2019-05-03 21:02:38.007 +08:00 [INF] Executed action method Dnc.API.Controllers.ValuesController.Get (Dnc.API), returned result Microsoft.AspNetCore.Mvc.OkObjectResult in 3186.5130000000004ms.
2019-05-03 21:02:38.011 +08:00 [INF] Executing ObjectResult, writing value of type '<>f__AnonymousType0`4[[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[<>f__AnonymousType1`3[[Dnc.API.Models.ABC, Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.IEnumerable`1[[Dnc.API.Models.ABC, Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2019-05-03 21:02:38.021 +08:00 [INF] Executed action Dnc.API.Controllers.ValuesController.Get (Dnc.API) in 3283.7645ms
2019-05-03 21:02:38.024 +08:00 [INF] Executed endpoint 'Dnc.API.Controllers.ValuesController.Get (Dnc.API)'
2019-05-03 21:02:38.026 +08:00 [INF] Request finished in 3314.3065ms 200 application/json; charset=utf-8
2019-05-03 21:04:28.061 +08:00 [DBG] TaskSchedulingThreadPool configured with max concurrency of 10 and TaskScheduler ThreadPoolTaskScheduler.
2019-05-03 21:04:28.337 +08:00 [INF] Initialized Scheduler Signaller of type: Quartz.Core.SchedulerSignalerImpl
2019-05-03 21:04:28.352 +08:00 [INF] Quartz Scheduler v.3.0.7.0 created.
2019-05-03 21:04:28.362 +08:00 [INF] RAMJobStore initialized.
2019-05-03 21:04:28.378 +08:00 [INF] Scheduler meta-data: Quartz Scheduler (v3.0.7.0) 'QuartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'Quartz.Core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'Quartz.Simpl.DefaultThreadPool' - with 10 threads.
  Using job-store 'Quartz.Simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2019-05-03 21:04:28.381 +08:00 [INF] Quartz scheduler 'QuartzScheduler' initialized
2019-05-03 21:04:28.383 +08:00 [INF] Quartz scheduler version: 3.0.7.0
2019-05-03 21:04:32.452 +08:00 [INF] User profile is available. Using 'C:\Users\gainorloss\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2019-05-03 21:04:55.578 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/api/1.0/Values/Get  
2019-05-03 21:04:55.769 +08:00 [INF] Executing endpoint 'Dnc.API.Controllers.ValuesController.Get (Dnc.API)'
2019-05-03 21:04:55.790 +08:00 [INF] Route matched with {action = "Get", controller = "Values"}. Executing action Dnc.API.Controllers.ValuesController.Get (Dnc.API)
2019-05-03 21:04:55.950 +08:00 [INF] Executing action method Dnc.API.Controllers.ValuesController.Get (Dnc.API) - Validation state: "Valid"
2019-05-03 21:04:55.963 +08:00 [DBG] aha
2019-05-03 21:04:56.072 +08:00 [DBG] redis:gainorloss
2019-05-03 21:04:59.119 +08:00 [DBG] redis:gainorloss
2019-05-03 21:04:59.241 +08:00 [DBG] redis:gainorloss
2019-05-03 21:04:59.242 +08:00 [ERR] aeb0115d1857446d85c2aa42015b706e
2019-05-03 21:04:59.556 +08:00 [INF] Executed action method Dnc.API.Controllers.ValuesController.Get (Dnc.API), returned result Microsoft.AspNetCore.Mvc.OkObjectResult in 3590.0213000000003ms.
2019-05-03 21:04:59.594 +08:00 [INF] Executing ObjectResult, writing value of type '<>f__AnonymousType0`4[[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[<>f__AnonymousType1`3[[Dnc.API.Models.ABC, Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.IEnumerable`1[[Dnc.API.Models.ABC, Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2019-05-03 21:04:59.956 +08:00 [INF] Executed action Dnc.API.Controllers.ValuesController.Get (Dnc.API) in 4159.4023000000007ms
2019-05-03 21:04:59.960 +08:00 [INF] Executed endpoint 'Dnc.API.Controllers.ValuesController.Get (Dnc.API)'
2019-05-03 21:04:59.972 +08:00 [INF] Request finished in 4397.1438ms 200 application/json; charset=utf-8
2019-05-03 21:05:12.029 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/api/2.0/Values/Get  
2019-05-03 21:05:12.053 +08:00 [INF] Multiple candidate actions were found, but none matched the requested service API version '2.0'. Candidate actions: Dnc.API.Controllers.ValuesController.Get (Dnc.API)
2019-05-03 21:05:12.068 +08:00 [INF] Executing endpoint 'null'
2019-05-03 21:05:12.075 +08:00 [INF] Executing ObjectResult, writing value of type '<>f__AnonymousType0`1[[<>f__AnonymousType1`3[[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[<>f__AnonymousType2`1[[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Microsoft.AspNetCore.Mvc.Versioning, Version=3.1.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]], Microsoft.AspNetCore.Mvc.Versioning, Version=3.1.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]]'.
2019-05-03 21:05:12.086 +08:00 [INF] Executed endpoint 'null'
2019-05-03 21:05:12.088 +08:00 [INF] Request finished in 58.7876ms 400 application/json; charset=utf-8
2019-05-03 21:05:40.493 +08:00 [DBG] TaskSchedulingThreadPool configured with max concurrency of 10 and TaskScheduler ThreadPoolTaskScheduler.
2019-05-03 21:05:40.755 +08:00 [INF] Initialized Scheduler Signaller of type: Quartz.Core.SchedulerSignalerImpl
2019-05-03 21:05:40.783 +08:00 [INF] Quartz Scheduler v.3.0.7.0 created.
2019-05-03 21:05:40.793 +08:00 [INF] RAMJobStore initialized.
2019-05-03 21:05:40.809 +08:00 [INF] Scheduler meta-data: Quartz Scheduler (v3.0.7.0) 'QuartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'Quartz.Core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'Quartz.Simpl.DefaultThreadPool' - with 10 threads.
  Using job-store 'Quartz.Simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2019-05-03 21:05:40.814 +08:00 [INF] Quartz scheduler 'QuartzScheduler' initialized
2019-05-03 21:05:40.815 +08:00 [INF] Quartz scheduler version: 3.0.7.0
2019-05-03 21:05:45.069 +08:00 [INF] User profile is available. Using 'C:\Users\gainorloss\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2019-05-03 21:05:47.794 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/swagger/index.html  
2019-05-03 21:05:48.217 +08:00 [INF] Request finished in 427.3513ms 200 text/html
2019-05-03 21:05:48.577 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/swagger/v1/swagger.json  
2019-05-03 21:05:48.588 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/swagger/favicon-16x16.png  
2019-05-03 21:05:48.620 +08:00 [INF] Sending file. Request path: '/favicon-16x16.png'. Physical path: 'N/A'
2019-05-03 21:05:48.624 +08:00 [INF] Request finished in 35.5953ms 200 image/png
2019-05-03 21:05:48.815 +08:00 [INF] Request finished in 238.5801ms 200 application/json;charset=utf-8
2019-05-03 21:06:00.487 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/api/2/Values/Get  
2019-05-03 21:06:00.562 +08:00 [INF] Executing endpoint 'Dnc.API.Controllers.ValuesController.Get (Dnc.API)'
2019-05-03 21:06:00.578 +08:00 [INF] Route matched with {action = "Get", controller = "Values"}. Executing action Dnc.API.Controllers.ValuesController.Get (Dnc.API)
2019-05-03 21:06:00.740 +08:00 [INF] Executing action method Dnc.API.Controllers.ValuesController.Get (Dnc.API) - Validation state: "Valid"
2019-05-03 21:06:00.753 +08:00 [DBG] aha
2019-05-03 21:06:00.862 +08:00 [DBG] redis:gainorloss
2019-05-03 21:06:03.909 +08:00 [DBG] redis:gainorloss
2019-05-03 21:06:04.026 +08:00 [DBG] redis:gainorloss
2019-05-03 21:06:04.028 +08:00 [ERR] e17cdf249b9749ecbf62aa42015bbc5a
2019-05-03 21:06:04.314 +08:00 [INF] Executed action method Dnc.API.Controllers.ValuesController.Get (Dnc.API), returned result Microsoft.AspNetCore.Mvc.OkObjectResult in 3558.3605000000002ms.
2019-05-03 21:06:04.335 +08:00 [INF] Executing ObjectResult, writing value of type '<>f__AnonymousType0`4[[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[<>f__AnonymousType1`3[[Dnc.API.Models.ABC, Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.IEnumerable`1[[Dnc.API.Models.ABC, Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2019-05-03 21:06:04.422 +08:00 [INF] Executed action Dnc.API.Controllers.ValuesController.Get (Dnc.API) in 3836.55ms
2019-05-03 21:06:04.425 +08:00 [INF] Executed endpoint 'Dnc.API.Controllers.ValuesController.Get (Dnc.API)'
2019-05-03 21:06:04.427 +08:00 [INF] Request finished in 3940.2499ms 200 application/json; charset=utf-8
2019-05-03 21:06:12.180 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/api/3/Values/Get  
2019-05-03 21:06:12.204 +08:00 [INF] Multiple candidate actions were found, but none matched the requested service API version '3'. Candidate actions: Dnc.API.Controllers.ValuesController.Get (Dnc.API)
2019-05-03 21:06:12.220 +08:00 [INF] Executing endpoint 'null'
2019-05-03 21:06:12.228 +08:00 [INF] Executing ObjectResult, writing value of type '<>f__AnonymousType0`1[[<>f__AnonymousType1`3[[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[<>f__AnonymousType2`1[[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Microsoft.AspNetCore.Mvc.Versioning, Version=3.1.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]], Microsoft.AspNetCore.Mvc.Versioning, Version=3.1.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]]'.
2019-05-03 21:06:12.239 +08:00 [INF] Executed endpoint 'null'
2019-05-03 21:06:12.241 +08:00 [INF] Request finished in 61.8947ms 400 application/json; charset=utf-8
2019-05-03 21:06:32.984 +08:00 [DBG] TaskSchedulingThreadPool configured with max concurrency of 10 and TaskScheduler ThreadPoolTaskScheduler.
2019-05-03 21:06:33.203 +08:00 [INF] Initialized Scheduler Signaller of type: Quartz.Core.SchedulerSignalerImpl
2019-05-03 21:06:33.217 +08:00 [INF] Quartz Scheduler v.3.0.7.0 created.
2019-05-03 21:06:33.228 +08:00 [INF] RAMJobStore initialized.
2019-05-03 21:06:33.243 +08:00 [INF] Scheduler meta-data: Quartz Scheduler (v3.0.7.0) 'QuartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'Quartz.Core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'Quartz.Simpl.DefaultThreadPool' - with 10 threads.
  Using job-store 'Quartz.Simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2019-05-03 21:06:33.247 +08:00 [INF] Quartz scheduler 'QuartzScheduler' initialized
2019-05-03 21:06:33.248 +08:00 [INF] Quartz scheduler version: 3.0.7.0
2019-05-03 21:06:37.219 +08:00 [INF] User profile is available. Using 'C:\Users\gainorloss\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2019-05-03 21:06:40.151 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/swagger/index.html  
2019-05-03 21:06:40.601 +08:00 [INF] Request finished in 453.1022ms 200 text/html
2019-05-03 21:06:40.955 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/swagger/v1/swagger.json  
2019-05-03 21:06:40.964 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/swagger/favicon-16x16.png  
2019-05-03 21:06:41.000 +08:00 [INF] Sending file. Request path: '/favicon-16x16.png'. Physical path: 'N/A'
2019-05-03 21:06:41.003 +08:00 [INF] Request finished in 39.2645ms 200 image/png
2019-05-03 21:06:41.190 +08:00 [INF] Request finished in 235.039ms 200 application/json;charset=utf-8
2019-05-03 21:06:47.910 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/api/v1/Values/Get  
2019-05-03 21:06:47.988 +08:00 [INF] Executing endpoint 'Dnc.API.Controllers.ValuesController.Get (Dnc.API)'
2019-05-03 21:06:48.004 +08:00 [INF] Route matched with {action = "Get", controller = "Values"}. Executing action Dnc.API.Controllers.ValuesController.Get (Dnc.API)
2019-05-03 21:06:48.166 +08:00 [INF] Executing action method Dnc.API.Controllers.ValuesController.Get (Dnc.API) - Validation state: "Valid"
2019-05-03 21:06:48.181 +08:00 [DBG] aha
2019-05-03 21:06:48.291 +08:00 [DBG] redis:gainorloss
2019-05-03 21:06:51.338 +08:00 [DBG] redis:gainorloss
2019-05-03 21:06:51.450 +08:00 [DBG] redis:gainorloss
2019-05-03 21:06:51.452 +08:00 [ERR] 0ec63f7860184a1383e4aa42015bf3ed
2019-05-03 21:06:51.746 +08:00 [INF] Executed action method Dnc.API.Controllers.ValuesController.Get (Dnc.API), returned result Microsoft.AspNetCore.Mvc.OkObjectResult in 3562.8612000000003ms.
2019-05-03 21:06:51.765 +08:00 [INF] Executing ObjectResult, writing value of type '<>f__AnonymousType0`4[[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[<>f__AnonymousType1`3[[Dnc.API.Models.ABC, Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.IEnumerable`1[[Dnc.API.Models.ABC, Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2019-05-03 21:06:51.854 +08:00 [INF] Executed action Dnc.API.Controllers.ValuesController.Get (Dnc.API) in 3842.6316ms
2019-05-03 21:06:51.856 +08:00 [INF] Executed endpoint 'Dnc.API.Controllers.ValuesController.Get (Dnc.API)'
2019-05-03 21:06:51.858 +08:00 [INF] Request finished in 3949.1806ms 200 application/json; charset=utf-8
2019-05-03 21:07:03.122 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/api/v3/Values/Get  
2019-05-03 21:07:03.144 +08:00 [INF] Multiple candidate actions were found, but none matched the requested service API version '3'. Candidate actions: Dnc.API.Controllers.ValuesController.Get (Dnc.API)
2019-05-03 21:07:03.161 +08:00 [INF] Executing endpoint 'null'
2019-05-03 21:07:03.168 +08:00 [INF] Executing ObjectResult, writing value of type '<>f__AnonymousType0`1[[<>f__AnonymousType1`3[[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[<>f__AnonymousType2`1[[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Microsoft.AspNetCore.Mvc.Versioning, Version=3.1.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]], Microsoft.AspNetCore.Mvc.Versioning, Version=3.1.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]]'.
2019-05-03 21:07:03.180 +08:00 [INF] Executed endpoint 'null'
2019-05-03 21:07:03.182 +08:00 [INF] Request finished in 60.5223ms 400 application/json; charset=utf-8
2019-05-03 21:07:08.395 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/api/v2/Values/Get  
2019-05-03 21:07:08.397 +08:00 [INF] Executing endpoint 'Dnc.API.Controllers.ValuesController.Get (Dnc.API)'
2019-05-03 21:07:08.399 +08:00 [INF] Route matched with {action = "Get", controller = "Values"}. Executing action Dnc.API.Controllers.ValuesController.Get (Dnc.API)
2019-05-03 21:07:08.444 +08:00 [INF] Executing action method Dnc.API.Controllers.ValuesController.Get (Dnc.API) - Validation state: "Valid"
2019-05-03 21:07:08.446 +08:00 [DBG] aha
2019-05-03 21:07:08.534 +08:00 [DBG] redis:gainorloss
2019-05-03 21:07:11.579 +08:00 [DBG] redis:gainorloss
2019-05-03 21:07:11.583 +08:00 [DBG] redis:gainorloss
2019-05-03 21:07:11.584 +08:00 [ERR] 3f66dc435b294b098edeaa42015c0b85
2019-05-03 21:07:11.632 +08:00 [INF] Executed action method Dnc.API.Controllers.ValuesController.Get (Dnc.API), returned result Microsoft.AspNetCore.Mvc.OkObjectResult in 3186.4581000000003ms.
2019-05-03 21:07:11.636 +08:00 [INF] Executing ObjectResult, writing value of type '<>f__AnonymousType0`4[[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[<>f__AnonymousType1`3[[Dnc.API.Models.ABC, Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.IEnumerable`1[[Dnc.API.Models.ABC, Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2019-05-03 21:07:11.641 +08:00 [INF] Executed action Dnc.API.Controllers.ValuesController.Get (Dnc.API) in 3239.204ms
2019-05-03 21:07:11.645 +08:00 [INF] Executed endpoint 'Dnc.API.Controllers.ValuesController.Get (Dnc.API)'
2019-05-03 21:07:11.648 +08:00 [INF] Request finished in 3252.8212ms 200 application/json; charset=utf-8
2019-05-03 21:07:21.475 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/api/v1.0/Values/Get  
2019-05-03 21:07:21.477 +08:00 [INF] Executing endpoint 'Dnc.API.Controllers.ValuesController.Get (Dnc.API)'
2019-05-03 21:07:21.479 +08:00 [INF] Route matched with {action = "Get", controller = "Values"}. Executing action Dnc.API.Controllers.ValuesController.Get (Dnc.API)
2019-05-03 21:07:21.531 +08:00 [INF] Executing action method Dnc.API.Controllers.ValuesController.Get (Dnc.API) - Validation state: "Valid"
2019-05-03 21:07:21.534 +08:00 [DBG] aha
2019-05-03 21:07:21.578 +08:00 [DBG] redis:gainorloss
2019-05-03 21:07:24.623 +08:00 [DBG] redis:gainorloss
2019-05-03 21:07:24.628 +08:00 [DBG] redis:gainorloss
2019-05-03 21:07:24.629 +08:00 [ERR] 2014b63456244aba9a28aa42015c1ace
2019-05-03 21:07:24.674 +08:00 [INF] Executed action method Dnc.API.Controllers.ValuesController.Get (Dnc.API), returned result Microsoft.AspNetCore.Mvc.OkObjectResult in 3139.9732000000004ms.
2019-05-03 21:07:24.677 +08:00 [INF] Executing ObjectResult, writing value of type '<>f__AnonymousType0`4[[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[<>f__AnonymousType1`3[[Dnc.API.Models.ABC, Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.IEnumerable`1[[Dnc.API.Models.ABC, Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2019-05-03 21:07:24.683 +08:00 [INF] Executed action Dnc.API.Controllers.ValuesController.Get (Dnc.API) in 3199.6729ms
2019-05-03 21:07:24.687 +08:00 [INF] Executed endpoint 'Dnc.API.Controllers.ValuesController.Get (Dnc.API)'
2019-05-03 21:07:24.691 +08:00 [INF] Request finished in 3215.7734ms 200 application/json; charset=utf-8
2019-05-03 21:07:30.950 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/api/v2.0/Values/Get  
2019-05-03 21:07:30.952 +08:00 [INF] Executing endpoint 'Dnc.API.Controllers.ValuesController.Get (Dnc.API)'
2019-05-03 21:07:30.955 +08:00 [INF] Route matched with {action = "Get", controller = "Values"}. Executing action Dnc.API.Controllers.ValuesController.Get (Dnc.API)
2019-05-03 21:07:30.998 +08:00 [INF] Executing action method Dnc.API.Controllers.ValuesController.Get (Dnc.API) - Validation state: "Valid"
2019-05-03 21:07:31.001 +08:00 [DBG] aha
2019-05-03 21:07:31.088 +08:00 [DBG] redis:gainorloss
2019-05-03 21:07:34.133 +08:00 [DBG] redis:gainorloss
2019-05-03 21:07:34.136 +08:00 [DBG] redis:gainorloss
2019-05-03 21:07:34.137 +08:00 [ERR] fe7be5c50bb84ea1b6b6aa42015c25f3
2019-05-03 21:07:34.185 +08:00 [INF] Executed action method Dnc.API.Controllers.ValuesController.Get (Dnc.API), returned result Microsoft.AspNetCore.Mvc.OkObjectResult in 3184.1258000000003ms.
2019-05-03 21:07:34.190 +08:00 [INF] Executing ObjectResult, writing value of type '<>f__AnonymousType0`4[[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[<>f__AnonymousType1`3[[Dnc.API.Models.ABC, Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.IEnumerable`1[[Dnc.API.Models.ABC, Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2019-05-03 21:07:34.200 +08:00 [INF] Executed action Dnc.API.Controllers.ValuesController.Get (Dnc.API) in 3237.8783000000003ms
2019-05-03 21:07:34.203 +08:00 [INF] Executed endpoint 'Dnc.API.Controllers.ValuesController.Get (Dnc.API)'
2019-05-03 21:07:34.206 +08:00 [INF] Request finished in 3256.7926ms 200 application/json; charset=utf-8
2019-05-03 21:15:05.262 +08:00 [DBG] TaskSchedulingThreadPool configured with max concurrency of 10 and TaskScheduler ThreadPoolTaskScheduler.
2019-05-03 21:15:05.613 +08:00 [INF] Initialized Scheduler Signaller of type: Quartz.Core.SchedulerSignalerImpl
2019-05-03 21:15:05.635 +08:00 [INF] Quartz Scheduler v.3.0.7.0 created.
2019-05-03 21:15:05.677 +08:00 [INF] RAMJobStore initialized.
2019-05-03 21:15:05.692 +08:00 [INF] Scheduler meta-data: Quartz Scheduler (v3.0.7.0) 'QuartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'Quartz.Core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'Quartz.Simpl.DefaultThreadPool' - with 10 threads.
  Using job-store 'Quartz.Simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2019-05-03 21:15:05.696 +08:00 [INF] Quartz scheduler 'QuartzScheduler' initialized
2019-05-03 21:15:05.697 +08:00 [INF] Quartz scheduler version: 3.0.7.0
2019-05-03 21:15:10.930 +08:00 [INF] User profile is available. Using 'C:\Users\gainorloss\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2019-05-03 21:15:23.171 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/swagger/index.html  
2019-05-03 21:15:23.606 +08:00 [INF] Request finished in 437.8293ms 200 text/html
2019-05-03 21:15:24.740 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/swagger/v1/swagger.json  
2019-05-03 21:15:24.999 +08:00 [INF] Request finished in 259.2158ms 200 application/json;charset=utf-8
2019-05-03 21:15:30.501 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/logdashboard  
2019-05-03 21:15:30.534 +08:00 [ERR] An unhandled exception has occurred while executing the request.
System.NullReferenceException: Object reference not set to an instance of an object.
   at LogDashboard.LogDashboardMiddleware.InvokeAsync(HttpContext httpContext)
   at Microsoft.AspNetCore.Builder.Extensions.MapMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.Builder.RouterMiddleware.Invoke(HttpContext httpContext)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
2019-05-03 21:15:30.699 +08:00 [INF] Request finished in 197.7761ms 500 text/html; charset=utf-8
2019-05-03 21:16:13.992 +08:00 [DBG] TaskSchedulingThreadPool configured with max concurrency of 10 and TaskScheduler ThreadPoolTaskScheduler.
2019-05-03 21:16:14.295 +08:00 [INF] Initialized Scheduler Signaller of type: Quartz.Core.SchedulerSignalerImpl
2019-05-03 21:16:14.311 +08:00 [INF] Quartz Scheduler v.3.0.7.0 created.
2019-05-03 21:16:14.322 +08:00 [INF] RAMJobStore initialized.
2019-05-03 21:16:14.338 +08:00 [INF] Scheduler meta-data: Quartz Scheduler (v3.0.7.0) 'QuartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'Quartz.Core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'Quartz.Simpl.DefaultThreadPool' - with 10 threads.
  Using job-store 'Quartz.Simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2019-05-03 21:16:14.343 +08:00 [INF] Quartz scheduler 'QuartzScheduler' initialized
2019-05-03 21:16:14.346 +08:00 [INF] Quartz scheduler version: 3.0.7.0
2019-05-03 21:16:18.515 +08:00 [INF] User profile is available. Using 'C:\Users\gainorloss\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2019-05-03 21:19:32.936 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard  
2019-05-03 21:19:32.986 +08:00 [ERR] An unhandled exception has occurred while executing the request.
System.NullReferenceException: Object reference not set to an instance of an object.
   at LogDashboard.LogDashboardMiddleware.InvokeAsync(HttpContext httpContext)
   at Microsoft.AspNetCore.Builder.Extensions.MapMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.Builder.RouterMiddleware.Invoke(HttpContext httpContext)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
2019-05-03 21:19:33.121 +08:00 [INF] Request finished in 188.4349ms 500 text/html; charset=utf-8
2019-05-03 21:22:24.958 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/api/logdashboard  
2019-05-03 21:22:25.127 +08:00 [INF] Request finished in 167.9295ms 404 
2019-05-03 21:24:05.243 +08:00 [DBG] TaskSchedulingThreadPool configured with max concurrency of 10 and TaskScheduler ThreadPoolTaskScheduler.
2019-05-03 21:24:05.482 +08:00 [INF] Initialized Scheduler Signaller of type: Quartz.Core.SchedulerSignalerImpl
2019-05-03 21:24:05.498 +08:00 [INF] Quartz Scheduler v.3.0.7.0 created.
2019-05-03 21:24:05.509 +08:00 [INF] RAMJobStore initialized.
2019-05-03 21:24:05.526 +08:00 [INF] Scheduler meta-data: Quartz Scheduler (v3.0.7.0) 'QuartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'Quartz.Core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'Quartz.Simpl.DefaultThreadPool' - with 10 threads.
  Using job-store 'Quartz.Simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2019-05-03 21:24:05.530 +08:00 [INF] Quartz scheduler 'QuartzScheduler' initialized
2019-05-03 21:24:05.532 +08:00 [INF] Quartz scheduler version: 3.0.7.0
2019-05-03 21:24:09.969 +08:00 [INF] User profile is available. Using 'C:\Users\gainorloss\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2019-05-03 21:24:10.990 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/api/logdashboard  
2019-05-03 21:24:11.194 +08:00 [INF] Request finished in 206.8474ms 404 
2019-05-03 21:24:19.858 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/logdashboard  
2019-05-03 21:24:28.715 +08:00 [INF] Request finished in 8856.9178ms 200 text/html
2019-05-03 21:24:28.752 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.moment.min.js  
2019-05-03 21:24:28.836 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.spin.min.js  
2019-05-03 21:24:28.754 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/css.styles.css  
2019-05-03 21:24:28.757 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.tempusdominus-bootstrap-4.js  
2019-05-03 21:24:28.836 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/css.tempusdominus-bootstrap-4.min.css  
2019-05-03 21:24:28.872 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.log.js  
2019-05-03 21:24:28.883 +08:00 [INF] Request finished in 46.7665ms 200 text/css
2019-05-03 21:24:28.879 +08:00 [INF] Request finished in 43.7495ms 200 application/javascript
2019-05-03 21:24:28.879 +08:00 [INF] Request finished in 127.2232ms 200 application/javascript
2019-05-03 21:24:28.884 +08:00 [INF] Request finished in 11.3935ms 200 application/javascript
2019-05-03 21:24:28.893 +08:00 [INF] Request finished in 135.4307ms 200 application/javascript
2019-05-03 21:24:28.914 +08:00 [INF] Request finished in 161.7659ms 200 text/css
2019-05-03 21:24:35.141 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/Dashboard/BasicLog  
2019-05-03 21:24:35.415 +08:00 [INF] Request finished in 273.6928ms 200 text/html
2019-05-03 21:24:35.431 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/css.tempusdominus-bootstrap-4.min.css  
2019-05-03 21:24:35.434 +08:00 [INF] Request finished in 2.1972ms 200 text/css
2019-05-03 21:24:35.434 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/css.styles.css  
2019-05-03 21:24:35.434 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.tempusdominus-bootstrap-4.js  
2019-05-03 21:24:35.435 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.moment.min.js  
2019-05-03 21:24:35.435 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.spin.min.js  
2019-05-03 21:24:35.435 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.log.js  
2019-05-03 21:24:35.446 +08:00 [INF] Request finished in 12.4101ms 200 text/css
2019-05-03 21:24:35.447 +08:00 [INF] Request finished in 12.7531ms 200 application/javascript
2019-05-03 21:24:35.447 +08:00 [INF] Request finished in 12.8799ms 200 application/javascript
2019-05-03 21:24:35.449 +08:00 [INF] Request finished in 14.7584ms 200 application/javascript
2019-05-03 21:24:35.452 +08:00 [INF] Request finished in 16.9071ms 200 application/javascript
2019-05-03 21:24:36.311 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard  
2019-05-03 21:24:36.331 +08:00 [INF] Request finished in 19.8811ms 200 text/html
2019-05-03 21:24:36.350 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/css.tempusdominus-bootstrap-4.min.css  
2019-05-03 21:24:36.354 +08:00 [INF] Request finished in 4.4945ms 200 text/css
2019-05-03 21:24:36.355 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.moment.min.js  
2019-05-03 21:24:36.355 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/css.styles.css  
2019-05-03 21:24:36.356 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.spin.min.js  
2019-05-03 21:24:36.356 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.log.js  
2019-05-03 21:24:36.363 +08:00 [INF] Request finished in 8.888ms 200 application/javascript
2019-05-03 21:24:36.358 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.tempusdominus-bootstrap-4.js  
2019-05-03 21:24:36.370 +08:00 [INF] Request finished in 14.0722ms 200 application/javascript
2019-05-03 21:24:36.371 +08:00 [INF] Request finished in 15.4797ms 200 application/javascript
2019-05-03 21:24:36.371 +08:00 [INF] Request finished in 15.5813ms 200 text/css
2019-05-03 21:24:36.379 +08:00 [INF] Request finished in 21.3852ms 200 application/javascript
2019-05-03 21:24:37.255 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/Dashboard/BasicLog  
2019-05-03 21:24:37.260 +08:00 [INF] Request finished in 4.9293ms 200 text/html
2019-05-03 21:24:37.281 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/css.tempusdominus-bootstrap-4.min.css  
2019-05-03 21:24:37.283 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/css.styles.css  
2019-05-03 21:24:37.283 +08:00 [INF] Request finished in 2.3806ms 200 text/css
2019-05-03 21:24:37.284 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.moment.min.js  
2019-05-03 21:24:37.284 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.log.js  
2019-05-03 21:24:37.284 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.spin.min.js  
2019-05-03 21:24:37.284 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.tempusdominus-bootstrap-4.js  
2019-05-03 21:24:37.290 +08:00 [INF] Request finished in 6.965ms 200 text/css
2019-05-03 21:24:37.294 +08:00 [INF] Request finished in 10.0295ms 200 application/javascript
2019-05-03 21:24:37.296 +08:00 [INF] Request finished in 12.5934ms 200 application/javascript
2019-05-03 21:24:37.292 +08:00 [INF] Request finished in 8.878ms 200 application/javascript
2019-05-03 21:24:37.300 +08:00 [INF] Request finished in 16.9407ms 200 application/javascript
2019-05-03 21:24:37.926 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard  
2019-05-03 21:24:37.940 +08:00 [INF] Request finished in 14.5833ms 200 text/html
2019-05-03 21:24:37.954 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/css.tempusdominus-bootstrap-4.min.css  
2019-05-03 21:24:37.955 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/css.styles.css  
2019-05-03 21:24:37.956 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.moment.min.js  
2019-05-03 21:24:37.957 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.spin.min.js  
2019-05-03 21:24:37.958 +08:00 [INF] Request finished in 3.475ms 200 text/css
2019-05-03 21:24:37.956 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.tempusdominus-bootstrap-4.js  
2019-05-03 21:24:37.957 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.log.js  
2019-05-03 21:24:37.966 +08:00 [INF] Request finished in 9.0959ms 200 application/javascript
2019-05-03 21:24:37.964 +08:00 [INF] Request finished in 7.9863ms 200 application/javascript
2019-05-03 21:24:37.967 +08:00 [INF] Request finished in 12.0741ms 200 text/css
2019-05-03 21:24:37.975 +08:00 [INF] Request finished in 18.2175ms 200 application/javascript
2019-05-03 21:24:37.975 +08:00 [INF] Request finished in 18.3776ms 200 application/javascript
2019-05-03 21:24:42.745 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/swagger/index.html  
2019-05-03 21:24:42.845 +08:00 [INF] Request finished in 99.8043ms 200 text/html
2019-05-03 21:24:43.390 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/swagger/v1/swagger.json  
2019-05-03 21:24:43.408 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/swagger/favicon-16x16.png  
2019-05-03 21:24:43.432 +08:00 [INF] Sending file. Request path: '/favicon-16x16.png'. Physical path: 'N/A'
2019-05-03 21:24:43.436 +08:00 [INF] Request finished in 27.0587ms 200 image/png
2019-05-03 21:24:43.697 +08:00 [INF] Request finished in 307.5772ms 200 application/json;charset=utf-8
2019-05-03 21:24:53.988 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/api/v1.0/Values/Get  
2019-05-03 21:24:54.023 +08:00 [INF] Executing endpoint 'Dnc.API.Controllers.ValuesController.Get (Dnc.API)'
2019-05-03 21:24:54.052 +08:00 [INF] Route matched with {action = "Get", controller = "Values"}. Executing action Dnc.API.Controllers.ValuesController.Get (Dnc.API)
2019-05-03 21:24:54.283 +08:00 [INF] Executing action method Dnc.API.Controllers.ValuesController.Get (Dnc.API) - Validation state: "Valid"
2019-05-03 21:24:54.297 +08:00 [DBG] aha
2019-05-03 21:24:54.411 +08:00 [DBG] redis:gainorloss
2019-05-03 21:24:57.458 +08:00 [DBG] redis:gainorloss
2019-05-03 21:24:57.623 +08:00 [DBG] redis:gainorloss
2019-05-03 21:24:57.624 +08:00 [ERR] 02dc4cb4da164e35b617aa420160ecc9
2019-05-03 21:24:58.078 +08:00 [INF] Executed action method Dnc.API.Controllers.ValuesController.Get (Dnc.API), returned result Microsoft.AspNetCore.Mvc.OkObjectResult in 3778.4717ms.
2019-05-03 21:24:58.118 +08:00 [INF] Executing ObjectResult, writing value of type '<>f__AnonymousType0`4[[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[<>f__AnonymousType1`3[[Dnc.API.Models.ABC, Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.IEnumerable`1[[Dnc.API.Models.ABC, Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2019-05-03 21:24:58.180 +08:00 [INF] Executed action Dnc.API.Controllers.ValuesController.Get (Dnc.API) in 4120.2495ms
2019-05-03 21:24:58.182 +08:00 [INF] Executed endpoint 'Dnc.API.Controllers.ValuesController.Get (Dnc.API)'
2019-05-03 21:24:58.184 +08:00 [INF] Request finished in 4196.2937ms 200 application/json; charset=utf-8
2019-05-03 21:25:08.679 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard  
2019-05-03 21:25:08.695 +08:00 [INF] Request finished in 16.6178ms 200 text/html
2019-05-03 21:25:08.714 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/css.tempusdominus-bootstrap-4.min.css  
2019-05-03 21:25:08.716 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.moment.min.js  
2019-05-03 21:25:08.718 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.tempusdominus-bootstrap-4.js  
2019-05-03 21:25:08.714 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/css.styles.css  
2019-05-03 21:25:08.738 +08:00 [INF] Request finished in 21.891ms 200 application/javascript
2019-05-03 21:25:08.735 +08:00 [INF] Request finished in 21.8251ms 200 text/css
2019-05-03 21:25:08.742 +08:00 [INF] Request finished in 23.7788ms 200 application/javascript
2019-05-03 21:25:08.718 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.log.js  
2019-05-03 21:25:08.717 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.spin.min.js  
2019-05-03 21:25:08.745 +08:00 [INF] Request finished in 30.7612ms 200 text/css
2019-05-03 21:25:08.748 +08:00 [INF] Request finished in 30.6685ms 200 application/javascript
2019-05-03 21:25:08.751 +08:00 [INF] Request finished in 33.405ms 200 application/javascript
2019-05-03 21:25:09.936 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard  
2019-05-03 21:25:09.952 +08:00 [INF] Request finished in 15.9157ms 200 text/html
2019-05-03 21:25:09.971 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/css.tempusdominus-bootstrap-4.min.css  
2019-05-03 21:25:09.972 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/css.styles.css  
2019-05-03 21:25:09.973 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.tempusdominus-bootstrap-4.js  
2019-05-03 21:25:09.973 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.moment.min.js  
2019-05-03 21:25:09.982 +08:00 [INF] Request finished in 9.8446ms 200 text/css
2019-05-03 21:25:09.974 +08:00 [INF] Request finished in 2.8493ms 200 text/css
2019-05-03 21:25:09.973 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.spin.min.js  
2019-05-03 21:25:09.973 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.log.js  
2019-05-03 21:25:09.983 +08:00 [INF] Request finished in 9.8277ms 200 application/javascript
2019-05-03 21:25:09.984 +08:00 [INF] Request finished in 11.1732ms 200 application/javascript
2019-05-03 21:25:09.988 +08:00 [INF] Request finished in 14.9459ms 200 application/javascript
2019-05-03 21:25:09.990 +08:00 [INF] Request finished in 16.3549ms 200 application/javascript
2019-05-03 21:25:12.675 +08:00 [INF] Request starting HTTP/1.1 POST http://localhost:5000/LogDashboard/Dashboard/GetLogChart application/x-www-form-urlencoded; charset=UTF-8 19
2019-05-03 21:25:12.805 +08:00 [INF] Request finished in 129.3246ms 200 text/json
2019-05-03 21:25:13.379 +08:00 [INF] Request starting HTTP/1.1 POST http://localhost:5000/LogDashboard/Dashboard/GetLogChart application/x-www-form-urlencoded; charset=UTF-8 19
2019-05-03 21:25:13.404 +08:00 [INF] Request finished in 25.7175ms 200 text/json
2019-05-03 21:25:13.936 +08:00 [INF] Request starting HTTP/1.1 POST http://localhost:5000/LogDashboard/Dashboard/GetLogChart application/x-www-form-urlencoded; charset=UTF-8 19
2019-05-03 21:25:13.964 +08:00 [INF] Request finished in 28.2578ms 200 text/json
2019-05-03 21:25:14.496 +08:00 [INF] Request starting HTTP/1.1 POST http://localhost:5000/LogDashboard/Dashboard/GetLogChart application/x-www-form-urlencoded; charset=UTF-8 19
2019-05-03 21:25:14.505 +08:00 [INF] Request finished in 9.3441ms 200 text/json
2019-05-03 21:25:15.591 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/Dashboard/BasicLog  
2019-05-03 21:25:15.596 +08:00 [INF] Request finished in 5.0784ms 200 text/html
2019-05-03 21:25:15.614 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/css.tempusdominus-bootstrap-4.min.css  
2019-05-03 21:25:15.614 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/css.styles.css  
2019-05-03 21:25:15.616 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.moment.min.js  
2019-05-03 21:25:15.616 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.tempusdominus-bootstrap-4.js  
2019-05-03 21:25:15.616 +08:00 [INF] Request finished in 2.363ms 200 text/css
2019-05-03 21:25:15.623 +08:00 [INF] Request finished in 6.5029ms 200 application/javascript
2019-05-03 21:25:15.616 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.log.js  
2019-05-03 21:25:15.616 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.spin.min.js  
2019-05-03 21:25:15.622 +08:00 [INF] Request finished in 7.8223ms 200 text/css
2019-05-03 21:25:15.626 +08:00 [INF] Request finished in 9.9909ms 200 application/javascript
2019-05-03 21:25:15.633 +08:00 [INF] Request finished in 16.4986ms 200 application/javascript
2019-05-03 21:25:15.634 +08:00 [INF] Request finished in 18.499ms 200 application/javascript
2019-05-03 21:25:17.185 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard  
2019-05-03 21:25:17.201 +08:00 [INF] Request finished in 15.8908ms 200 text/html
2019-05-03 21:25:17.221 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/css.tempusdominus-bootstrap-4.min.css  
2019-05-03 21:25:17.222 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/css.styles.css  
2019-05-03 21:25:17.222 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.tempusdominus-bootstrap-4.js  
2019-05-03 21:25:17.222 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.moment.min.js  
2019-05-03 21:25:17.223 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.spin.min.js  
2019-05-03 21:25:17.225 +08:00 [INF] Request finished in 4.0536ms 200 text/css
2019-05-03 21:25:17.232 +08:00 [INF] Request finished in 9.0407ms 200 application/javascript
2019-05-03 21:25:17.233 +08:00 [INF] Request finished in 10.5793ms 200 application/javascript
2019-05-03 21:25:17.236 +08:00 [INF] Request finished in 12.3123ms 200 application/javascript
2019-05-03 21:25:17.231 +08:00 [INF] Request finished in 8.3389ms 200 text/css
2019-05-03 21:25:17.224 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.log.js  
2019-05-03 21:25:17.267 +08:00 [INF] Request finished in 42.8754ms 200 application/javascript
2019-05-03 21:25:23.526 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/  
2019-05-03 21:25:23.528 +08:00 [INF] Request finished in 1.7126ms 404 
2019-05-03 21:25:31.184 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/logdashboard  
2019-05-03 21:25:31.200 +08:00 [INF] Request finished in 15.7039ms 200 text/html
2019-05-03 21:25:31.217 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/css.tempusdominus-bootstrap-4.min.css  
2019-05-03 21:25:31.220 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.tempusdominus-bootstrap-4.js  
2019-05-03 21:25:31.219 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.moment.min.js  
2019-05-03 21:25:31.222 +08:00 [INF] Request finished in 4.4231ms 200 text/css
2019-05-03 21:25:31.220 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.log.js  
2019-05-03 21:25:31.218 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/css.styles.css  
2019-05-03 21:25:31.221 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.spin.min.js  
2019-05-03 21:25:31.241 +08:00 [INF] Request finished in 21.0339ms 200 application/javascript
2019-05-03 21:25:31.242 +08:00 [INF] Request finished in 22.6628ms 200 application/javascript
2019-05-03 21:25:31.245 +08:00 [INF] Request finished in 25.3497ms 200 application/javascript
2019-05-03 21:25:31.250 +08:00 [INF] Request finished in 29.3035ms 200 application/javascript
2019-05-03 21:25:31.251 +08:00 [INF] Request finished in 32.6971ms 200 text/css
2019-05-03 21:25:33.106 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/Dashboard/BasicLog  
2019-05-03 21:25:33.110 +08:00 [INF] Request finished in 4.5678ms 200 text/html
2019-05-03 21:25:33.126 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/css.tempusdominus-bootstrap-4.min.css  
2019-05-03 21:25:33.126 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/css.styles.css  
2019-05-03 21:25:33.129 +08:00 [INF] Request finished in 3.5081ms 200 text/css
2019-05-03 21:25:33.131 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.log.js  
2019-05-03 21:25:33.130 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.spin.min.js  
2019-05-03 21:25:33.128 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.moment.min.js  
2019-05-03 21:25:33.129 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.tempusdominus-bootstrap-4.js  
2019-05-03 21:25:33.150 +08:00 [INF] Request finished in 23.4032ms 200 text/css
2019-05-03 21:25:33.168 +08:00 [INF] Request finished in 37.327ms 200 application/javascript
2019-05-03 21:25:33.171 +08:00 [INF] Request finished in 40.8021ms 200 application/javascript
2019-05-03 21:25:33.173 +08:00 [INF] Request finished in 44.9963ms 200 application/javascript
2019-05-03 21:25:33.179 +08:00 [INF] Request finished in 50.7672ms 200 application/javascript
2019-05-03 21:25:38.689 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/Dashboard/BasicLog  
2019-05-03 21:25:38.694 +08:00 [INF] Request finished in 4.899ms 200 text/html
2019-05-03 21:25:38.714 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/css.tempusdominus-bootstrap-4.min.css  
2019-05-03 21:25:38.714 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/css.styles.css  
2019-05-03 21:25:38.715 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.moment.min.js  
2019-05-03 21:25:38.716 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.spin.min.js  
2019-05-03 21:25:38.716 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.log.js  
2019-05-03 21:25:38.716 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.tempusdominus-bootstrap-4.js  
2019-05-03 21:25:38.717 +08:00 [INF] Request finished in 3.2543ms 200 text/css
2019-05-03 21:25:38.726 +08:00 [INF] Request finished in 10.0708ms 200 application/javascript
2019-05-03 21:25:38.724 +08:00 [INF] Request finished in 9.6431ms 200 text/css
2019-05-03 21:25:38.722 +08:00 [INF] Request finished in 6.9455ms 200 application/javascript
2019-05-03 21:25:38.728 +08:00 [INF] Request finished in 11.5725ms 200 application/javascript
2019-05-03 21:25:38.732 +08:00 [INF] Request finished in 15.848ms 200 application/javascript
2019-05-03 21:25:39.322 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard  
2019-05-03 21:25:39.338 +08:00 [INF] Request finished in 15.7649ms 200 text/html
2019-05-03 21:25:39.353 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/css.tempusdominus-bootstrap-4.min.css  
2019-05-03 21:25:39.354 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/css.styles.css  
2019-05-03 21:25:39.356 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.tempusdominus-bootstrap-4.js  
2019-05-03 21:25:39.356 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.moment.min.js  
2019-05-03 21:25:39.356 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.spin.min.js  
2019-05-03 21:25:39.391 +08:00 [INF] Request finished in 35.8687ms 200 application/javascript
2019-05-03 21:25:39.357 +08:00 [INF] Request finished in 2.5664ms 200 text/css
2019-05-03 21:25:39.356 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.log.js  
2019-05-03 21:25:39.363 +08:00 [INF] Request finished in 9.7617ms 200 text/css
2019-05-03 21:25:39.404 +08:00 [INF] Request finished in 48.5096ms 200 application/javascript
2019-05-03 21:25:39.405 +08:00 [INF] Request finished in 48.8627ms 200 application/javascript
2019-05-03 21:25:39.418 +08:00 [INF] Request finished in 61.4931ms 200 application/javascript
2019-05-03 21:25:56.719 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard  
2019-05-03 21:25:56.742 +08:00 [INF] Request finished in 22.5658ms 200 text/html
2019-05-03 21:25:56.778 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.log.js  
2019-05-03 21:25:56.778 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.moment.min.js  
2019-05-03 21:25:56.819 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.tempusdominus-bootstrap-4.js  
2019-05-03 21:25:56.778 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/css.styles.css  
2019-05-03 21:25:56.845 +08:00 [INF] Request finished in 66.967ms 200 application/javascript
2019-05-03 21:25:56.848 +08:00 [INF] Request finished in 41.779ms 200 application/javascript
2019-05-03 21:25:56.791 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/css.tempusdominus-bootstrap-4.min.css  
2019-05-03 21:25:56.806 +08:00 [INF] Request finished in 30.0639ms 200 application/javascript
2019-05-03 21:25:56.778 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.spin.min.js  
2019-05-03 21:25:56.852 +08:00 [INF] Request finished in 74.5819ms 200 text/css
2019-05-03 21:25:56.857 +08:00 [INF] Request finished in 66.0579ms 200 text/css
2019-05-03 21:25:56.863 +08:00 [INF] Request finished in 87.0669ms 200 application/javascript
2019-05-03 21:25:58.096 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard  
2019-05-03 21:25:58.109 +08:00 [INF] Request finished in 13.3646ms 200 text/html
2019-05-03 21:25:58.126 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/css.tempusdominus-bootstrap-4.min.css  
2019-05-03 21:25:58.126 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/css.styles.css  
2019-05-03 21:25:58.128 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.moment.min.js  
2019-05-03 21:25:58.129 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.spin.min.js  
2019-05-03 21:25:58.128 +08:00 [INF] Request finished in 2.7341ms 200 text/css
2019-05-03 21:25:58.129 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.log.js  
2019-05-03 21:25:58.129 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.tempusdominus-bootstrap-4.js  
2019-05-03 21:25:58.137 +08:00 [INF] Request finished in 10.1048ms 200 text/css
2019-05-03 21:25:58.139 +08:00 [INF] Request finished in 10.774ms 200 application/javascript
2019-05-03 21:25:58.142 +08:00 [INF] Request finished in 12.8494ms 200 application/javascript
2019-05-03 21:25:58.148 +08:00 [INF] Request finished in 18.897ms 200 application/javascript
2019-05-03 21:25:58.152 +08:00 [INF] Request finished in 23.6761ms 200 application/javascript
2019-05-03 21:25:58.840 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard  
2019-05-03 21:25:58.855 +08:00 [INF] Request finished in 14.9822ms 200 text/html
2019-05-03 21:25:58.874 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/css.tempusdominus-bootstrap-4.min.css  
2019-05-03 21:25:58.874 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/css.styles.css  
2019-05-03 21:25:58.875 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.moment.min.js  
2019-05-03 21:25:58.876 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.log.js  
2019-05-03 21:25:58.875 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.tempusdominus-bootstrap-4.js  
2019-05-03 21:25:58.875 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.spin.min.js  
2019-05-03 21:25:58.888 +08:00 [INF] Request finished in 12.3536ms 200 application/javascript
2019-05-03 21:25:58.886 +08:00 [INF] Request finished in 10.7552ms 200 application/javascript
2019-05-03 21:25:58.884 +08:00 [INF] Request finished in 10.2492ms 200 text/css
2019-05-03 21:25:58.877 +08:00 [INF] Request finished in 3.3192ms 200 text/css
2019-05-03 21:25:58.893 +08:00 [INF] Request finished in 18.0541ms 200 application/javascript
2019-05-03 21:25:58.896 +08:00 [INF] Request finished in 20.3142ms 200 application/javascript
2019-05-03 21:25:59.416 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard  
2019-05-03 21:25:59.431 +08:00 [INF] Request finished in 14.5047ms 200 text/html
2019-05-03 21:25:59.448 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/css.tempusdominus-bootstrap-4.min.css  
2019-05-03 21:25:59.451 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.spin.min.js  
2019-05-03 21:25:59.451 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.moment.min.js  
2019-05-03 21:25:59.451 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.tempusdominus-bootstrap-4.js  
2019-05-03 21:25:59.449 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/css.styles.css  
2019-05-03 21:25:59.458 +08:00 [INF] Request finished in 7.0059ms 200 application/javascript
2019-05-03 21:25:59.455 +08:00 [INF] Request finished in 3.6857ms 200 application/javascript
2019-05-03 21:25:59.465 +08:00 [INF] Request finished in 13.7661ms 200 application/javascript
2019-05-03 21:25:59.451 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.log.js  
2019-05-03 21:25:59.452 +08:00 [INF] Request finished in 3.4033ms 200 text/css
2019-05-03 21:25:59.471 +08:00 [INF] Request finished in 22.2814ms 200 text/css
2019-05-03 21:25:59.477 +08:00 [INF] Request finished in 25.5413ms 200 application/javascript
2019-05-03 21:26:00.290 +08:00 [INF] Request starting HTTP/1.1 POST http://localhost:5000/LogDashboard/Dashboard/GetLogChart application/x-www-form-urlencoded; charset=UTF-8 19
2019-05-03 21:26:00.341 +08:00 [INF] Request finished in 50.968ms 200 text/json
2019-05-03 21:26:00.778 +08:00 [INF] Request starting HTTP/1.1 POST http://localhost:5000/LogDashboard/Dashboard/GetLogChart application/x-www-form-urlencoded; charset=UTF-8 19
2019-05-03 21:26:00.795 +08:00 [INF] Request finished in 16.5753ms 200 text/json
2019-05-03 21:26:01.277 +08:00 [INF] Request starting HTTP/1.1 POST http://localhost:5000/LogDashboard/Dashboard/GetLogChart application/x-www-form-urlencoded; charset=UTF-8 19
2019-05-03 21:26:01.291 +08:00 [INF] Request finished in 13.5843ms 200 text/json
2019-05-03 21:26:01.705 +08:00 [INF] Request starting HTTP/1.1 POST http://localhost:5000/LogDashboard/Dashboard/GetLogChart application/x-www-form-urlencoded; charset=UTF-8 19
2019-05-03 21:26:01.724 +08:00 [INF] Request finished in 18.1815ms 200 text/json
2019-05-03 21:26:02.113 +08:00 [INF] Request starting HTTP/1.1 POST http://localhost:5000/LogDashboard/Dashboard/GetLogChart application/x-www-form-urlencoded; charset=UTF-8 19
2019-05-03 21:26:02.127 +08:00 [INF] Request finished in 13.6337ms 200 text/json
2019-05-03 21:26:40.435 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard  
2019-05-03 21:26:40.487 +08:00 [INF] Request finished in 52.1019ms 200 text/html
2019-05-03 21:26:40.522 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/css.styles.css  
2019-05-03 21:26:40.522 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.moment.min.js  
2019-05-03 21:26:40.522 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.tempusdominus-bootstrap-4.js  
2019-05-03 21:26:40.522 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/css.tempusdominus-bootstrap-4.min.css  
2019-05-03 21:26:40.595 +08:00 [INF] Request finished in 72.3053ms 200 application/javascript
2019-05-03 21:26:40.599 +08:00 [INF] Request finished in 77.4158ms 200 application/javascript
2019-05-03 21:26:40.601 +08:00 [INF] Request finished in 79.1918ms 200 text/css
2019-05-03 21:26:40.550 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.spin.min.js  
2019-05-03 21:26:40.562 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.log.js  
2019-05-03 21:26:40.567 +08:00 [INF] Request finished in 44.079ms 200 text/css
2019-05-03 21:26:40.633 +08:00 [INF] Request finished in 83.0184ms 200 application/javascript
2019-05-03 21:26:40.638 +08:00 [INF] Request finished in 76.099ms 200 application/javascript
2019-05-03 21:26:41.338 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard  
2019-05-03 21:26:41.351 +08:00 [INF] Request finished in 13.3764ms 200 text/html
2019-05-03 21:26:41.366 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/css.tempusdominus-bootstrap-4.min.css  
2019-05-03 21:26:41.366 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/css.styles.css  
2019-05-03 21:26:41.370 +08:00 [INF] Request finished in 3.1458ms 200 text/css
2019-05-03 21:26:41.370 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.tempusdominus-bootstrap-4.js  
2019-05-03 21:26:41.370 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.moment.min.js  
2019-05-03 21:26:41.371 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.log.js  
2019-05-03 21:26:41.370 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.spin.min.js  
2019-05-03 21:26:41.375 +08:00 [INF] Request finished in 8.2354ms 200 text/css
2019-05-03 21:26:41.383 +08:00 [INF] Request finished in 13.1164ms 200 application/javascript
2019-05-03 21:26:41.384 +08:00 [INF] Request finished in 14.6832ms 200 application/javascript
2019-05-03 21:26:41.387 +08:00 [INF] Request finished in 15.8687ms 200 application/javascript
2019-05-03 21:26:41.390 +08:00 [INF] Request finished in 20.0006ms 200 application/javascript
2019-05-03 21:26:41.927 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard  
2019-05-03 21:26:41.940 +08:00 [INF] Request finished in 13.2363ms 200 text/html
2019-05-03 21:26:41.960 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/css.tempusdominus-bootstrap-4.min.css  
2019-05-03 21:26:41.960 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/css.styles.css  
2019-05-03 21:26:41.962 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.moment.min.js  
2019-05-03 21:26:41.963 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.spin.min.js  
2019-05-03 21:26:41.963 +08:00 [INF] Request finished in 2.4983ms 200 text/css
2019-05-03 21:26:41.962 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.tempusdominus-bootstrap-4.js  
2019-05-03 21:26:41.963 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.log.js  
2019-05-03 21:26:41.976 +08:00 [INF] Request finished in 13.1317ms 200 application/javascript
2019-05-03 21:26:41.970 +08:00 [INF] Request finished in 7.675ms 200 application/javascript
2019-05-03 21:26:41.969 +08:00 [INF] Request finished in 8.702ms 200 text/css
2019-05-03 21:26:41.982 +08:00 [INF] Request finished in 19.9082ms 200 application/javascript
2019-05-03 21:26:41.984 +08:00 [INF] Request finished in 21.3812ms 200 application/javascript
2019-05-03 21:26:42.370 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard  
2019-05-03 21:26:42.385 +08:00 [INF] Request finished in 15.623ms 200 text/html
2019-05-03 21:26:42.405 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/css.tempusdominus-bootstrap-4.min.css  
2019-05-03 21:26:42.406 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/css.styles.css  
2019-05-03 21:26:42.408 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.spin.min.js  
2019-05-03 21:26:42.407 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.moment.min.js  
2019-05-03 21:26:42.407 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.tempusdominus-bootstrap-4.js  
2019-05-03 21:26:42.410 +08:00 [INF] Request finished in 3.8844ms 200 text/css
2019-05-03 21:26:42.467 +08:00 [INF] Request finished in 58.6387ms 200 application/javascript
2019-05-03 21:26:42.468 +08:00 [INF] Request finished in 61.6595ms 200 application/javascript
2019-05-03 21:26:42.417 +08:00 [INF] Request finished in 11.1003ms 200 text/css
2019-05-03 21:26:42.409 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.log.js  
2019-05-03 21:26:42.478 +08:00 [INF] Request finished in 69.9777ms 200 application/javascript
2019-05-03 21:26:42.489 +08:00 [INF] Request finished in 79.436ms 200 application/javascript
2019-05-03 21:26:42.753 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard  
2019-05-03 21:26:42.772 +08:00 [INF] Request finished in 18.4153ms 200 text/html
2019-05-03 21:26:42.791 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/css.tempusdominus-bootstrap-4.min.css  
2019-05-03 21:26:42.791 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/css.styles.css  
2019-05-03 21:26:42.792 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.moment.min.js  
2019-05-03 21:26:42.793 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.tempusdominus-bootstrap-4.js  
2019-05-03 21:26:42.794 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.spin.min.js  
2019-05-03 21:26:42.801 +08:00 [INF] Request finished in 8.3198ms 200 application/javascript
2019-05-03 21:26:42.793 +08:00 [INF] Request finished in 2.9245ms 200 text/css
2019-05-03 21:26:42.795 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.log.js  
2019-05-03 21:26:42.800 +08:00 [INF] Request finished in 8.9213ms 200 text/css
2019-05-03 21:26:42.808 +08:00 [INF] Request finished in 15.6774ms 200 application/javascript
2019-05-03 21:26:42.809 +08:00 [INF] Request finished in 15.5677ms 200 application/javascript
2019-05-03 21:26:42.820 +08:00 [INF] Request finished in 25.7179ms 200 application/javascript
2019-05-03 21:26:43.025 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard  
2019-05-03 21:26:43.039 +08:00 [INF] Request finished in 13.643ms 200 text/html
2019-05-03 21:26:43.057 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/css.tempusdominus-bootstrap-4.min.css  
2019-05-03 21:26:43.057 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/css.styles.css  
2019-05-03 21:26:43.059 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.tempusdominus-bootstrap-4.js  
2019-05-03 21:26:43.059 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.log.js  
2019-05-03 21:26:43.068 +08:00 [INF] Request finished in 10.2099ms 200 text/css
2019-05-03 21:26:43.071 +08:00 [INF] Request finished in 11.3902ms 200 application/javascript
2019-05-03 21:26:43.059 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.spin.min.js  
2019-05-03 21:26:43.060 +08:00 [INF] Request finished in 3.9029ms 200 text/css
2019-05-03 21:26:43.059 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.moment.min.js  
2019-05-03 21:26:43.091 +08:00 [INF] Request finished in 31.107ms 200 application/javascript
2019-05-03 21:26:43.103 +08:00 [INF] Request finished in 43.5999ms 200 application/javascript
2019-05-03 21:26:43.107 +08:00 [INF] Request finished in 48.187ms 200 application/javascript
2019-05-03 21:26:43.258 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard  
2019-05-03 21:26:43.274 +08:00 [INF] Request finished in 15.8284ms 200 text/html
2019-05-03 21:26:43.290 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/css.styles.css  
2019-05-03 21:26:43.291 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/css.tempusdominus-bootstrap-4.min.css  
2019-05-03 21:26:43.291 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.moment.min.js  
2019-05-03 21:26:43.292 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.spin.min.js  
2019-05-03 21:26:43.297 +08:00 [INF] Request finished in 7.1316ms 200 text/css
2019-05-03 21:26:43.292 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.log.js  
2019-05-03 21:26:43.291 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.tempusdominus-bootstrap-4.js  
2019-05-03 21:26:43.303 +08:00 [INF] Request finished in 12.7045ms 200 text/css
2019-05-03 21:26:43.309 +08:00 [INF] Request finished in 16.5676ms 200 application/javascript
2019-05-03 21:26:43.306 +08:00 [INF] Request finished in 15.0028ms 200 application/javascript
2019-05-03 21:26:43.320 +08:00 [INF] Request finished in 27.7906ms 200 application/javascript
2019-05-03 21:26:43.332 +08:00 [INF] Request finished in 40.6614ms 200 application/javascript
2019-05-03 21:26:43.456 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard  
2019-05-03 21:26:43.471 +08:00 [INF] Request finished in 15.0383ms 200 text/html
2019-05-03 21:26:43.493 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/css.tempusdominus-bootstrap-4.min.css  
2019-05-03 21:26:43.493 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/css.styles.css  
2019-05-03 21:26:43.495 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.moment.min.js  
2019-05-03 21:26:43.495 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.spin.min.js  
2019-05-03 21:26:43.496 +08:00 [INF] Request finished in 3.3443ms 200 text/css
2019-05-03 21:26:43.496 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.log.js  
2019-05-03 21:26:43.495 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.tempusdominus-bootstrap-4.js  
2019-05-03 21:26:43.503 +08:00 [INF] Request finished in 9.4595ms 200 text/css
2019-05-03 21:26:43.508 +08:00 [INF] Request finished in 12.7714ms 200 application/javascript
2019-05-03 21:26:43.513 +08:00 [INF] Request finished in 17.6913ms 200 application/javascript
2019-05-03 21:26:43.506 +08:00 [INF] Request finished in 10.8323ms 200 application/javascript
2019-05-03 21:26:43.523 +08:00 [INF] Request finished in 28.153ms 200 application/javascript
2019-05-03 21:26:43.698 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard  
2019-05-03 21:26:43.712 +08:00 [INF] Request finished in 13.8092ms 200 text/html
2019-05-03 21:26:43.731 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/css.tempusdominus-bootstrap-4.min.css  
2019-05-03 21:26:43.731 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/css.styles.css  
2019-05-03 21:26:43.732 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.tempusdominus-bootstrap-4.js  
2019-05-03 21:26:43.731 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.moment.min.js  
2019-05-03 21:26:43.732 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.spin.min.js  
2019-05-03 21:26:43.737 +08:00 [INF] Request finished in 7.3196ms 200 text/css
2019-05-03 21:26:43.732 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.log.js  
2019-05-03 21:26:43.745 +08:00 [INF] Request finished in 14.2029ms 200 text/css
2019-05-03 21:26:43.751 +08:00 [INF] Request finished in 19.3404ms 200 application/javascript
2019-05-03 21:26:43.752 +08:00 [INF] Request finished in 18.5595ms 200 application/javascript
2019-05-03 21:26:43.757 +08:00 [INF] Request finished in 25.4305ms 200 application/javascript
2019-05-03 21:26:43.762 +08:00 [INF] Request finished in 30.175ms 200 application/javascript
2019-05-03 21:30:30.140 +08:00 [DBG] TaskSchedulingThreadPool configured with max concurrency of 10 and TaskScheduler ThreadPoolTaskScheduler.
2019-05-03 21:30:30.382 +08:00 [INF] Initialized Scheduler Signaller of type: Quartz.Core.SchedulerSignalerImpl
2019-05-03 21:30:30.397 +08:00 [INF] Quartz Scheduler v.3.0.7.0 created.
2019-05-03 21:30:30.409 +08:00 [INF] RAMJobStore initialized.
2019-05-03 21:30:30.427 +08:00 [INF] Scheduler meta-data: Quartz Scheduler (v3.0.7.0) 'QuartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'Quartz.Core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'Quartz.Simpl.DefaultThreadPool' - with 10 threads.
  Using job-store 'Quartz.Simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2019-05-03 21:30:30.431 +08:00 [INF] Quartz scheduler 'QuartzScheduler' initialized
2019-05-03 21:30:30.433 +08:00 [INF] Quartz scheduler version: 3.0.7.0
2019-05-03 21:30:34.680 +08:00 [INF] User profile is available. Using 'C:\Users\gainorloss\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2019-05-03 21:30:41.236 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard  
2019-05-03 21:30:49.129 +08:00 [INF] Request finished in 7896.6483ms 200 text/html
2019-05-03 21:30:49.206 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.moment.min.js  
2019-05-03 21:30:49.207 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.tempusdominus-bootstrap-4.js  
2019-05-03 21:30:49.211 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/css.tempusdominus-bootstrap-4.min.css  
2019-05-03 21:30:49.210 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.log.js  
2019-05-03 21:30:49.209 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.spin.min.js  
2019-05-03 21:30:49.211 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/css.styles.css  
2019-05-03 21:30:49.227 +08:00 [INF] Request finished in 17.3552ms 200 text/css
2019-05-03 21:30:49.227 +08:00 [INF] Request finished in 21.8887ms 200 application/javascript
2019-05-03 21:30:49.228 +08:00 [INF] Request finished in 17.4867ms 200 application/javascript
2019-05-03 21:30:49.234 +08:00 [INF] Request finished in 27.4276ms 200 application/javascript
2019-05-03 21:30:49.229 +08:00 [INF] Request finished in 20.4324ms 200 application/javascript
2019-05-03 21:30:49.256 +08:00 [INF] Request finished in 45.3516ms 200 text/css
2019-05-03 21:30:54.059 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/Dashboard/BasicLog  
2019-05-03 21:30:54.343 +08:00 [INF] Request finished in 284.2752ms 200 text/html
2019-05-03 21:30:54.359 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/css.tempusdominus-bootstrap-4.min.css  
2019-05-03 21:30:54.362 +08:00 [INF] Request finished in 3.0543ms 200 text/css
2019-05-03 21:30:54.363 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/css.styles.css  
2019-05-03 21:30:54.364 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.moment.min.js  
2019-05-03 21:30:54.364 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.tempusdominus-bootstrap-4.js  
2019-05-03 21:30:54.365 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.log.js  
2019-05-03 21:30:54.370 +08:00 [INF] Request finished in 7.2843ms 200 text/css
2019-05-03 21:30:54.365 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.spin.min.js  
2019-05-03 21:30:54.370 +08:00 [INF] Request finished in 6.6787ms 200 application/javascript
2019-05-03 21:30:54.378 +08:00 [INF] Request finished in 14.1001ms 200 application/javascript
2019-05-03 21:30:54.379 +08:00 [INF] Request finished in 14.1155ms 200 application/javascript
2019-05-03 21:30:54.385 +08:00 [INF] Request finished in 20.3466ms 200 application/javascript
2019-05-03 21:30:55.139 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard  
2019-05-03 21:30:55.155 +08:00 [INF] Request finished in 16.5484ms 200 text/html
2019-05-03 21:30:55.171 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/css.tempusdominus-bootstrap-4.min.css  
2019-05-03 21:30:55.171 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/css.styles.css  
2019-05-03 21:30:55.172 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.moment.min.js  
2019-05-03 21:30:55.173 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.spin.min.js  
2019-05-03 21:30:55.173 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.tempusdominus-bootstrap-4.js  
2019-05-03 21:30:55.173 +08:00 [INF] Request finished in 2.2809ms 200 text/css
2019-05-03 21:30:55.183 +08:00 [INF] Request finished in 10.1425ms 200 application/javascript
2019-05-03 21:30:55.179 +08:00 [INF] Request finished in 6.5159ms 200 application/javascript
2019-05-03 21:30:55.179 +08:00 [INF] Request finished in 8.0725ms 200 text/css
2019-05-03 21:30:55.173 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.log.js  
2019-05-03 21:30:55.189 +08:00 [INF] Request finished in 16.2423ms 200 application/javascript
2019-05-03 21:30:55.199 +08:00 [INF] Request finished in 26.3313ms 200 application/javascript
2019-05-03 21:30:59.508 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/api/v1.0/Values/Get  
2019-05-03 21:30:59.679 +08:00 [INF] Executing endpoint 'Dnc.API.Controllers.ValuesController.Get (Dnc.API)'
2019-05-03 21:30:59.697 +08:00 [INF] Route matched with {action = "Get", controller = "Values"}. Executing action Dnc.API.Controllers.ValuesController.Get (Dnc.API)
2019-05-03 21:30:59.870 +08:00 [INF] Executing action method Dnc.API.Controllers.ValuesController.Get (Dnc.API) - Validation state: "Valid"
2019-05-03 21:30:59.883 +08:00 [DBG] aha
2019-05-03 21:30:59.992 +08:00 [DBG] redis:gainorloss
2019-05-03 21:31:03.039 +08:00 [DBG] redis:gainorloss
2019-05-03 21:31:03.154 +08:00 [DBG] redis:gainorloss
2019-05-03 21:31:03.156 +08:00 [ERR] 260be03facac4478836daa4201629924
2019-05-03 21:31:03.449 +08:00 [INF] Executed action method Dnc.API.Controllers.ValuesController.Get (Dnc.API), returned result Microsoft.AspNetCore.Mvc.OkObjectResult in 3563.6221ms.
2019-05-03 21:31:03.474 +08:00 [INF] Executing ObjectResult, writing value of type '<>f__AnonymousType0`4[[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[<>f__AnonymousType1`3[[Dnc.API.Models.ABC, Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.IEnumerable`1[[Dnc.API.Models.ABC, Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2019-05-03 21:31:03.550 +08:00 [INF] Executed action Dnc.API.Controllers.ValuesController.Get (Dnc.API) in 3844.4989ms
2019-05-03 21:31:03.554 +08:00 [INF] Executed endpoint 'Dnc.API.Controllers.ValuesController.Get (Dnc.API)'
2019-05-03 21:31:03.556 +08:00 [INF] Request finished in 4048.2961ms 200 application/json; charset=utf-8
2019-05-03 21:31:10.485 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/api/v1.0/Values/Get  
2019-05-03 21:31:10.490 +08:00 [INF] Executing endpoint 'Dnc.API.Controllers.ValuesController.Get (Dnc.API)'
2019-05-03 21:31:10.493 +08:00 [INF] Route matched with {action = "Get", controller = "Values"}. Executing action Dnc.API.Controllers.ValuesController.Get (Dnc.API)
2019-05-03 21:31:10.533 +08:00 [INF] Executing action method Dnc.API.Controllers.ValuesController.Get (Dnc.API) - Validation state: "Valid"
2019-05-03 21:31:10.535 +08:00 [DBG] aha
2019-05-03 21:31:10.580 +08:00 [DBG] redis:gainorloss
2019-05-03 21:31:13.625 +08:00 [DBG] redis:gainorloss
2019-05-03 21:31:13.629 +08:00 [DBG] redis:gainorloss
2019-05-03 21:31:13.630 +08:00 [ERR] 5639cd254ecb421d83c9aa420162a56b
2019-05-03 21:31:13.681 +08:00 [INF] Executed action method Dnc.API.Controllers.ValuesController.Get (Dnc.API), returned result Microsoft.AspNetCore.Mvc.OkObjectResult in 3146.097ms.
2019-05-03 21:31:13.685 +08:00 [INF] Executing ObjectResult, writing value of type '<>f__AnonymousType0`4[[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[<>f__AnonymousType1`3[[Dnc.API.Models.ABC, Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.IEnumerable`1[[Dnc.API.Models.ABC, Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Dnc.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2019-05-03 21:31:13.694 +08:00 [INF] Executed action Dnc.API.Controllers.ValuesController.Get (Dnc.API) in 3197.4374000000003ms
2019-05-03 21:31:13.696 +08:00 [INF] Executed endpoint 'Dnc.API.Controllers.ValuesController.Get (Dnc.API)'
2019-05-03 21:31:13.698 +08:00 [INF] Request finished in 3212.5794ms 200 application/json; charset=utf-8
2019-05-03 21:31:32.667 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard  
2019-05-03 21:31:32.682 +08:00 [INF] Request finished in 14.9736ms 200 text/html
2019-05-03 21:31:32.716 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/css.styles.css  
2019-05-03 21:31:32.718 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/css.tempusdominus-bootstrap-4.min.css  
2019-05-03 21:31:32.718 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.log.js  
2019-05-03 21:31:32.718 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.moment.min.js  
2019-05-03 21:31:32.743 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.tempusdominus-bootstrap-4.js  
2019-05-03 21:31:32.718 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.spin.min.js  
2019-05-03 21:31:32.746 +08:00 [INF] Request finished in 28.681ms 200 text/css
2019-05-03 21:31:32.748 +08:00 [INF] Request finished in 29.7613ms 200 application/javascript
2019-05-03 21:31:32.750 +08:00 [INF] Request finished in 33.0212ms 200 application/javascript
2019-05-03 21:31:32.747 +08:00 [INF] Request finished in 30.3483ms 200 text/css
2019-05-03 21:31:32.755 +08:00 [INF] Request finished in 11.9385ms 200 application/javascript
2019-05-03 21:31:32.756 +08:00 [INF] Request finished in 38.8526ms 200 application/javascript
2019-05-03 21:31:34.297 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/Dashboard/BasicLog  
2019-05-03 21:31:34.306 +08:00 [INF] Request finished in 9.4463ms 200 text/html
2019-05-03 21:31:34.328 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/css.tempusdominus-bootstrap-4.min.css  
2019-05-03 21:31:34.328 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/css.styles.css  
2019-05-03 21:31:34.330 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.moment.min.js  
2019-05-03 21:31:34.331 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.log.js  
2019-05-03 21:31:34.330 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.spin.min.js  
2019-05-03 21:31:34.330 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.tempusdominus-bootstrap-4.js  
2019-05-03 21:31:34.330 +08:00 [INF] Request finished in 2.1545ms 200 text/css
2019-05-03 21:31:34.354 +08:00 [INF] Request finished in 23.3599ms 200 application/javascript
2019-05-03 21:31:34.356 +08:00 [INF] Request finished in 25.9545ms 200 application/javascript
2019-05-03 21:31:34.352 +08:00 [INF] Request finished in 22.7763ms 200 application/javascript
2019-05-03 21:31:34.344 +08:00 [INF] Request finished in 15.8729ms 200 text/css
2019-05-03 21:31:34.362 +08:00 [INF] Request finished in 32.1317ms 200 application/javascript
2019-05-03 21:32:10.159 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard  
2019-05-03 21:32:10.179 +08:00 [INF] Request finished in 19.3558ms 200 text/html
2019-05-03 21:32:10.213 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/css.styles.css  
2019-05-03 21:32:10.227 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.moment.min.js  
2019-05-03 21:32:10.227 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.tempusdominus-bootstrap-4.js  
2019-05-03 21:32:10.260 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.spin.min.js  
2019-05-03 21:32:10.273 +08:00 [INF] Request finished in 57.5737ms 200 application/javascript
2019-05-03 21:32:10.260 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/css.tempusdominus-bootstrap-4.min.css  
2019-05-03 21:32:10.271 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.log.js  
2019-05-03 21:32:10.273 +08:00 [INF] Request finished in 60.2831ms 200 text/css
2019-05-03 21:32:10.277 +08:00 [INF] Request finished in 50.0834ms 200 application/javascript
2019-05-03 21:32:10.277 +08:00 [INF] Request finished in 17.6814ms 200 application/javascript
2019-05-03 21:32:10.281 +08:00 [INF] Request finished in 20.7172ms 200 text/css
2019-05-03 21:32:10.282 +08:00 [INF] Request finished in 10.6869ms 200 application/javascript
2019-05-03 21:32:11.209 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/Dashboard/BasicLog  
2019-05-03 21:32:11.215 +08:00 [INF] Request finished in 6.5346ms 200 text/html
2019-05-03 21:32:11.236 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/css.tempusdominus-bootstrap-4.min.css  
2019-05-03 21:32:11.236 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/css.styles.css  
2019-05-03 21:32:11.240 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.moment.min.js  
2019-05-03 21:32:11.260 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.tempusdominus-bootstrap-4.js  
2019-05-03 21:32:11.239 +08:00 [INF] Request finished in 3.1994ms 200 text/css
2019-05-03 21:32:11.294 +08:00 [INF] Request finished in 53.9975ms 200 application/javascript
2019-05-03 21:32:11.246 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.spin.min.js  
2019-05-03 21:32:11.243 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.log.js  
2019-05-03 21:32:11.264 +08:00 [INF] Request finished in 27.8359ms 200 text/css
2019-05-03 21:32:11.310 +08:00 [INF] Request finished in 49.5754ms 200 application/javascript
2019-05-03 21:32:11.315 +08:00 [INF] Request finished in 68.9631ms 200 application/javascript
2019-05-03 21:32:11.316 +08:00 [INF] Request finished in 73.7844ms 200 application/javascript
2019-05-03 21:32:12.365 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard  
2019-05-03 21:32:12.383 +08:00 [INF] Request finished in 18.4407ms 200 text/html
2019-05-03 21:32:12.433 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/css.styles.css  
2019-05-03 21:32:12.434 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/css.tempusdominus-bootstrap-4.min.css  
2019-05-03 21:32:12.451 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.spin.min.js  
2019-05-03 21:32:12.485 +08:00 [INF] Request finished in 66.3033ms 200 text/css
2019-05-03 21:32:12.484 +08:00 [INF] Request finished in 49.2973ms 200 text/css
2019-05-03 21:32:12.487 +08:00 [INF] Request finished in 35.8287ms 200 application/javascript
2019-05-03 21:32:12.480 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.log.js  
2019-05-03 21:32:12.466 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.tempusdominus-bootstrap-4.js  
2019-05-03 21:32:12.434 +08:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/LogDashboard/js.moment.min.js  
2019-05-03 21:32:12.510 +08:00 [INF] Request finished in 29.6849ms 200 application/javascript
2019-05-03 21:32:12.513 +08:00 [INF] Request finished in 47.0479ms 200 application/javascript
2019-05-03 21:32:12.514 +08:00 [INF] Request finished in 79.8649ms 200 application/javascript
2019-05-03 21:32:18.310 +08:00 [INF] Request starting HTTP/1.1 POST http://localhost:5000/LogDashboard/Dashboard/Searchlog application/x-www-form-urlencoded; charset=UTF-8 24
2019-05-03 21:32:18.427 +08:00 [INF] Request finished in 116.6484ms 200 text/json
2019-05-03 21:32:19.025 +08:00 [INF] Request starting HTTP/1.1 POST http://localhost:5000/LogDashboard/Dashboard/Searchlog application/x-www-form-urlencoded; charset=UTF-8 24
2019-05-03 21:32:19.030 +08:00 [INF] Request finished in 5.7404ms 200 text/json
2019-05-03 21:32:19.592 +08:00 [INF] Request starting HTTP/1.1 POST http://localhost:5000/LogDashboard/Dashboard/Searchlog application/x-www-form-urlencoded; charset=UTF-8 24
2019-05-03 21:32:19.598 +08:00 [INF] Request finished in 5.687ms 200 text/json
2019-05-03 21:32:19.816 +08:00 [INF] Request starting HTTP/1.1 POST http://localhost:5000/LogDashboard/Dashboard/Searchlog application/x-www-form-urlencoded; charset=UTF-8 24
2019-05-03 21:32:19.821 +08:00 [INF] Request finished in 4.8758ms 200 text/json
2019-05-03 21:32:20.024 +08:00 [INF] Request starting HTTP/1.1 POST http://localhost:5000/LogDashboard/Dashboard/Searchlog application/x-www-form-urlencoded; charset=UTF-8 24
2019-05-03 21:32:20.029 +08:00 [INF] Request finished in 5.5122ms 200 text/json
2019-05-03 21:32:20.216 +08:00 [INF] Request starting HTTP/1.1 POST http://localhost:5000/LogDashboard/Dashboard/Searchlog application/x-www-form-urlencoded; charset=UTF-8 24
2019-05-03 21:32:20.221 +08:00 [INF] Request finished in 5.2045ms 200 text/json
2019-05-03 21:32:20.448 +08:00 [INF] Request starting HTTP/1.1 POST http://localhost:5000/LogDashboard/Dashboard/Searchlog application/x-www-form-urlencoded; charset=UTF-8 24
2019-05-03 21:32:20.453 +08:00 [INF] Request finished in 5.341ms 200 text/json
2019-05-03 21:32:20.632 +08:00 [INF] Request starting HTTP/1.1 POST http://localhost:5000/LogDashboard/Dashboard/Searchlog application/x-www-form-urlencoded; charset=UTF-8 24
2019-05-03 21:32:20.639 +08:00 [INF] Request finished in 6.685ms 200 text/json
2019-05-03 21:32:20.865 +08:00 [INF] Request starting HTTP/1.1 POST http://localhost:5000/LogDashboard/Dashboard/Searchlog application/x-www-form-urlencoded; charset=UTF-8 24
2019-05-03 21:32:20.869 +08:00 [INF] Request finished in 4.7874ms 200 text/json
2019-05-03 21:32:21.056 +08:00 [INF] Request starting HTTP/1.1 POST http://localhost:5000/LogDashboard/Dashboard/Searchlog application/x-www-form-urlencoded; charset=UTF-8 24
2019-05-03 21:32:21.061 +08:00 [INF] Request finished in 4.9164ms 200 text/json
2019-05-03 21:32:21.256 +08:00 [INF] Request starting HTTP/1.1 POST http://localhost:5000/LogDashboard/Dashboard/Searchlog application/x-www-form-urlencoded; charset=UTF-8 24
2019-05-03 21:32:21.261 +08:00 [INF] Request finished in 4.9331ms 200 text/json
2019-05-03 21:32:21.464 +08:00 [INF] Request starting HTTP/1.1 POST http://localhost:5000/LogDashboard/Dashboard/Searchlog application/x-www-form-urlencoded; charset=UTF-8 24
2019-05-03 21:32:21.469 +08:00 [INF] Request finished in 5.5793ms 200 text/json
2019-05-03 21:32:21.681 +08:00 [INF] Request starting HTTP/1.1 POST http://localhost:5000/LogDashboard/Dashboard/Searchlog application/x-www-form-urlencoded; charset=UTF-8 24
2019-05-03 21:32:21.687 +08:00 [INF] Request finished in 5.9311ms 200 text/json
2019-05-03 21:32:21.896 +08:00 [INF] Request starting HTTP/1.1 POST http://localhost:5000/LogDashboard/Dashboard/Searchlog application/x-www-form-urlencoded; charset=UTF-8 24
2019-05-03 21:32:21.901 +08:00 [INF] Request finished in 4.8384ms 200 text/json
2019-05-03 21:32:22.096 +08:00 [INF] Request starting HTTP/1.1 POST http://localhost:5000/LogDashboard/Dashboard/Searchlog application/x-www-form-urlencoded; charset=UTF-8 24
2019-05-03 21:32:22.102 +08:00 [INF] Request finished in 5.7223ms 200 text/json
2019-05-03 21:32:22.312 +08:00 [INF] Request starting HTTP/1.1 POST http://localhost:5000/LogDashboard/Dashboard/Searchlog application/x-www-form-urlencoded; charset=UTF-8 24
2019-05-03 21:32:22.318 +08:00 [INF] Request finished in 5.9159ms 200 text/json
2019-05-03 21:32:22.506 +08:00 [INF] Request starting HTTP/1.1 POST http://localhost:5000/LogDashboard/Dashboard/Searchlog application/x-www-form-urlencoded; charset=UTF-8 24
2019-05-03 21:32:22.511 +08:00 [INF] Request finished in 4.9246ms 200 text/json
2019-05-03 21:32:22.968 +08:00 [INF] Request starting HTTP/1.1 POST http://localhost:5000/LogDashboard/Dashboard/Searchlog application/x-www-form-urlencoded; charset=UTF-8 24
2019-05-03 21:32:22.974 +08:00 [INF] Request finished in 5.6366ms 200 text/json
